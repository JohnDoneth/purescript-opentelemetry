module Codegen.Module where

import Codegen.Expression
import Codegen.Import
import Codegen.ModuleName
import Data.Foldable
import Data.String.Extra
import Prelude

import Codegen.Function (tellLine)
import Control.Monad.Writer.Class (class MonadTell)
import Data.Array (concat)

data Module = Module {
    name :: ModuleName,
    imports :: Array Import,
    expressions :: Array Expression
}

line :: String -> String
line string = string <> "\n"

emptyLine :: String 
emptyLine = ""

encodeExpressions :: forall m. MonadTell String m => Array Expression -> m Unit
encodeExpressions expressions = do
  for_ expressions \expression -> do
    tellLine $ emptyLine
    encodeExpression expression
    

encodeModuleImports :: forall m. MonadTell String m => Array Import -> m Unit
encodeModuleImports imports = do
  for_ imports \importItem -> do
    encodeImport importItem


encodeModule :: forall m. MonadTell String m => Module -> m Unit
encodeModule (Module {name: name, imports: imports, expressions: expressions}) = do
  tellLine "-- Warning: This file was auto-generated!"
  tellLine "-- Do not edit this file as your changes may be lost!"
  
  tellLine $ intercalate " " ["module", show name, "where"]
  tellLine $ emptyLine

  encodeModuleImports imports

  tellLine $ emptyLine

  encodeExpressions expressions

  tellLine $ emptyLine
  
  --tellLine $ "import " <> intercalate "." (map pascalCase segments)
