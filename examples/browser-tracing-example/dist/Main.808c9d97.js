// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles
parcelRequire = (function (modules, cache, entry, globalName) {
  // Save the require from previous bundle to this closure if any
  var previousRequire = typeof parcelRequire === 'function' && parcelRequire;
  var nodeRequire = typeof require === 'function' && require;

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire = typeof parcelRequire === 'function' && parcelRequire;
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error('Cannot find module \'' + name + '\'');
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = cache[name] = new newRequire.Module(name);

      modules[name][0].call(module.exports, localRequire, module, module.exports, this);
    }

    return cache[name].exports;

    function localRequire(x){
      return newRequire(localRequire.resolve(x));
    }

    function resolve(x){
      return modules[name][1][x] || x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function (id, exports) {
    modules[id] = [function (require, module) {
      module.exports = exports;
    }, {}];
  };

  var error;
  for (var i = 0; i < entry.length; i++) {
    try {
      newRequire(entry[i]);
    } catch (e) {
      // Save first error but execute all entries
      if (!error) {
        error = e;
      }
    }
  }

  if (entry.length) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(entry[entry.length - 1]);

    // CommonJS
    if (typeof exports === "object" && typeof module !== "undefined") {
      module.exports = mainExports;

    // RequireJS
    } else if (typeof define === "function" && define.amd) {
     define(function () {
       return mainExports;
     });

    // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }

  // Override the current require with this new one
  parcelRequire = newRequire;

  if (error) {
    // throw error from earlier, _after updating parcelRequire_
    throw error;
  }

  return newRequire;
})({"output/Main/foreign.js":[function(require,module,exports) {
"use strict";

exports.ffiFetch = function () {
  fetch('http://localhost:8090/fetch.js');
};
},{}],"output/Data.Functor/foreign.js":[function(require,module,exports) {
"use strict";

exports.arrayMap = function (f) {
  return function (arr) {
    var l = arr.length;
    var result = new Array(l);

    for (var i = 0; i < l; i++) {
      result[i] = f(arr[i]);
    }

    return result;
  };
};
},{}],"output/Control.Semigroupoid/index.js":[function(require,module,exports) {
// Generated by purs version 0.14.5
"use strict";

var semigroupoidFn = {
  compose: function compose(f) {
    return function (g) {
      return function (x) {
        return f(g(x));
      };
    };
  }
};

var compose = function compose(dict) {
  return dict.compose;
};

var composeFlipped = function composeFlipped(dictSemigroupoid) {
  return function (f) {
    return function (g) {
      return compose(dictSemigroupoid)(g)(f);
    };
  };
};

module.exports = {
  compose: compose,
  composeFlipped: composeFlipped,
  semigroupoidFn: semigroupoidFn
};
},{}],"output/Control.Category/index.js":[function(require,module,exports) {
// Generated by purs version 0.14.5
"use strict";

var Control_Semigroupoid = require("../Control.Semigroupoid/index.js");

var identity = function identity(dict) {
  return dict.identity;
};

var categoryFn = {
  identity: function identity(x) {
    return x;
  },
  Semigroupoid0: function Semigroupoid0() {
    return Control_Semigroupoid.semigroupoidFn;
  }
};
module.exports = {
  identity: identity,
  categoryFn: categoryFn,
  compose: Control_Semigroupoid.compose
};
},{"../Control.Semigroupoid/index.js":"output/Control.Semigroupoid/index.js"}],"output/Data.Boolean/index.js":[function(require,module,exports) {
// Generated by purs version 0.14.5
"use strict";

var otherwise = true;
module.exports = {
  otherwise: otherwise
};
},{}],"output/Data.Function/index.js":[function(require,module,exports) {
// Generated by purs version 0.14.5
"use strict";

var Control_Category = require("../Control.Category/index.js");

var Data_Boolean = require("../Data.Boolean/index.js");

var on = function on(f) {
  return function (g) {
    return function (x) {
      return function (y) {
        return f(g(x))(g(y));
      };
    };
  };
};

var flip = function flip(f) {
  return function (b) {
    return function (a) {
      return f(a)(b);
    };
  };
};

var $$const = function $$const(a) {
  return function (v) {
    return a;
  };
};

var applyN = function applyN(f) {
  var go = function go($copy_n) {
    return function ($copy_acc) {
      var $tco_var_n = $copy_n;
      var $tco_done = false;
      var $tco_result;

      function $tco_loop(n, acc) {
        if (n <= 0) {
          $tco_done = true;
          return acc;
        }

        ;

        if (Data_Boolean.otherwise) {
          $tco_var_n = n - 1 | 0;
          $copy_acc = f(acc);
          return;
        }

        ;
        throw new Error("Failed pattern match at Data.Function (line 100, column 3 - line 102, column 37): " + [n.constructor.name, acc.constructor.name]);
      }

      ;

      while (!$tco_done) {
        $tco_result = $tco_loop($tco_var_n, $copy_acc);
      }

      ;
      return $tco_result;
    };
  };

  return go;
};

var applyFlipped = function applyFlipped(x) {
  return function (f) {
    return f(x);
  };
};

var apply = function apply(f) {
  return function (x) {
    return f(x);
  };
};

module.exports = {
  flip: flip,
  "const": $$const,
  apply: apply,
  applyFlipped: applyFlipped,
  applyN: applyN,
  on: on,
  compose: Control_Category.compose,
  identity: Control_Category.identity
};
},{"../Control.Category/index.js":"output/Control.Category/index.js","../Data.Boolean/index.js":"output/Data.Boolean/index.js"}],"output/Data.Unit/foreign.js":[function(require,module,exports) {
"use strict";

exports.unit = {};
},{}],"output/Data.Unit/index.js":[function(require,module,exports) {
// Generated by purs version 0.14.5
"use strict";

var $foreign = require("./foreign.js");

var showUnit = {
  show: function show(v) {
    return "unit";
  }
};
module.exports = {
  showUnit: showUnit,
  unit: $foreign.unit
};
},{"./foreign.js":"output/Data.Unit/foreign.js"}],"output/Type.Proxy/index.js":[function(require,module,exports) {
// Generated by purs version 0.14.5
"use strict";

var Proxy3 = function () {
  function Proxy3() {}

  ;
  Proxy3.value = new Proxy3();
  return Proxy3;
}();

var Proxy2 = function () {
  function Proxy2() {}

  ;
  Proxy2.value = new Proxy2();
  return Proxy2;
}();

var $$Proxy = function () {
  function $$Proxy() {}

  ;
  $$Proxy.value = new $$Proxy();
  return $$Proxy;
}();

module.exports = {
  "Proxy": $$Proxy,
  Proxy2: Proxy2,
  Proxy3: Proxy3
};
},{}],"output/Data.Functor/index.js":[function(require,module,exports) {
// Generated by purs version 0.14.5
"use strict";

var $foreign = require("./foreign.js");

var Control_Semigroupoid = require("../Control.Semigroupoid/index.js");

var Data_Function = require("../Data.Function/index.js");

var Data_Unit = require("../Data.Unit/index.js");

var Type_Proxy = require("../Type.Proxy/index.js");

var map = function map(dict) {
  return dict.map;
};

var mapFlipped = function mapFlipped(dictFunctor) {
  return function (fa) {
    return function (f) {
      return map(dictFunctor)(f)(fa);
    };
  };
};

var $$void = function $$void(dictFunctor) {
  return map(dictFunctor)(Data_Function["const"](Data_Unit.unit));
};

var voidLeft = function voidLeft(dictFunctor) {
  return function (f) {
    return function (x) {
      return map(dictFunctor)(Data_Function["const"](x))(f);
    };
  };
};

var voidRight = function voidRight(dictFunctor) {
  return function (x) {
    return map(dictFunctor)(Data_Function["const"](x));
  };
};

var functorProxy = {
  map: function map(v) {
    return function (v1) {
      return Type_Proxy["Proxy"].value;
    };
  }
};
var functorFn = {
  map: Control_Semigroupoid.compose(Control_Semigroupoid.semigroupoidFn)
};
var functorArray = {
  map: $foreign.arrayMap
};

var flap = function flap(dictFunctor) {
  return function (ff) {
    return function (x) {
      return map(dictFunctor)(function (f) {
        return f(x);
      })(ff);
    };
  };
};

module.exports = {
  map: map,
  mapFlipped: mapFlipped,
  "void": $$void,
  voidRight: voidRight,
  voidLeft: voidLeft,
  flap: flap,
  functorFn: functorFn,
  functorArray: functorArray,
  functorProxy: functorProxy
};
},{"./foreign.js":"output/Data.Functor/foreign.js","../Control.Semigroupoid/index.js":"output/Control.Semigroupoid/index.js","../Data.Function/index.js":"output/Data.Function/index.js","../Data.Unit/index.js":"output/Data.Unit/index.js","../Type.Proxy/index.js":"output/Type.Proxy/index.js"}],"output/Data.Semigroup/foreign.js":[function(require,module,exports) {
"use strict";

exports.concatString = function (s1) {
  return function (s2) {
    return s1 + s2;
  };
};

exports.concatArray = function (xs) {
  return function (ys) {
    if (xs.length === 0) return ys;
    if (ys.length === 0) return xs;
    return xs.concat(ys);
  };
};
},{}],"output/Data.Symbol/foreign.js":[function(require,module,exports) {
"use strict"; // module Data.Symbol

exports.unsafeCoerce = function (arg) {
  return arg;
};
},{}],"output/Data.Symbol/index.js":[function(require,module,exports) {
// Generated by purs version 0.14.5
"use strict";

var $foreign = require("./foreign.js");

var Type_Proxy = require("../Type.Proxy/index.js");

var SProxy = function () {
  function SProxy() {}

  ;
  SProxy.value = new SProxy();
  return SProxy;
}();

var reifySymbol = function reifySymbol(s) {
  return function (f) {
    return $foreign.unsafeCoerce(function (dictIsSymbol) {
      return f(dictIsSymbol);
    })({
      reflectSymbol: function reflectSymbol(v) {
        return s;
      }
    })(Type_Proxy["Proxy"].value);
  };
};

var reflectSymbol = function reflectSymbol(dict) {
  return dict.reflectSymbol;
};

module.exports = {
  reflectSymbol: reflectSymbol,
  reifySymbol: reifySymbol,
  SProxy: SProxy
};
},{"./foreign.js":"output/Data.Symbol/foreign.js","../Type.Proxy/index.js":"output/Type.Proxy/index.js"}],"output/Data.Void/index.js":[function(require,module,exports) {
// Generated by purs version 0.14.5
"use strict";

var Void = function Void(x) {
  return x;
};

var absurd = function absurd(a) {
  var spin = function spin($copy_v) {
    var $tco_result;

    function $tco_loop(v) {
      $copy_v = v;
      return;
    }

    ;

    while (!false) {
      $tco_result = $tco_loop($copy_v);
    }

    ;
    return $tco_result;
  };

  return spin(a);
};

var showVoid = {
  show: absurd
};
module.exports = {
  absurd: absurd,
  showVoid: showVoid
};
},{}],"output/Record.Unsafe/foreign.js":[function(require,module,exports) {
"use strict";

exports.unsafeHas = function (label) {
  return function (rec) {
    return {}.hasOwnProperty.call(rec, label);
  };
};

exports.unsafeGet = function (label) {
  return function (rec) {
    return rec[label];
  };
};

exports.unsafeSet = function (label) {
  return function (value) {
    return function (rec) {
      var copy = {};

      for (var key in rec) {
        if ({}.hasOwnProperty.call(rec, key)) {
          copy[key] = rec[key];
        }
      }

      copy[label] = value;
      return copy;
    };
  };
};

exports.unsafeDelete = function (label) {
  return function (rec) {
    var copy = {};

    for (var key in rec) {
      if (key !== label && {}.hasOwnProperty.call(rec, key)) {
        copy[key] = rec[key];
      }
    }

    return copy;
  };
};
},{}],"output/Record.Unsafe/index.js":[function(require,module,exports) {
// Generated by purs version 0.14.5
"use strict";

var $foreign = require("./foreign.js");

module.exports = {
  unsafeHas: $foreign.unsafeHas,
  unsafeGet: $foreign.unsafeGet,
  unsafeSet: $foreign.unsafeSet,
  unsafeDelete: $foreign.unsafeDelete
};
},{"./foreign.js":"output/Record.Unsafe/foreign.js"}],"output/Data.Semigroup/index.js":[function(require,module,exports) {
// Generated by purs version 0.14.5
"use strict";

var $foreign = require("./foreign.js");

var Data_Symbol = require("../Data.Symbol/index.js");

var Data_Unit = require("../Data.Unit/index.js");

var Data_Void = require("../Data.Void/index.js");

var Record_Unsafe = require("../Record.Unsafe/index.js");

var Type_Proxy = require("../Type.Proxy/index.js");

var semigroupVoid = {
  append: function append(v) {
    return Data_Void.absurd;
  }
};
var semigroupUnit = {
  append: function append(v) {
    return function (v1) {
      return Data_Unit.unit;
    };
  }
};
var semigroupString = {
  append: $foreign.concatString
};
var semigroupRecordNil = {
  appendRecord: function appendRecord(v) {
    return function (v1) {
      return function (v2) {
        return {};
      };
    };
  }
};
var semigroupProxy3 = {
  append: function append(v) {
    return function (v1) {
      return Type_Proxy.Proxy3.value;
    };
  }
};
var semigroupProxy2 = {
  append: function append(v) {
    return function (v1) {
      return Type_Proxy.Proxy2.value;
    };
  }
};
var semigroupProxy = {
  append: function append(v) {
    return function (v1) {
      return Type_Proxy["Proxy"].value;
    };
  }
};
var semigroupArray = {
  append: $foreign.concatArray
};

var _appendRecord = function appendRecord(dict) {
  return dict.appendRecord;
};

var semigroupRecord = function semigroupRecord(dictRowToList) {
  return function (dictSemigroupRecord) {
    return {
      append: _appendRecord(dictSemigroupRecord)(Type_Proxy["Proxy"].value)
    };
  };
};

var _append = function append(dict) {
  return dict.append;
};

var semigroupFn = function semigroupFn(dictSemigroup) {
  return {
    append: function append(f) {
      return function (g) {
        return function (x) {
          return _append(dictSemigroup)(f(x))(g(x));
        };
      };
    }
  };
};

var semigroupRecordCons = function semigroupRecordCons(dictIsSymbol) {
  return function (dictCons) {
    return function (dictSemigroupRecord) {
      return function (dictSemigroup) {
        return {
          appendRecord: function appendRecord(v) {
            return function (ra) {
              return function (rb) {
                var tail = _appendRecord(dictSemigroupRecord)(Type_Proxy["Proxy"].value)(ra)(rb);

                var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value);
                var insert = Record_Unsafe.unsafeSet(key);
                var get = Record_Unsafe.unsafeGet(key);
                return insert(_append(dictSemigroup)(get(ra))(get(rb)))(tail);
              };
            };
          }
        };
      };
    };
  };
};

module.exports = {
  append: _append,
  appendRecord: _appendRecord,
  semigroupString: semigroupString,
  semigroupUnit: semigroupUnit,
  semigroupVoid: semigroupVoid,
  semigroupFn: semigroupFn,
  semigroupArray: semigroupArray,
  semigroupProxy: semigroupProxy,
  semigroupProxy2: semigroupProxy2,
  semigroupProxy3: semigroupProxy3,
  semigroupRecord: semigroupRecord,
  semigroupRecordNil: semigroupRecordNil,
  semigroupRecordCons: semigroupRecordCons
};
},{"./foreign.js":"output/Data.Semigroup/foreign.js","../Data.Symbol/index.js":"output/Data.Symbol/index.js","../Data.Unit/index.js":"output/Data.Unit/index.js","../Data.Void/index.js":"output/Data.Void/index.js","../Record.Unsafe/index.js":"output/Record.Unsafe/index.js","../Type.Proxy/index.js":"output/Type.Proxy/index.js"}],"output/Control.Alt/index.js":[function(require,module,exports) {
// Generated by purs version 0.14.5
"use strict";

var Data_Functor = require("../Data.Functor/index.js");

var Data_Semigroup = require("../Data.Semigroup/index.js");

var altArray = {
  alt: Data_Semigroup.append(Data_Semigroup.semigroupArray),
  Functor0: function Functor0() {
    return Data_Functor.functorArray;
  }
};

var alt = function alt(dict) {
  return dict.alt;
};

module.exports = {
  alt: alt,
  altArray: altArray,
  map: Data_Functor.map,
  "void": Data_Functor["void"]
};
},{"../Data.Functor/index.js":"output/Data.Functor/index.js","../Data.Semigroup/index.js":"output/Data.Semigroup/index.js"}],"output/Control.Apply/foreign.js":[function(require,module,exports) {
"use strict";

exports.arrayApply = function (fs) {
  return function (xs) {
    var l = fs.length;
    var k = xs.length;
    var result = new Array(l * k);
    var n = 0;

    for (var i = 0; i < l; i++) {
      var f = fs[i];

      for (var j = 0; j < k; j++) {
        result[n++] = f(xs[j]);
      }
    }

    return result;
  };
};
},{}],"output/Control.Apply/index.js":[function(require,module,exports) {
// Generated by purs version 0.14.5
"use strict";

var $foreign = require("./foreign.js");

var Control_Category = require("../Control.Category/index.js");

var Data_Function = require("../Data.Function/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Type_Proxy = require("../Type.Proxy/index.js");

var applyProxy = {
  apply: function apply(v) {
    return function (v1) {
      return Type_Proxy["Proxy"].value;
    };
  },
  Functor0: function Functor0() {
    return Data_Functor.functorProxy;
  }
};
var applyFn = {
  apply: function apply(f) {
    return function (g) {
      return function (x) {
        return f(x)(g(x));
      };
    };
  },
  Functor0: function Functor0() {
    return Data_Functor.functorFn;
  }
};
var applyArray = {
  apply: $foreign.arrayApply,
  Functor0: function Functor0() {
    return Data_Functor.functorArray;
  }
};

var apply = function apply(dict) {
  return dict.apply;
};

var applyFirst = function applyFirst(dictApply) {
  return function (a) {
    return function (b) {
      return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(Data_Function["const"])(a))(b);
    };
  };
};

var applySecond = function applySecond(dictApply) {
  return function (a) {
    return function (b) {
      return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(Data_Function["const"](Control_Category.identity(Control_Category.categoryFn)))(a))(b);
    };
  };
};

var lift2 = function lift2(dictApply) {
  return function (f) {
    return function (a) {
      return function (b) {
        return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(f)(a))(b);
      };
    };
  };
};

var lift3 = function lift3(dictApply) {
  return function (f) {
    return function (a) {
      return function (b) {
        return function (c) {
          return apply(dictApply)(apply(dictApply)(Data_Functor.map(dictApply.Functor0())(f)(a))(b))(c);
        };
      };
    };
  };
};

var lift4 = function lift4(dictApply) {
  return function (f) {
    return function (a) {
      return function (b) {
        return function (c) {
          return function (d) {
            return apply(dictApply)(apply(dictApply)(apply(dictApply)(Data_Functor.map(dictApply.Functor0())(f)(a))(b))(c))(d);
          };
        };
      };
    };
  };
};

var lift5 = function lift5(dictApply) {
  return function (f) {
    return function (a) {
      return function (b) {
        return function (c) {
          return function (d) {
            return function (e) {
              return apply(dictApply)(apply(dictApply)(apply(dictApply)(apply(dictApply)(Data_Functor.map(dictApply.Functor0())(f)(a))(b))(c))(d))(e);
            };
          };
        };
      };
    };
  };
};

module.exports = {
  apply: apply,
  applyFirst: applyFirst,
  applySecond: applySecond,
  lift2: lift2,
  lift3: lift3,
  lift4: lift4,
  lift5: lift5,
  applyFn: applyFn,
  applyArray: applyArray,
  applyProxy: applyProxy,
  map: Data_Functor.map,
  "void": Data_Functor["void"]
};
},{"./foreign.js":"output/Control.Apply/foreign.js","../Control.Category/index.js":"output/Control.Category/index.js","../Data.Function/index.js":"output/Data.Function/index.js","../Data.Functor/index.js":"output/Data.Functor/index.js","../Type.Proxy/index.js":"output/Type.Proxy/index.js"}],"output/Control.Applicative/index.js":[function(require,module,exports) {
// Generated by purs version 0.14.5
"use strict";

var Control_Apply = require("../Control.Apply/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_Unit = require("../Data.Unit/index.js");

var Type_Proxy = require("../Type.Proxy/index.js");

var pure = function pure(dict) {
  return dict.pure;
};

var unless = function unless(dictApplicative) {
  return function (v) {
    return function (v1) {
      if (!v) {
        return v1;
      }

      ;

      if (v) {
        return pure(dictApplicative)(Data_Unit.unit);
      }

      ;
      throw new Error("Failed pattern match at Control.Applicative (line 66, column 1 - line 66, column 65): " + [v.constructor.name, v1.constructor.name]);
    };
  };
};

var when = function when(dictApplicative) {
  return function (v) {
    return function (v1) {
      if (v) {
        return v1;
      }

      ;

      if (!v) {
        return pure(dictApplicative)(Data_Unit.unit);
      }

      ;
      throw new Error("Failed pattern match at Control.Applicative (line 61, column 1 - line 61, column 63): " + [v.constructor.name, v1.constructor.name]);
    };
  };
};

var liftA1 = function liftA1(dictApplicative) {
  return function (f) {
    return function (a) {
      return Control_Apply.apply(dictApplicative.Apply0())(pure(dictApplicative)(f))(a);
    };
  };
};

var applicativeProxy = {
  pure: function pure(v) {
    return Type_Proxy["Proxy"].value;
  },
  Apply0: function Apply0() {
    return Control_Apply.applyProxy;
  }
};
var applicativeFn = {
  pure: function pure(x) {
    return function (v) {
      return x;
    };
  },
  Apply0: function Apply0() {
    return Control_Apply.applyFn;
  }
};
var applicativeArray = {
  pure: function pure(x) {
    return [x];
  },
  Apply0: function Apply0() {
    return Control_Apply.applyArray;
  }
};
module.exports = {
  pure: pure,
  liftA1: liftA1,
  unless: unless,
  when: when,
  applicativeFn: applicativeFn,
  applicativeArray: applicativeArray,
  applicativeProxy: applicativeProxy,
  apply: Control_Apply.apply,
  map: Data_Functor.map,
  "void": Data_Functor["void"]
};
},{"../Control.Apply/index.js":"output/Control.Apply/index.js","../Data.Functor/index.js":"output/Data.Functor/index.js","../Data.Unit/index.js":"output/Data.Unit/index.js","../Type.Proxy/index.js":"output/Type.Proxy/index.js"}],"output/Data.Bounded/foreign.js":[function(require,module,exports) {
"use strict";

exports.topInt = 2147483647;
exports.bottomInt = -2147483648;
exports.topChar = String.fromCharCode(65535);
exports.bottomChar = String.fromCharCode(0);
exports.topNumber = Number.POSITIVE_INFINITY;
exports.bottomNumber = Number.NEGATIVE_INFINITY;
},{}],"output/Data.Ord/foreign.js":[function(require,module,exports) {
"use strict";

var unsafeCompareImpl = function unsafeCompareImpl(lt) {
  return function (eq) {
    return function (gt) {
      return function (x) {
        return function (y) {
          return x < y ? lt : x === y ? eq : gt;
        };
      };
    };
  };
};

exports.ordBooleanImpl = unsafeCompareImpl;
exports.ordIntImpl = unsafeCompareImpl;
exports.ordNumberImpl = unsafeCompareImpl;
exports.ordStringImpl = unsafeCompareImpl;
exports.ordCharImpl = unsafeCompareImpl;

exports.ordArrayImpl = function (f) {
  return function (xs) {
    return function (ys) {
      var i = 0;
      var xlen = xs.length;
      var ylen = ys.length;

      while (i < xlen && i < ylen) {
        var x = xs[i];
        var y = ys[i];
        var o = f(x)(y);

        if (o !== 0) {
          return o;
        }

        i++;
      }

      if (xlen === ylen) {
        return 0;
      } else if (xlen > ylen) {
        return -1;
      } else {
        return 1;
      }
    };
  };
};
},{}],"output/Data.Eq/foreign.js":[function(require,module,exports) {
"use strict";

var refEq = function refEq(r1) {
  return function (r2) {
    return r1 === r2;
  };
};

exports.eqBooleanImpl = refEq;
exports.eqIntImpl = refEq;
exports.eqNumberImpl = refEq;
exports.eqCharImpl = refEq;
exports.eqStringImpl = refEq;

exports.eqArrayImpl = function (f) {
  return function (xs) {
    return function (ys) {
      if (xs.length !== ys.length) return false;

      for (var i = 0; i < xs.length; i++) {
        if (!f(xs[i])(ys[i])) return false;
      }

      return true;
    };
  };
};
},{}],"output/Data.Eq/index.js":[function(require,module,exports) {
// Generated by purs version 0.14.5
"use strict";

var $foreign = require("./foreign.js");

var Data_Symbol = require("../Data.Symbol/index.js");

var Record_Unsafe = require("../Record.Unsafe/index.js");

var Type_Proxy = require("../Type.Proxy/index.js");

var eqVoid = {
  eq: function eq(v) {
    return function (v1) {
      return true;
    };
  }
};
var eqUnit = {
  eq: function eq(v) {
    return function (v1) {
      return true;
    };
  }
};
var eqString = {
  eq: $foreign.eqStringImpl
};
var eqRowNil = {
  eqRecord: function eqRecord(v) {
    return function (v1) {
      return function (v2) {
        return true;
      };
    };
  }
};

var _eqRecord = function eqRecord(dict) {
  return dict.eqRecord;
};

var eqRec = function eqRec(dictRowToList) {
  return function (dictEqRecord) {
    return {
      eq: _eqRecord(dictEqRecord)(Type_Proxy["Proxy"].value)
    };
  };
};

var eqProxy3 = {
  eq: function eq(v) {
    return function (v1) {
      return true;
    };
  }
};
var eqProxy2 = {
  eq: function eq(v) {
    return function (v1) {
      return true;
    };
  }
};
var eqProxy = {
  eq: function eq(v) {
    return function (v1) {
      return true;
    };
  }
};
var eqNumber = {
  eq: $foreign.eqNumberImpl
};
var eqInt = {
  eq: $foreign.eqIntImpl
};
var eqChar = {
  eq: $foreign.eqCharImpl
};
var eqBoolean = {
  eq: $foreign.eqBooleanImpl
};

var eq1 = function eq1(dict) {
  return dict.eq1;
};

var eq = function eq(dict) {
  return dict.eq;
};

var eqArray = function eqArray(dictEq) {
  return {
    eq: $foreign.eqArrayImpl(eq(dictEq))
  };
};

var eq1Array = {
  eq1: function eq1(dictEq) {
    return eq(eqArray(dictEq));
  }
};

var eqRowCons = function eqRowCons(dictEqRecord) {
  return function (dictCons) {
    return function (dictIsSymbol) {
      return function (dictEq) {
        return {
          eqRecord: function eqRecord(v) {
            return function (ra) {
              return function (rb) {
                var tail = _eqRecord(dictEqRecord)(Type_Proxy["Proxy"].value)(ra)(rb);

                var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value);
                var get = Record_Unsafe.unsafeGet(key);
                return eq(dictEq)(get(ra))(get(rb)) && tail;
              };
            };
          }
        };
      };
    };
  };
};

var notEq = function notEq(dictEq) {
  return function (x) {
    return function (y) {
      return eq(eqBoolean)(eq(dictEq)(x)(y))(false);
    };
  };
};

var notEq1 = function notEq1(dictEq1) {
  return function (dictEq) {
    return function (x) {
      return function (y) {
        return eq(eqBoolean)(eq1(dictEq1)(dictEq)(x)(y))(false);
      };
    };
  };
};

module.exports = {
  eq: eq,
  notEq: notEq,
  eq1: eq1,
  notEq1: notEq1,
  eqRecord: _eqRecord,
  eqBoolean: eqBoolean,
  eqInt: eqInt,
  eqNumber: eqNumber,
  eqChar: eqChar,
  eqString: eqString,
  eqUnit: eqUnit,
  eqVoid: eqVoid,
  eqArray: eqArray,
  eqRec: eqRec,
  eqProxy: eqProxy,
  eqProxy2: eqProxy2,
  eqProxy3: eqProxy3,
  eq1Array: eq1Array,
  eqRowNil: eqRowNil,
  eqRowCons: eqRowCons
};
},{"./foreign.js":"output/Data.Eq/foreign.js","../Data.Symbol/index.js":"output/Data.Symbol/index.js","../Record.Unsafe/index.js":"output/Record.Unsafe/index.js","../Type.Proxy/index.js":"output/Type.Proxy/index.js"}],"output/Data.Ordering/index.js":[function(require,module,exports) {
// Generated by purs version 0.14.5
"use strict";

var LT = function () {
  function LT() {}

  ;
  LT.value = new LT();
  return LT;
}();

var GT = function () {
  function GT() {}

  ;
  GT.value = new GT();
  return GT;
}();

var EQ = function () {
  function EQ() {}

  ;
  EQ.value = new EQ();
  return EQ;
}();

var showOrdering = {
  show: function show(v) {
    if (v instanceof LT) {
      return "LT";
    }

    ;

    if (v instanceof GT) {
      return "GT";
    }

    ;

    if (v instanceof EQ) {
      return "EQ";
    }

    ;
    throw new Error("Failed pattern match at Data.Ordering (line 26, column 1 - line 29, column 17): " + [v.constructor.name]);
  }
};
var semigroupOrdering = {
  append: function append(v) {
    return function (v1) {
      if (v instanceof LT) {
        return LT.value;
      }

      ;

      if (v instanceof GT) {
        return GT.value;
      }

      ;

      if (v instanceof EQ) {
        return v1;
      }

      ;
      throw new Error("Failed pattern match at Data.Ordering (line 21, column 1 - line 24, column 18): " + [v.constructor.name, v1.constructor.name]);
    };
  }
};

var invert = function invert(v) {
  if (v instanceof GT) {
    return LT.value;
  }

  ;

  if (v instanceof EQ) {
    return EQ.value;
  }

  ;

  if (v instanceof LT) {
    return GT.value;
  }

  ;
  throw new Error("Failed pattern match at Data.Ordering (line 33, column 1 - line 33, column 31): " + [v.constructor.name]);
};

var eqOrdering = {
  eq: function eq(v) {
    return function (v1) {
      if (v instanceof LT && v1 instanceof LT) {
        return true;
      }

      ;

      if (v instanceof GT && v1 instanceof GT) {
        return true;
      }

      ;

      if (v instanceof EQ && v1 instanceof EQ) {
        return true;
      }

      ;
      return false;
    };
  }
};
module.exports = {
  LT: LT,
  GT: GT,
  EQ: EQ,
  invert: invert,
  eqOrdering: eqOrdering,
  semigroupOrdering: semigroupOrdering,
  showOrdering: showOrdering
};
},{}],"output/Data.Ring/foreign.js":[function(require,module,exports) {
"use strict";

exports.intSub = function (x) {
  return function (y) {
    /* jshint bitwise: false */
    return x - y | 0;
  };
};

exports.numSub = function (n1) {
  return function (n2) {
    return n1 - n2;
  };
};
},{}],"output/Data.Semiring/foreign.js":[function(require,module,exports) {
"use strict";

exports.intAdd = function (x) {
  return function (y) {
    /* jshint bitwise: false */
    return x + y | 0;
  };
};

exports.intMul = function (x) {
  return function (y) {
    /* jshint bitwise: false */
    return x * y | 0;
  };
};

exports.numAdd = function (n1) {
  return function (n2) {
    return n1 + n2;
  };
};

exports.numMul = function (n1) {
  return function (n2) {
    return n1 * n2;
  };
};
},{}],"output/Data.Semiring/index.js":[function(require,module,exports) {
// Generated by purs version 0.14.5
"use strict";

var $foreign = require("./foreign.js");

var Data_Symbol = require("../Data.Symbol/index.js");

var Data_Unit = require("../Data.Unit/index.js");

var Record_Unsafe = require("../Record.Unsafe/index.js");

var Type_Proxy = require("../Type.Proxy/index.js");

var _zeroRecord = function zeroRecord(dict) {
  return dict.zeroRecord;
};

var _zero = function zero(dict) {
  return dict.zero;
};

var semiringUnit = {
  add: function add(v) {
    return function (v1) {
      return Data_Unit.unit;
    };
  },
  zero: Data_Unit.unit,
  mul: function mul(v) {
    return function (v1) {
      return Data_Unit.unit;
    };
  },
  one: Data_Unit.unit
};
var semiringRecordNil = {
  addRecord: function addRecord(v) {
    return function (v1) {
      return function (v2) {
        return {};
      };
    };
  },
  mulRecord: function mulRecord(v) {
    return function (v1) {
      return function (v2) {
        return {};
      };
    };
  },
  oneRecord: function oneRecord(v) {
    return function (v1) {
      return {};
    };
  },
  zeroRecord: function zeroRecord(v) {
    return function (v1) {
      return {};
    };
  }
};
var semiringProxy3 = {
  add: function add(v) {
    return function (v1) {
      return Type_Proxy.Proxy3.value;
    };
  },
  mul: function mul(v) {
    return function (v1) {
      return Type_Proxy.Proxy3.value;
    };
  },
  one: Type_Proxy.Proxy3.value,
  zero: Type_Proxy.Proxy3.value
};
var semiringProxy2 = {
  add: function add(v) {
    return function (v1) {
      return Type_Proxy.Proxy2.value;
    };
  },
  mul: function mul(v) {
    return function (v1) {
      return Type_Proxy.Proxy2.value;
    };
  },
  one: Type_Proxy.Proxy2.value,
  zero: Type_Proxy.Proxy2.value
};
var semiringProxy = {
  add: function add(v) {
    return function (v1) {
      return Type_Proxy["Proxy"].value;
    };
  },
  mul: function mul(v) {
    return function (v1) {
      return Type_Proxy["Proxy"].value;
    };
  },
  one: Type_Proxy["Proxy"].value,
  zero: Type_Proxy["Proxy"].value
};
var semiringNumber = {
  add: $foreign.numAdd,
  zero: 0.0,
  mul: $foreign.numMul,
  one: 1.0
};
var semiringInt = {
  add: $foreign.intAdd,
  zero: 0,
  mul: $foreign.intMul,
  one: 1
};

var _oneRecord = function oneRecord(dict) {
  return dict.oneRecord;
};

var _one = function one(dict) {
  return dict.one;
};

var _mulRecord = function mulRecord(dict) {
  return dict.mulRecord;
};

var _mul = function mul(dict) {
  return dict.mul;
};

var _addRecord = function addRecord(dict) {
  return dict.addRecord;
};

var semiringRecord = function semiringRecord(dictRowToList) {
  return function (dictSemiringRecord) {
    return {
      add: _addRecord(dictSemiringRecord)(Type_Proxy["Proxy"].value),
      mul: _mulRecord(dictSemiringRecord)(Type_Proxy["Proxy"].value),
      one: _oneRecord(dictSemiringRecord)(Type_Proxy["Proxy"].value)(Type_Proxy["Proxy"].value),
      zero: _zeroRecord(dictSemiringRecord)(Type_Proxy["Proxy"].value)(Type_Proxy["Proxy"].value)
    };
  };
};

var _add = function add(dict) {
  return dict.add;
};

var semiringFn = function semiringFn(dictSemiring) {
  return {
    add: function add(f) {
      return function (g) {
        return function (x) {
          return _add(dictSemiring)(f(x))(g(x));
        };
      };
    },
    zero: function zero(v) {
      return _zero(dictSemiring);
    },
    mul: function mul(f) {
      return function (g) {
        return function (x) {
          return _mul(dictSemiring)(f(x))(g(x));
        };
      };
    },
    one: function one(v) {
      return _one(dictSemiring);
    }
  };
};

var semiringRecordCons = function semiringRecordCons(dictIsSymbol) {
  return function (dictCons) {
    return function (dictSemiringRecord) {
      return function (dictSemiring) {
        return {
          addRecord: function addRecord(v) {
            return function (ra) {
              return function (rb) {
                var tail = _addRecord(dictSemiringRecord)(Type_Proxy["Proxy"].value)(ra)(rb);

                var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value);
                var insert = Record_Unsafe.unsafeSet(key);
                var get = Record_Unsafe.unsafeGet(key);
                return insert(_add(dictSemiring)(get(ra))(get(rb)))(tail);
              };
            };
          },
          mulRecord: function mulRecord(v) {
            return function (ra) {
              return function (rb) {
                var tail = _mulRecord(dictSemiringRecord)(Type_Proxy["Proxy"].value)(ra)(rb);

                var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value);
                var insert = Record_Unsafe.unsafeSet(key);
                var get = Record_Unsafe.unsafeGet(key);
                return insert(_mul(dictSemiring)(get(ra))(get(rb)))(tail);
              };
            };
          },
          oneRecord: function oneRecord(v) {
            return function (v1) {
              var tail = _oneRecord(dictSemiringRecord)(Type_Proxy["Proxy"].value)(Type_Proxy["Proxy"].value);

              var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value);
              var insert = Record_Unsafe.unsafeSet(key);
              return insert(_one(dictSemiring))(tail);
            };
          },
          zeroRecord: function zeroRecord(v) {
            return function (v1) {
              var tail = _zeroRecord(dictSemiringRecord)(Type_Proxy["Proxy"].value)(Type_Proxy["Proxy"].value);

              var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value);
              var insert = Record_Unsafe.unsafeSet(key);
              return insert(_zero(dictSemiring))(tail);
            };
          }
        };
      };
    };
  };
};

module.exports = {
  add: _add,
  zero: _zero,
  mul: _mul,
  one: _one,
  addRecord: _addRecord,
  mulRecord: _mulRecord,
  oneRecord: _oneRecord,
  zeroRecord: _zeroRecord,
  semiringInt: semiringInt,
  semiringNumber: semiringNumber,
  semiringFn: semiringFn,
  semiringUnit: semiringUnit,
  semiringProxy: semiringProxy,
  semiringProxy2: semiringProxy2,
  semiringProxy3: semiringProxy3,
  semiringRecord: semiringRecord,
  semiringRecordNil: semiringRecordNil,
  semiringRecordCons: semiringRecordCons
};
},{"./foreign.js":"output/Data.Semiring/foreign.js","../Data.Symbol/index.js":"output/Data.Symbol/index.js","../Data.Unit/index.js":"output/Data.Unit/index.js","../Record.Unsafe/index.js":"output/Record.Unsafe/index.js","../Type.Proxy/index.js":"output/Type.Proxy/index.js"}],"output/Data.Ring/index.js":[function(require,module,exports) {
// Generated by purs version 0.14.5
"use strict";

var $foreign = require("./foreign.js");

var Data_Semiring = require("../Data.Semiring/index.js");

var Data_Symbol = require("../Data.Symbol/index.js");

var Data_Unit = require("../Data.Unit/index.js");

var Record_Unsafe = require("../Record.Unsafe/index.js");

var Type_Proxy = require("../Type.Proxy/index.js");

var _subRecord = function subRecord(dict) {
  return dict.subRecord;
};

var _sub = function sub(dict) {
  return dict.sub;
};

var ringUnit = {
  sub: function sub(v) {
    return function (v1) {
      return Data_Unit.unit;
    };
  },
  Semiring0: function Semiring0() {
    return Data_Semiring.semiringUnit;
  }
};
var ringRecordNil = {
  subRecord: function subRecord(v) {
    return function (v1) {
      return function (v2) {
        return {};
      };
    };
  },
  SemiringRecord0: function SemiringRecord0() {
    return Data_Semiring.semiringRecordNil;
  }
};

var ringRecordCons = function ringRecordCons(dictIsSymbol) {
  return function (dictCons) {
    return function (dictRingRecord) {
      return function (dictRing) {
        return {
          subRecord: function subRecord(v) {
            return function (ra) {
              return function (rb) {
                var tail = _subRecord(dictRingRecord)(Type_Proxy["Proxy"].value)(ra)(rb);

                var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value);
                var insert = Record_Unsafe.unsafeSet(key);
                var get = Record_Unsafe.unsafeGet(key);
                return insert(_sub(dictRing)(get(ra))(get(rb)))(tail);
              };
            };
          },
          SemiringRecord0: function SemiringRecord0() {
            return Data_Semiring.semiringRecordCons(dictIsSymbol)()(dictRingRecord.SemiringRecord0())(dictRing.Semiring0());
          }
        };
      };
    };
  };
};

var ringRecord = function ringRecord(dictRowToList) {
  return function (dictRingRecord) {
    return {
      sub: _subRecord(dictRingRecord)(Type_Proxy["Proxy"].value),
      Semiring0: function Semiring0() {
        return Data_Semiring.semiringRecord()(dictRingRecord.SemiringRecord0());
      }
    };
  };
};

var ringProxy3 = {
  sub: function sub(v) {
    return function (v1) {
      return Type_Proxy.Proxy3.value;
    };
  },
  Semiring0: function Semiring0() {
    return Data_Semiring.semiringProxy3;
  }
};
var ringProxy2 = {
  sub: function sub(v) {
    return function (v1) {
      return Type_Proxy.Proxy2.value;
    };
  },
  Semiring0: function Semiring0() {
    return Data_Semiring.semiringProxy2;
  }
};
var ringProxy = {
  sub: function sub(v) {
    return function (v1) {
      return Type_Proxy["Proxy"].value;
    };
  },
  Semiring0: function Semiring0() {
    return Data_Semiring.semiringProxy;
  }
};
var ringNumber = {
  sub: $foreign.numSub,
  Semiring0: function Semiring0() {
    return Data_Semiring.semiringNumber;
  }
};
var ringInt = {
  sub: $foreign.intSub,
  Semiring0: function Semiring0() {
    return Data_Semiring.semiringInt;
  }
};

var ringFn = function ringFn(dictRing) {
  return {
    sub: function sub(f) {
      return function (g) {
        return function (x) {
          return _sub(dictRing)(f(x))(g(x));
        };
      };
    },
    Semiring0: function Semiring0() {
      return Data_Semiring.semiringFn(dictRing.Semiring0());
    }
  };
};

var negate = function negate(dictRing) {
  return function (a) {
    return _sub(dictRing)(Data_Semiring.zero(dictRing.Semiring0()))(a);
  };
};

module.exports = {
  sub: _sub,
  negate: negate,
  subRecord: _subRecord,
  ringInt: ringInt,
  ringNumber: ringNumber,
  ringUnit: ringUnit,
  ringFn: ringFn,
  ringProxy: ringProxy,
  ringProxy2: ringProxy2,
  ringProxy3: ringProxy3,
  ringRecord: ringRecord,
  ringRecordNil: ringRecordNil,
  ringRecordCons: ringRecordCons,
  add: Data_Semiring.add,
  mul: Data_Semiring.mul,
  one: Data_Semiring.one,
  zero: Data_Semiring.zero
};
},{"./foreign.js":"output/Data.Ring/foreign.js","../Data.Semiring/index.js":"output/Data.Semiring/index.js","../Data.Symbol/index.js":"output/Data.Symbol/index.js","../Data.Unit/index.js":"output/Data.Unit/index.js","../Record.Unsafe/index.js":"output/Record.Unsafe/index.js","../Type.Proxy/index.js":"output/Type.Proxy/index.js"}],"output/Data.Ord/index.js":[function(require,module,exports) {
// Generated by purs version 0.14.5
"use strict";

var $foreign = require("./foreign.js");

var Data_Eq = require("../Data.Eq/index.js");

var Data_Ordering = require("../Data.Ordering/index.js");

var Data_Ring = require("../Data.Ring/index.js");

var Data_Semiring = require("../Data.Semiring/index.js");

var Data_Symbol = require("../Data.Symbol/index.js");

var Record_Unsafe = require("../Record.Unsafe/index.js");

var Type_Proxy = require("../Type.Proxy/index.js");

var ordVoid = {
  compare: function compare(v) {
    return function (v1) {
      return Data_Ordering.EQ.value;
    };
  },
  Eq0: function Eq0() {
    return Data_Eq.eqVoid;
  }
};
var ordUnit = {
  compare: function compare(v) {
    return function (v1) {
      return Data_Ordering.EQ.value;
    };
  },
  Eq0: function Eq0() {
    return Data_Eq.eqUnit;
  }
};
var ordString = {
  compare: $foreign.ordStringImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value),
  Eq0: function Eq0() {
    return Data_Eq.eqString;
  }
};
var ordRecordNil = {
  compareRecord: function compareRecord(v) {
    return function (v1) {
      return function (v2) {
        return Data_Ordering.EQ.value;
      };
    };
  },
  EqRecord0: function EqRecord0() {
    return Data_Eq.eqRowNil;
  }
};
var ordProxy3 = {
  compare: function compare(v) {
    return function (v1) {
      return Data_Ordering.EQ.value;
    };
  },
  Eq0: function Eq0() {
    return Data_Eq.eqProxy3;
  }
};
var ordProxy2 = {
  compare: function compare(v) {
    return function (v1) {
      return Data_Ordering.EQ.value;
    };
  },
  Eq0: function Eq0() {
    return Data_Eq.eqProxy2;
  }
};
var ordProxy = {
  compare: function compare(v) {
    return function (v1) {
      return Data_Ordering.EQ.value;
    };
  },
  Eq0: function Eq0() {
    return Data_Eq.eqProxy;
  }
};
var ordOrdering = {
  compare: function compare(v) {
    return function (v1) {
      if (v instanceof Data_Ordering.LT && v1 instanceof Data_Ordering.LT) {
        return Data_Ordering.EQ.value;
      }

      ;

      if (v instanceof Data_Ordering.EQ && v1 instanceof Data_Ordering.EQ) {
        return Data_Ordering.EQ.value;
      }

      ;

      if (v instanceof Data_Ordering.GT && v1 instanceof Data_Ordering.GT) {
        return Data_Ordering.EQ.value;
      }

      ;

      if (v instanceof Data_Ordering.LT) {
        return Data_Ordering.LT.value;
      }

      ;

      if (v instanceof Data_Ordering.EQ && v1 instanceof Data_Ordering.LT) {
        return Data_Ordering.GT.value;
      }

      ;

      if (v instanceof Data_Ordering.EQ && v1 instanceof Data_Ordering.GT) {
        return Data_Ordering.LT.value;
      }

      ;

      if (v instanceof Data_Ordering.GT) {
        return Data_Ordering.GT.value;
      }

      ;
      throw new Error("Failed pattern match at Data.Ord (line 121, column 1 - line 128, column 21): " + [v.constructor.name, v1.constructor.name]);
    };
  },
  Eq0: function Eq0() {
    return Data_Ordering.eqOrdering;
  }
};
var ordNumber = {
  compare: $foreign.ordNumberImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value),
  Eq0: function Eq0() {
    return Data_Eq.eqNumber;
  }
};
var ordInt = {
  compare: $foreign.ordIntImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value),
  Eq0: function Eq0() {
    return Data_Eq.eqInt;
  }
};
var ordChar = {
  compare: $foreign.ordCharImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value),
  Eq0: function Eq0() {
    return Data_Eq.eqChar;
  }
};
var ordBoolean = {
  compare: $foreign.ordBooleanImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value),
  Eq0: function Eq0() {
    return Data_Eq.eqBoolean;
  }
};

var _compareRecord = function compareRecord(dict) {
  return dict.compareRecord;
};

var ordRecord = function ordRecord(dictRowToList) {
  return function (dictOrdRecord) {
    return {
      compare: _compareRecord(dictOrdRecord)(Type_Proxy["Proxy"].value),
      Eq0: function Eq0() {
        return Data_Eq.eqRec()(dictOrdRecord.EqRecord0());
      }
    };
  };
};

var compare1 = function compare1(dict) {
  return dict.compare1;
};

var compare = function compare(dict) {
  return dict.compare;
};

var comparing = function comparing(dictOrd) {
  return function (f) {
    return function (x) {
      return function (y) {
        return compare(dictOrd)(f(x))(f(y));
      };
    };
  };
};

var greaterThan = function greaterThan(dictOrd) {
  return function (a1) {
    return function (a2) {
      var v = compare(dictOrd)(a1)(a2);

      if (v instanceof Data_Ordering.GT) {
        return true;
      }

      ;
      return false;
    };
  };
};

var greaterThanOrEq = function greaterThanOrEq(dictOrd) {
  return function (a1) {
    return function (a2) {
      var v = compare(dictOrd)(a1)(a2);

      if (v instanceof Data_Ordering.LT) {
        return false;
      }

      ;
      return true;
    };
  };
};

var signum = function signum(dictOrd) {
  return function (dictRing) {
    return function (x) {
      var $52 = greaterThanOrEq(dictOrd)(x)(Data_Semiring.zero(dictRing.Semiring0()));

      if ($52) {
        return Data_Semiring.one(dictRing.Semiring0());
      }

      ;
      return Data_Ring.negate(dictRing)(Data_Semiring.one(dictRing.Semiring0()));
    };
  };
};

var lessThan = function lessThan(dictOrd) {
  return function (a1) {
    return function (a2) {
      var v = compare(dictOrd)(a1)(a2);

      if (v instanceof Data_Ordering.LT) {
        return true;
      }

      ;
      return false;
    };
  };
};

var lessThanOrEq = function lessThanOrEq(dictOrd) {
  return function (a1) {
    return function (a2) {
      var v = compare(dictOrd)(a1)(a2);

      if (v instanceof Data_Ordering.GT) {
        return false;
      }

      ;
      return true;
    };
  };
};

var max = function max(dictOrd) {
  return function (x) {
    return function (y) {
      var v = compare(dictOrd)(x)(y);

      if (v instanceof Data_Ordering.LT) {
        return y;
      }

      ;

      if (v instanceof Data_Ordering.EQ) {
        return x;
      }

      ;

      if (v instanceof Data_Ordering.GT) {
        return x;
      }

      ;
      throw new Error("Failed pattern match at Data.Ord (line 176, column 3 - line 179, column 12): " + [v.constructor.name]);
    };
  };
};

var min = function min(dictOrd) {
  return function (x) {
    return function (y) {
      var v = compare(dictOrd)(x)(y);

      if (v instanceof Data_Ordering.LT) {
        return x;
      }

      ;

      if (v instanceof Data_Ordering.EQ) {
        return x;
      }

      ;

      if (v instanceof Data_Ordering.GT) {
        return y;
      }

      ;
      throw new Error("Failed pattern match at Data.Ord (line 167, column 3 - line 170, column 12): " + [v.constructor.name]);
    };
  };
};

var ordArray = function ordArray(dictOrd) {
  return {
    compare: function () {
      var toDelta = function toDelta(x) {
        return function (y) {
          var v = compare(dictOrd)(x)(y);

          if (v instanceof Data_Ordering.EQ) {
            return 0;
          }

          ;

          if (v instanceof Data_Ordering.LT) {
            return 1;
          }

          ;

          if (v instanceof Data_Ordering.GT) {
            return -1 | 0;
          }

          ;
          throw new Error("Failed pattern match at Data.Ord (line 74, column 7 - line 77, column 17): " + [v.constructor.name]);
        };
      };

      return function (xs) {
        return function (ys) {
          return compare(ordInt)(0)($foreign.ordArrayImpl(toDelta)(xs)(ys));
        };
      };
    }(),
    Eq0: function Eq0() {
      return Data_Eq.eqArray(dictOrd.Eq0());
    }
  };
};

var ord1Array = {
  compare1: function compare1(dictOrd) {
    return compare(ordArray(dictOrd));
  },
  Eq10: function Eq10() {
    return Data_Eq.eq1Array;
  }
};

var ordRecordCons = function ordRecordCons(dictOrdRecord) {
  return function (dictCons) {
    return function (dictIsSymbol) {
      return function (dictOrd) {
        return {
          compareRecord: function compareRecord(v) {
            return function (ra) {
              return function (rb) {
                var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value);
                var left = compare(dictOrd)(Record_Unsafe.unsafeGet(key)(ra))(Record_Unsafe.unsafeGet(key)(rb));
                var $58 = Data_Eq.notEq(Data_Ordering.eqOrdering)(left)(Data_Ordering.EQ.value);

                if ($58) {
                  return left;
                }

                ;
                return _compareRecord(dictOrdRecord)(Type_Proxy["Proxy"].value)(ra)(rb);
              };
            };
          },
          EqRecord0: function EqRecord0() {
            return Data_Eq.eqRowCons(dictOrdRecord.EqRecord0())()(dictIsSymbol)(dictOrd.Eq0());
          }
        };
      };
    };
  };
};

var clamp = function clamp(dictOrd) {
  return function (low) {
    return function (hi) {
      return function (x) {
        return min(dictOrd)(hi)(max(dictOrd)(low)(x));
      };
    };
  };
};

var between = function between(dictOrd) {
  return function (low) {
    return function (hi) {
      return function (x) {
        if (lessThan(dictOrd)(x)(low)) {
          return false;
        }

        ;

        if (greaterThan(dictOrd)(x)(hi)) {
          return false;
        }

        ;
        return true;
      };
    };
  };
};

var abs = function abs(dictOrd) {
  return function (dictRing) {
    return function (x) {
      var $62 = greaterThanOrEq(dictOrd)(x)(Data_Semiring.zero(dictRing.Semiring0()));

      if ($62) {
        return x;
      }

      ;
      return Data_Ring.negate(dictRing)(x);
    };
  };
};

module.exports = {
  compare: compare,
  compare1: compare1,
  lessThan: lessThan,
  lessThanOrEq: lessThanOrEq,
  greaterThan: greaterThan,
  greaterThanOrEq: greaterThanOrEq,
  comparing: comparing,
  min: min,
  max: max,
  clamp: clamp,
  between: between,
  abs: abs,
  signum: signum,
  compareRecord: _compareRecord,
  ordBoolean: ordBoolean,
  ordInt: ordInt,
  ordNumber: ordNumber,
  ordString: ordString,
  ordChar: ordChar,
  ordUnit: ordUnit,
  ordVoid: ordVoid,
  ordProxy: ordProxy,
  ordProxy2: ordProxy2,
  ordProxy3: ordProxy3,
  ordArray: ordArray,
  ordOrdering: ordOrdering,
  ord1Array: ord1Array,
  ordRecordNil: ordRecordNil,
  ordRecordCons: ordRecordCons,
  ordRecord: ordRecord,
  EQ: Data_Ordering.EQ,
  GT: Data_Ordering.GT,
  LT: Data_Ordering.LT
};
},{"./foreign.js":"output/Data.Ord/foreign.js","../Data.Eq/index.js":"output/Data.Eq/index.js","../Data.Ordering/index.js":"output/Data.Ordering/index.js","../Data.Ring/index.js":"output/Data.Ring/index.js","../Data.Semiring/index.js":"output/Data.Semiring/index.js","../Data.Symbol/index.js":"output/Data.Symbol/index.js","../Record.Unsafe/index.js":"output/Record.Unsafe/index.js","../Type.Proxy/index.js":"output/Type.Proxy/index.js"}],"output/Data.Bounded/index.js":[function(require,module,exports) {
// Generated by purs version 0.14.5
"use strict";

var $foreign = require("./foreign.js");

var Data_Ord = require("../Data.Ord/index.js");

var Data_Ordering = require("../Data.Ordering/index.js");

var Data_Symbol = require("../Data.Symbol/index.js");

var Data_Unit = require("../Data.Unit/index.js");

var Record_Unsafe = require("../Record.Unsafe/index.js");

var Type_Proxy = require("../Type.Proxy/index.js");

var _topRecord = function topRecord(dict) {
  return dict.topRecord;
};

var top = function top(dict) {
  return dict.top;
};

var boundedUnit = {
  top: Data_Unit.unit,
  bottom: Data_Unit.unit,
  Ord0: function Ord0() {
    return Data_Ord.ordUnit;
  }
};
var boundedRecordNil = {
  topRecord: function topRecord(v) {
    return function (v1) {
      return {};
    };
  },
  bottomRecord: function bottomRecord(v) {
    return function (v1) {
      return {};
    };
  },
  OrdRecord0: function OrdRecord0() {
    return Data_Ord.ordRecordNil;
  }
};
var boundedProxy3 = {
  bottom: Type_Proxy.Proxy3.value,
  top: Type_Proxy.Proxy3.value,
  Ord0: function Ord0() {
    return Data_Ord.ordProxy3;
  }
};
var boundedProxy2 = {
  bottom: Type_Proxy.Proxy2.value,
  top: Type_Proxy.Proxy2.value,
  Ord0: function Ord0() {
    return Data_Ord.ordProxy2;
  }
};
var boundedProxy = {
  bottom: Type_Proxy["Proxy"].value,
  top: Type_Proxy["Proxy"].value,
  Ord0: function Ord0() {
    return Data_Ord.ordProxy;
  }
};
var boundedOrdering = {
  top: Data_Ordering.GT.value,
  bottom: Data_Ordering.LT.value,
  Ord0: function Ord0() {
    return Data_Ord.ordOrdering;
  }
};
var boundedNumber = {
  top: $foreign.topNumber,
  bottom: $foreign.bottomNumber,
  Ord0: function Ord0() {
    return Data_Ord.ordNumber;
  }
};
var boundedInt = {
  top: $foreign.topInt,
  bottom: $foreign.bottomInt,
  Ord0: function Ord0() {
    return Data_Ord.ordInt;
  }
};
var boundedChar = {
  top: $foreign.topChar,
  bottom: $foreign.bottomChar,
  Ord0: function Ord0() {
    return Data_Ord.ordChar;
  }
};
var boundedBoolean = {
  top: true,
  bottom: false,
  Ord0: function Ord0() {
    return Data_Ord.ordBoolean;
  }
};

var _bottomRecord = function bottomRecord(dict) {
  return dict.bottomRecord;
};

var boundedRecord = function boundedRecord(dictRowToList) {
  return function (dictBoundedRecord) {
    return {
      top: _topRecord(dictBoundedRecord)(Type_Proxy["Proxy"].value)(Type_Proxy["Proxy"].value),
      bottom: _bottomRecord(dictBoundedRecord)(Type_Proxy["Proxy"].value)(Type_Proxy["Proxy"].value),
      Ord0: function Ord0() {
        return Data_Ord.ordRecord()(dictBoundedRecord.OrdRecord0());
      }
    };
  };
};

var bottom = function bottom(dict) {
  return dict.bottom;
};

var boundedRecordCons = function boundedRecordCons(dictIsSymbol) {
  return function (dictBounded) {
    return function (dictCons) {
      return function (dictCons1) {
        return function (dictBoundedRecord) {
          return {
            topRecord: function topRecord(v) {
              return function (rowProxy) {
                var tail = _topRecord(dictBoundedRecord)(Type_Proxy["Proxy"].value)(rowProxy);

                var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value);
                var insert = Record_Unsafe.unsafeSet(key);
                return insert(top(dictBounded))(tail);
              };
            },
            bottomRecord: function bottomRecord(v) {
              return function (rowProxy) {
                var tail = _bottomRecord(dictBoundedRecord)(Type_Proxy["Proxy"].value)(rowProxy);

                var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value);
                var insert = Record_Unsafe.unsafeSet(key);
                return insert(bottom(dictBounded))(tail);
              };
            },
            OrdRecord0: function OrdRecord0() {
              return Data_Ord.ordRecordCons(dictBoundedRecord.OrdRecord0())()(dictIsSymbol)(dictBounded.Ord0());
            }
          };
        };
      };
    };
  };
};

module.exports = {
  bottom: bottom,
  top: top,
  bottomRecord: _bottomRecord,
  topRecord: _topRecord,
  boundedBoolean: boundedBoolean,
  boundedInt: boundedInt,
  boundedChar: boundedChar,
  boundedOrdering: boundedOrdering,
  boundedUnit: boundedUnit,
  boundedNumber: boundedNumber,
  boundedProxy: boundedProxy,
  boundedProxy2: boundedProxy2,
  boundedProxy3: boundedProxy3,
  boundedRecordNil: boundedRecordNil,
  boundedRecordCons: boundedRecordCons,
  boundedRecord: boundedRecord,
  EQ: Data_Ord.EQ,
  GT: Data_Ord.GT,
  LT: Data_Ord.LT,
  compare: Data_Ord.compare
};
},{"./foreign.js":"output/Data.Bounded/foreign.js","../Data.Ord/index.js":"output/Data.Ord/index.js","../Data.Ordering/index.js":"output/Data.Ordering/index.js","../Data.Symbol/index.js":"output/Data.Symbol/index.js","../Data.Unit/index.js":"output/Data.Unit/index.js","../Record.Unsafe/index.js":"output/Record.Unsafe/index.js","../Type.Proxy/index.js":"output/Type.Proxy/index.js"}],"output/Data.Functor.Invariant/index.js":[function(require,module,exports) {
// Generated by purs version 0.14.5
"use strict";

var Data_Functor = require("../Data.Functor/index.js");

var invariantMultiplicative = {
  imap: function imap(f) {
    return function (v) {
      return function (v1) {
        return f(v1);
      };
    };
  }
};
var invariantEndo = {
  imap: function imap(ab) {
    return function (ba) {
      return function (v) {
        return function ($37) {
          return ab(v(ba($37)));
        };
      };
    };
  }
};
var invariantDual = {
  imap: function imap(f) {
    return function (v) {
      return function (v1) {
        return f(v1);
      };
    };
  }
};
var invariantDisj = {
  imap: function imap(f) {
    return function (v) {
      return function (v1) {
        return f(v1);
      };
    };
  }
};
var invariantConj = {
  imap: function imap(f) {
    return function (v) {
      return function (v1) {
        return f(v1);
      };
    };
  }
};
var invariantAdditive = {
  imap: function imap(f) {
    return function (v) {
      return function (v1) {
        return f(v1);
      };
    };
  }
};

var imapF = function imapF(dictFunctor) {
  return function (f) {
    return function (v) {
      return Data_Functor.map(dictFunctor)(f);
    };
  };
};

var invariantArray = {
  imap: imapF(Data_Functor.functorArray)
};
var invariantFn = {
  imap: imapF(Data_Functor.functorFn)
};

var _imap = function imap(dict) {
  return dict.imap;
};

var invariantAlternate = function invariantAlternate(dictInvariant) {
  return {
    imap: function imap(f) {
      return function (g) {
        return function (v) {
          return _imap(dictInvariant)(f)(g)(v);
        };
      };
    }
  };
};

module.exports = {
  imap: _imap,
  imapF: imapF,
  invariantFn: invariantFn,
  invariantArray: invariantArray,
  invariantAdditive: invariantAdditive,
  invariantConj: invariantConj,
  invariantDisj: invariantDisj,
  invariantDual: invariantDual,
  invariantEndo: invariantEndo,
  invariantMultiplicative: invariantMultiplicative,
  invariantAlternate: invariantAlternate
};
},{"../Data.Functor/index.js":"output/Data.Functor/index.js"}],"output/Data.Show/foreign.js":[function(require,module,exports) {
"use strict";

exports.showIntImpl = function (n) {
  return n.toString();
};

exports.showNumberImpl = function (n) {
  var str = n.toString();
  return isNaN(str + ".0") ? str : str + ".0";
};

exports.showCharImpl = function (c) {
  var code = c.charCodeAt(0);

  if (code < 0x20 || code === 0x7F) {
    switch (c) {
      case "\x07":
        return "'\\a'";

      case "\b":
        return "'\\b'";

      case "\f":
        return "'\\f'";

      case "\n":
        return "'\\n'";

      case "\r":
        return "'\\r'";

      case "\t":
        return "'\\t'";

      case "\v":
        return "'\\v'";
    }

    return "'\\" + code.toString(10) + "'";
  }

  return c === "'" || c === "\\" ? "'\\" + c + "'" : "'" + c + "'";
};

exports.showStringImpl = function (s) {
  var l = s.length;
  return "\"" + s.replace(/[\0-\x1F\x7F"\\]/g, // eslint-disable-line no-control-regex
  function (c, i) {
    switch (c) {
      case "\"":
      case "\\":
        return "\\" + c;

      case "\x07":
        return "\\a";

      case "\b":
        return "\\b";

      case "\f":
        return "\\f";

      case "\n":
        return "\\n";

      case "\r":
        return "\\r";

      case "\t":
        return "\\t";

      case "\v":
        return "\\v";
    }

    var k = i + 1;
    var empty = k < l && s[k] >= "0" && s[k] <= "9" ? "\\&" : "";
    return "\\" + c.charCodeAt(0).toString(10) + empty;
  }) + "\"";
};

exports.showArrayImpl = function (f) {
  return function (xs) {
    var ss = [];

    for (var i = 0, l = xs.length; i < l; i++) {
      ss[i] = f(xs[i]);
    }

    return "[" + ss.join(",") + "]";
  };
};

exports.cons = function (head) {
  return function (tail) {
    return [head].concat(tail);
  };
};

exports.join = function (separator) {
  return function (xs) {
    return xs.join(separator);
  };
};
},{}],"output/Data.Show/index.js":[function(require,module,exports) {
// Generated by purs version 0.14.5
"use strict";

var $foreign = require("./foreign.js");

var Data_Symbol = require("../Data.Symbol/index.js");

var Record_Unsafe = require("../Record.Unsafe/index.js");

var Type_Proxy = require("../Type.Proxy/index.js");

var showString = {
  show: $foreign.showStringImpl
};
var showRecordFieldsNil = {
  showRecordFields: function showRecordFields(v) {
    return function (v1) {
      return [];
    };
  }
};

var _showRecordFields = function showRecordFields(dict) {
  return dict.showRecordFields;
};

var showRecord = function showRecord(dictRowToList) {
  return function (dictShowRecordFields) {
    return {
      show: function show(record) {
        var v = _showRecordFields(dictShowRecordFields)(Type_Proxy["Proxy"].value)(record);

        if (v.length === 0) {
          return "{}";
        }

        ;
        return $foreign.join(" ")(["{", $foreign.join(", ")(v), "}"]);
      }
    };
  };
};

var showProxy3 = {
  show: function show(v) {
    return "Proxy3";
  }
};
var showProxy2 = {
  show: function show(v) {
    return "Proxy2";
  }
};
var showProxy = {
  show: function show(v) {
    return "Proxy";
  }
};
var showNumber = {
  show: $foreign.showNumberImpl
};
var showInt = {
  show: $foreign.showIntImpl
};
var showChar = {
  show: $foreign.showCharImpl
};
var showBoolean = {
  show: function show(v) {
    if (v) {
      return "true";
    }

    ;

    if (!v) {
      return "false";
    }

    ;
    throw new Error("Failed pattern match at Data.Show (line 20, column 1 - line 22, column 23): " + [v.constructor.name]);
  }
};

var show = function show(dict) {
  return dict.show;
};

var showArray = function showArray(dictShow) {
  return {
    show: $foreign.showArrayImpl(show(dictShow))
  };
};

var showRecordFieldsCons = function showRecordFieldsCons(dictIsSymbol) {
  return function (dictShowRecordFields) {
    return function (dictShow) {
      return {
        showRecordFields: function showRecordFields(v) {
          return function (record) {
            var tail = _showRecordFields(dictShowRecordFields)(Type_Proxy["Proxy"].value)(record);

            var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value);
            var focus = Record_Unsafe.unsafeGet(key)(record);
            return $foreign.cons($foreign.join(": ")([key, show(dictShow)(focus)]))(tail);
          };
        }
      };
    };
  };
};

module.exports = {
  show: show,
  showRecordFields: _showRecordFields,
  showBoolean: showBoolean,
  showInt: showInt,
  showNumber: showNumber,
  showChar: showChar,
  showString: showString,
  showArray: showArray,
  showProxy: showProxy,
  showProxy2: showProxy2,
  showProxy3: showProxy3,
  showRecord: showRecord,
  showRecordFieldsNil: showRecordFieldsNil,
  showRecordFieldsCons: showRecordFieldsCons
};
},{"./foreign.js":"output/Data.Show/foreign.js","../Data.Symbol/index.js":"output/Data.Symbol/index.js","../Record.Unsafe/index.js":"output/Record.Unsafe/index.js","../Type.Proxy/index.js":"output/Type.Proxy/index.js"}],"output/Data.Generic.Rep/index.js":[function(require,module,exports) {
// Generated by purs version 0.14.5
"use strict";

var Data_Show = require("../Data.Show/index.js");

var Data_Symbol = require("../Data.Symbol/index.js");

var Type_Proxy = require("../Type.Proxy/index.js");

var Inl = function () {
  function Inl(value0) {
    this.value0 = value0;
  }

  ;

  Inl.create = function (value0) {
    return new Inl(value0);
  };

  return Inl;
}();

var Inr = function () {
  function Inr(value0) {
    this.value0 = value0;
  }

  ;

  Inr.create = function (value0) {
    return new Inr(value0);
  };

  return Inr;
}();

var Product = function () {
  function Product(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
  }

  ;

  Product.create = function (value0) {
    return function (value1) {
      return new Product(value0, value1);
    };
  };

  return Product;
}();

var NoArguments = function () {
  function NoArguments() {}

  ;
  NoArguments.value = new NoArguments();
  return NoArguments;
}();

var Constructor = function Constructor(x) {
  return x;
};

var Argument = function Argument(x) {
  return x;
};

var to = function to(dict) {
  return dict.to;
};

var showSum = function showSum(dictShow) {
  return function (dictShow1) {
    return {
      show: function show(v) {
        if (v instanceof Inl) {
          return "(Inl " + (Data_Show.show(dictShow)(v.value0) + ")");
        }

        ;

        if (v instanceof Inr) {
          return "(Inr " + (Data_Show.show(dictShow1)(v.value0) + ")");
        }

        ;
        throw new Error("Failed pattern match at Data.Generic.Rep (line 31, column 1 - line 33, column 42): " + [v.constructor.name]);
      }
    };
  };
};

var showProduct = function showProduct(dictShow) {
  return function (dictShow1) {
    return {
      show: function show(v) {
        return "(Product " + (Data_Show.show(dictShow)(v.value0) + (" " + (Data_Show.show(dictShow1)(v.value1) + ")")));
      }
    };
  };
};

var showNoArguments = {
  show: function show(v) {
    return "NoArguments";
  }
};

var showConstructor = function showConstructor(dictIsSymbol) {
  return function (dictShow) {
    return {
      show: function show(v) {
        return "(Constructor @" + (Data_Show.show(Data_Show.showString)(Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value)) + (" " + (Data_Show.show(dictShow)(v) + ")")));
      }
    };
  };
};

var showArgument = function showArgument(dictShow) {
  return {
    show: function show(v) {
      return "(Argument " + (Data_Show.show(dictShow)(v) + ")");
    }
  };
};

var repOf = function repOf(dictGeneric) {
  return function (v) {
    return Type_Proxy["Proxy"].value;
  };
};

var from = function from(dict) {
  return dict.from;
};

module.exports = {
  to: to,
  from: from,
  repOf: repOf,
  NoArguments: NoArguments,
  Inl: Inl,
  Inr: Inr,
  Product: Product,
  Constructor: Constructor,
  Argument: Argument,
  showNoArguments: showNoArguments,
  showSum: showSum,
  showProduct: showProduct,
  showConstructor: showConstructor,
  showArgument: showArgument
};
},{"../Data.Show/index.js":"output/Data.Show/index.js","../Data.Symbol/index.js":"output/Data.Symbol/index.js","../Type.Proxy/index.js":"output/Type.Proxy/index.js"}],"output/Data.Maybe/index.js":[function(require,module,exports) {
// Generated by purs version 0.14.5
"use strict";

var Control_Alt = require("../Control.Alt/index.js");

var Control_Applicative = require("../Control.Applicative/index.js");

var Control_Category = require("../Control.Category/index.js");

var Data_Bounded = require("../Data.Bounded/index.js");

var Data_Eq = require("../Data.Eq/index.js");

var Data_Function = require("../Data.Function/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_Functor_Invariant = require("../Data.Functor.Invariant/index.js");

var Data_Generic_Rep = require("../Data.Generic.Rep/index.js");

var Data_Ord = require("../Data.Ord/index.js");

var Data_Ordering = require("../Data.Ordering/index.js");

var Data_Semigroup = require("../Data.Semigroup/index.js");

var Data_Show = require("../Data.Show/index.js");

var Data_Unit = require("../Data.Unit/index.js");

var Nothing = function () {
  function Nothing() {}

  ;
  Nothing.value = new Nothing();
  return Nothing;
}();

var Just = function () {
  function Just(value0) {
    this.value0 = value0;
  }

  ;

  Just.create = function (value0) {
    return new Just(value0);
  };

  return Just;
}();

var showMaybe = function showMaybe(dictShow) {
  return {
    show: function show(v) {
      if (v instanceof Just) {
        return "(Just " + (Data_Show.show(dictShow)(v.value0) + ")");
      }

      ;

      if (v instanceof Nothing) {
        return "Nothing";
      }

      ;
      throw new Error("Failed pattern match at Data.Maybe (line 216, column 1 - line 218, column 28): " + [v.constructor.name]);
    }
  };
};

var semigroupMaybe = function semigroupMaybe(dictSemigroup) {
  return {
    append: function append(v) {
      return function (v1) {
        if (v instanceof Nothing) {
          return v1;
        }

        ;

        if (v1 instanceof Nothing) {
          return v;
        }

        ;

        if (v instanceof Just && v1 instanceof Just) {
          return new Just(Data_Semigroup.append(dictSemigroup)(v.value0)(v1.value0));
        }

        ;
        throw new Error("Failed pattern match at Data.Maybe (line 185, column 1 - line 188, column 43): " + [v.constructor.name, v1.constructor.name]);
      };
    }
  };
};

var optional = function optional(dictAlt) {
  return function (dictApplicative) {
    return function (a) {
      return Control_Alt.alt(dictAlt)(Data_Functor.map(dictAlt.Functor0())(Just.create)(a))(Control_Applicative.pure(dictApplicative)(Nothing.value));
    };
  };
};

var monoidMaybe = function monoidMaybe(dictSemigroup) {
  return {
    mempty: Nothing.value,
    Semigroup0: function Semigroup0() {
      return semigroupMaybe(dictSemigroup);
    }
  };
};

var maybe$prime = function maybe$prime(v) {
  return function (v1) {
    return function (v2) {
      if (v2 instanceof Nothing) {
        return v(Data_Unit.unit);
      }

      ;

      if (v2 instanceof Just) {
        return v1(v2.value0);
      }

      ;
      throw new Error("Failed pattern match at Data.Maybe (line 243, column 1 - line 243, column 62): " + [v.constructor.name, v1.constructor.name, v2.constructor.name]);
    };
  };
};

var maybe = function maybe(v) {
  return function (v1) {
    return function (v2) {
      if (v2 instanceof Nothing) {
        return v;
      }

      ;

      if (v2 instanceof Just) {
        return v1(v2.value0);
      }

      ;
      throw new Error("Failed pattern match at Data.Maybe (line 230, column 1 - line 230, column 51): " + [v.constructor.name, v1.constructor.name, v2.constructor.name]);
    };
  };
};

var isNothing = maybe(true)(Data_Function["const"](false));
var isJust = maybe(false)(Data_Function["const"](true));
var genericMaybe = {
  to: function to(x) {
    if (x instanceof Data_Generic_Rep.Inl) {
      return Nothing.value;
    }

    ;

    if (x instanceof Data_Generic_Rep.Inr) {
      return new Just(x.value0);
    }

    ;
    throw new Error("Failed pattern match at Data.Maybe (line 220, column 1 - line 220, column 52): " + [x.constructor.name]);
  },
  from: function from(x) {
    if (x instanceof Nothing) {
      return new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value);
    }

    ;

    if (x instanceof Just) {
      return new Data_Generic_Rep.Inr(x.value0);
    }

    ;
    throw new Error("Failed pattern match at Data.Maybe (line 220, column 1 - line 220, column 52): " + [x.constructor.name]);
  }
};
var functorMaybe = {
  map: function map(v) {
    return function (v1) {
      if (v1 instanceof Just) {
        return new Just(v(v1.value0));
      }

      ;
      return Nothing.value;
    };
  }
};
var invariantMaybe = {
  imap: Data_Functor_Invariant.imapF(functorMaybe)
};

var fromMaybe$prime = function fromMaybe$prime(a) {
  return maybe$prime(a)(Control_Category.identity(Control_Category.categoryFn));
};

var fromMaybe = function fromMaybe(a) {
  return maybe(a)(Control_Category.identity(Control_Category.categoryFn));
};

var fromJust = function fromJust(dictPartial) {
  return function (v) {
    if (v instanceof Just) {
      return v.value0;
    }

    ;
    throw new Error("Failed pattern match at Data.Maybe (line 281, column 1 - line 281, column 46): " + [v.constructor.name]);
  };
};

var extendMaybe = {
  extend: function extend(v) {
    return function (v1) {
      if (v1 instanceof Nothing) {
        return Nothing.value;
      }

      ;
      return new Just(v(v1));
    };
  },
  Functor0: function Functor0() {
    return functorMaybe;
  }
};

var eqMaybe = function eqMaybe(dictEq) {
  return {
    eq: function eq(x) {
      return function (y) {
        if (x instanceof Nothing && y instanceof Nothing) {
          return true;
        }

        ;

        if (x instanceof Just && y instanceof Just) {
          return Data_Eq.eq(dictEq)(x.value0)(y.value0);
        }

        ;
        return false;
      };
    }
  };
};

var ordMaybe = function ordMaybe(dictOrd) {
  return {
    compare: function compare(x) {
      return function (y) {
        if (x instanceof Nothing && y instanceof Nothing) {
          return Data_Ordering.EQ.value;
        }

        ;

        if (x instanceof Nothing) {
          return Data_Ordering.LT.value;
        }

        ;

        if (y instanceof Nothing) {
          return Data_Ordering.GT.value;
        }

        ;

        if (x instanceof Just && y instanceof Just) {
          return Data_Ord.compare(dictOrd)(x.value0)(y.value0);
        }

        ;
        throw new Error("Failed pattern match at Data.Maybe (line 205, column 1 - line 205, column 51): " + [x.constructor.name, y.constructor.name]);
      };
    },
    Eq0: function Eq0() {
      return eqMaybe(dictOrd.Eq0());
    }
  };
};

var eq1Maybe = {
  eq1: function eq1(dictEq) {
    return Data_Eq.eq(eqMaybe(dictEq));
  }
};
var ord1Maybe = {
  compare1: function compare1(dictOrd) {
    return Data_Ord.compare(ordMaybe(dictOrd));
  },
  Eq10: function Eq10() {
    return eq1Maybe;
  }
};

var boundedMaybe = function boundedMaybe(dictBounded) {
  return {
    top: new Just(Data_Bounded.top(dictBounded)),
    bottom: Nothing.value,
    Ord0: function Ord0() {
      return ordMaybe(dictBounded.Ord0());
    }
  };
};

var applyMaybe = {
  apply: function apply(v) {
    return function (v1) {
      if (v instanceof Just) {
        return Data_Functor.map(functorMaybe)(v.value0)(v1);
      }

      ;

      if (v instanceof Nothing) {
        return Nothing.value;
      }

      ;
      throw new Error("Failed pattern match at Data.Maybe (line 68, column 1 - line 70, column 30): " + [v.constructor.name, v1.constructor.name]);
    };
  },
  Functor0: function Functor0() {
    return functorMaybe;
  }
};
var bindMaybe = {
  bind: function bind(v) {
    return function (v1) {
      if (v instanceof Just) {
        return v1(v.value0);
      }

      ;

      if (v instanceof Nothing) {
        return Nothing.value;
      }

      ;
      throw new Error("Failed pattern match at Data.Maybe (line 126, column 1 - line 128, column 28): " + [v.constructor.name, v1.constructor.name]);
    };
  },
  Apply0: function Apply0() {
    return applyMaybe;
  }
};
var applicativeMaybe = {
  pure: Just.create,
  Apply0: function Apply0() {
    return applyMaybe;
  }
};
var monadMaybe = {
  Applicative0: function Applicative0() {
    return applicativeMaybe;
  },
  Bind1: function Bind1() {
    return bindMaybe;
  }
};
var altMaybe = {
  alt: function alt(v) {
    return function (v1) {
      if (v instanceof Nothing) {
        return v1;
      }

      ;
      return v;
    };
  },
  Functor0: function Functor0() {
    return functorMaybe;
  }
};
var plusMaybe = {
  empty: Nothing.value,
  Alt0: function Alt0() {
    return altMaybe;
  }
};
var alternativeMaybe = {
  Applicative0: function Applicative0() {
    return applicativeMaybe;
  },
  Plus1: function Plus1() {
    return plusMaybe;
  }
};
var monadZeroMaybe = {
  Monad0: function Monad0() {
    return monadMaybe;
  },
  Alternative1: function Alternative1() {
    return alternativeMaybe;
  },
  MonadZeroIsDeprecated2: function MonadZeroIsDeprecated2() {
    return undefined;
  }
};
module.exports = {
  Nothing: Nothing,
  Just: Just,
  maybe: maybe,
  "maybe'": maybe$prime,
  fromMaybe: fromMaybe,
  "fromMaybe'": fromMaybe$prime,
  isJust: isJust,
  isNothing: isNothing,
  fromJust: fromJust,
  optional: optional,
  functorMaybe: functorMaybe,
  applyMaybe: applyMaybe,
  applicativeMaybe: applicativeMaybe,
  altMaybe: altMaybe,
  plusMaybe: plusMaybe,
  alternativeMaybe: alternativeMaybe,
  bindMaybe: bindMaybe,
  monadMaybe: monadMaybe,
  monadZeroMaybe: monadZeroMaybe,
  extendMaybe: extendMaybe,
  invariantMaybe: invariantMaybe,
  semigroupMaybe: semigroupMaybe,
  monoidMaybe: monoidMaybe,
  eqMaybe: eqMaybe,
  eq1Maybe: eq1Maybe,
  ordMaybe: ordMaybe,
  ord1Maybe: ord1Maybe,
  boundedMaybe: boundedMaybe,
  showMaybe: showMaybe,
  genericMaybe: genericMaybe
};
},{"../Control.Alt/index.js":"output/Control.Alt/index.js","../Control.Applicative/index.js":"output/Control.Applicative/index.js","../Control.Category/index.js":"output/Control.Category/index.js","../Data.Bounded/index.js":"output/Data.Bounded/index.js","../Data.Eq/index.js":"output/Data.Eq/index.js","../Data.Function/index.js":"output/Data.Function/index.js","../Data.Functor/index.js":"output/Data.Functor/index.js","../Data.Functor.Invariant/index.js":"output/Data.Functor.Invariant/index.js","../Data.Generic.Rep/index.js":"output/Data.Generic.Rep/index.js","../Data.Ord/index.js":"output/Data.Ord/index.js","../Data.Ordering/index.js":"output/Data.Ordering/index.js","../Data.Semigroup/index.js":"output/Data.Semigroup/index.js","../Data.Show/index.js":"output/Data.Show/index.js","../Data.Unit/index.js":"output/Data.Unit/index.js"}],"output/Effect/foreign.js":[function(require,module,exports) {
"use strict";

exports.pureE = function (a) {
  return function () {
    return a;
  };
};

exports.bindE = function (a) {
  return function (f) {
    return function () {
      return f(a())();
    };
  };
};

exports.untilE = function (f) {
  return function () {
    while (!f()) {
      ;
    }
  };
};

exports.whileE = function (f) {
  return function (a) {
    return function () {
      while (f()) {
        a();
      }
    };
  };
};

exports.forE = function (lo) {
  return function (hi) {
    return function (f) {
      return function () {
        for (var i = lo; i < hi; i++) {
          f(i)();
        }
      };
    };
  };
};

exports.foreachE = function (as) {
  return function (f) {
    return function () {
      for (var i = 0, l = as.length; i < l; i++) {
        f(as[i])();
      }
    };
  };
};
},{}],"output/Control.Bind/foreign.js":[function(require,module,exports) {
"use strict";

exports.arrayBind = function (arr) {
  return function (f) {
    var result = [];

    for (var i = 0, l = arr.length; i < l; i++) {
      Array.prototype.push.apply(result, f(arr[i]));
    }

    return result;
  };
};
},{}],"output/Control.Bind/index.js":[function(require,module,exports) {
// Generated by purs version 0.14.5
"use strict";

var $foreign = require("./foreign.js");

var Control_Applicative = require("../Control.Applicative/index.js");

var Control_Apply = require("../Control.Apply/index.js");

var Control_Category = require("../Control.Category/index.js");

var Data_Function = require("../Data.Function/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Type_Proxy = require("../Type.Proxy/index.js");

var discard = function discard(dict) {
  return dict.discard;
};

var bindProxy = {
  bind: function bind(v) {
    return function (v1) {
      return Type_Proxy["Proxy"].value;
    };
  },
  Apply0: function Apply0() {
    return Control_Apply.applyProxy;
  }
};
var bindFn = {
  bind: function bind(m) {
    return function (f) {
      return function (x) {
        return f(m(x))(x);
      };
    };
  },
  Apply0: function Apply0() {
    return Control_Apply.applyFn;
  }
};
var bindArray = {
  bind: $foreign.arrayBind,
  Apply0: function Apply0() {
    return Control_Apply.applyArray;
  }
};

var bind = function bind(dict) {
  return dict.bind;
};

var bindFlipped = function bindFlipped(dictBind) {
  return Data_Function.flip(bind(dictBind));
};

var composeKleisliFlipped = function composeKleisliFlipped(dictBind) {
  return function (f) {
    return function (g) {
      return function (a) {
        return bindFlipped(dictBind)(f)(g(a));
      };
    };
  };
};

var composeKleisli = function composeKleisli(dictBind) {
  return function (f) {
    return function (g) {
      return function (a) {
        return bind(dictBind)(f(a))(g);
      };
    };
  };
};

var discardProxy = {
  discard: function discard(dictBind) {
    return bind(dictBind);
  }
};
var discardProxy2 = {
  discard: function discard(dictBind) {
    return bind(dictBind);
  }
};
var discardProxy3 = {
  discard: function discard(dictBind) {
    return bind(dictBind);
  }
};
var discardUnit = {
  discard: function discard(dictBind) {
    return bind(dictBind);
  }
};

var ifM = function ifM(dictBind) {
  return function (cond) {
    return function (t) {
      return function (f) {
        return bind(dictBind)(cond)(function (cond$prime) {
          if (cond$prime) {
            return t;
          }

          ;
          return f;
        });
      };
    };
  };
};

var join = function join(dictBind) {
  return function (m) {
    return bind(dictBind)(m)(Control_Category.identity(Control_Category.categoryFn));
  };
};

module.exports = {
  bind: bind,
  bindFlipped: bindFlipped,
  discard: discard,
  join: join,
  composeKleisli: composeKleisli,
  composeKleisliFlipped: composeKleisliFlipped,
  ifM: ifM,
  bindFn: bindFn,
  bindArray: bindArray,
  bindProxy: bindProxy,
  discardUnit: discardUnit,
  discardProxy: discardProxy,
  discardProxy2: discardProxy2,
  discardProxy3: discardProxy3,
  liftA1: Control_Applicative.liftA1,
  pure: Control_Applicative.pure,
  unless: Control_Applicative.unless,
  when: Control_Applicative.when,
  apply: Control_Apply.apply,
  map: Data_Functor.map,
  "void": Data_Functor["void"]
};
},{"./foreign.js":"output/Control.Bind/foreign.js","../Control.Applicative/index.js":"output/Control.Applicative/index.js","../Control.Apply/index.js":"output/Control.Apply/index.js","../Control.Category/index.js":"output/Control.Category/index.js","../Data.Function/index.js":"output/Data.Function/index.js","../Data.Functor/index.js":"output/Data.Functor/index.js","../Type.Proxy/index.js":"output/Type.Proxy/index.js"}],"output/Control.Monad/index.js":[function(require,module,exports) {
// Generated by purs version 0.14.5
"use strict";

var Control_Applicative = require("../Control.Applicative/index.js");

var Control_Apply = require("../Control.Apply/index.js");

var Control_Bind = require("../Control.Bind/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var whenM = function whenM(dictMonad) {
  return function (mb) {
    return function (m) {
      return Control_Bind.bind(dictMonad.Bind1())(mb)(function (b) {
        return Control_Applicative.when(dictMonad.Applicative0())(b)(m);
      });
    };
  };
};

var unlessM = function unlessM(dictMonad) {
  return function (mb) {
    return function (m) {
      return Control_Bind.bind(dictMonad.Bind1())(mb)(function (b) {
        return Control_Applicative.unless(dictMonad.Applicative0())(b)(m);
      });
    };
  };
};

var monadProxy = {
  Applicative0: function Applicative0() {
    return Control_Applicative.applicativeProxy;
  },
  Bind1: function Bind1() {
    return Control_Bind.bindProxy;
  }
};
var monadFn = {
  Applicative0: function Applicative0() {
    return Control_Applicative.applicativeFn;
  },
  Bind1: function Bind1() {
    return Control_Bind.bindFn;
  }
};
var monadArray = {
  Applicative0: function Applicative0() {
    return Control_Applicative.applicativeArray;
  },
  Bind1: function Bind1() {
    return Control_Bind.bindArray;
  }
};

var liftM1 = function liftM1(dictMonad) {
  return function (f) {
    return function (a) {
      return Control_Bind.bind(dictMonad.Bind1())(a)(function (a$prime) {
        return Control_Applicative.pure(dictMonad.Applicative0())(f(a$prime));
      });
    };
  };
};

var ap = function ap(dictMonad) {
  return function (f) {
    return function (a) {
      return Control_Bind.bind(dictMonad.Bind1())(f)(function (f$prime) {
        return Control_Bind.bind(dictMonad.Bind1())(a)(function (a$prime) {
          return Control_Applicative.pure(dictMonad.Applicative0())(f$prime(a$prime));
        });
      });
    };
  };
};

module.exports = {
  liftM1: liftM1,
  whenM: whenM,
  unlessM: unlessM,
  ap: ap,
  monadFn: monadFn,
  monadArray: monadArray,
  monadProxy: monadProxy,
  liftA1: Control_Applicative.liftA1,
  pure: Control_Applicative.pure,
  unless: Control_Applicative.unless,
  when: Control_Applicative.when,
  apply: Control_Apply.apply,
  bind: Control_Bind.bind,
  ifM: Control_Bind.ifM,
  join: Control_Bind.join,
  map: Data_Functor.map,
  "void": Data_Functor["void"]
};
},{"../Control.Applicative/index.js":"output/Control.Applicative/index.js","../Control.Apply/index.js":"output/Control.Apply/index.js","../Control.Bind/index.js":"output/Control.Bind/index.js","../Data.Functor/index.js":"output/Data.Functor/index.js"}],"output/Data.EuclideanRing/foreign.js":[function(require,module,exports) {
"use strict";

exports.intDegree = function (x) {
  return Math.min(Math.abs(x), 2147483647);
}; // See the Euclidean definition in
// https://en.m.wikipedia.org/wiki/Modulo_operation.


exports.intDiv = function (x) {
  return function (y) {
    if (y === 0) return 0;
    return y > 0 ? Math.floor(x / y) : -Math.floor(x / -y);
  };
};

exports.intMod = function (x) {
  return function (y) {
    if (y === 0) return 0;
    var yy = Math.abs(y);
    return (x % yy + yy) % yy;
  };
};

exports.numDiv = function (n1) {
  return function (n2) {
    return n1 / n2;
  };
};
},{}],"output/Data.CommutativeRing/index.js":[function(require,module,exports) {
// Generated by purs version 0.14.5
"use strict";

var Data_Ring = require("../Data.Ring/index.js");

var Data_Semiring = require("../Data.Semiring/index.js");

var commutativeRingUnit = {
  Ring0: function Ring0() {
    return Data_Ring.ringUnit;
  }
};
var commutativeRingRecordNil = {
  RingRecord0: function RingRecord0() {
    return Data_Ring.ringRecordNil;
  }
};

var commutativeRingRecordCons = function commutativeRingRecordCons(dictIsSymbol) {
  return function (dictCons) {
    return function (dictCommutativeRingRecord) {
      return function (dictCommutativeRing) {
        return {
          RingRecord0: function RingRecord0() {
            return Data_Ring.ringRecordCons(dictIsSymbol)()(dictCommutativeRingRecord.RingRecord0())(dictCommutativeRing.Ring0());
          }
        };
      };
    };
  };
};

var commutativeRingRecord = function commutativeRingRecord(dictRowToList) {
  return function (dictCommutativeRingRecord) {
    return {
      Ring0: function Ring0() {
        return Data_Ring.ringRecord()(dictCommutativeRingRecord.RingRecord0());
      }
    };
  };
};

var commutativeRingProxy3 = {
  Ring0: function Ring0() {
    return Data_Ring.ringProxy3;
  }
};
var commutativeRingProxy2 = {
  Ring0: function Ring0() {
    return Data_Ring.ringProxy2;
  }
};
var commutativeRingProxy = {
  Ring0: function Ring0() {
    return Data_Ring.ringProxy;
  }
};
var commutativeRingNumber = {
  Ring0: function Ring0() {
    return Data_Ring.ringNumber;
  }
};
var commutativeRingInt = {
  Ring0: function Ring0() {
    return Data_Ring.ringInt;
  }
};

var commutativeRingFn = function commutativeRingFn(dictCommutativeRing) {
  return {
    Ring0: function Ring0() {
      return Data_Ring.ringFn(dictCommutativeRing.Ring0());
    }
  };
};

module.exports = {
  commutativeRingInt: commutativeRingInt,
  commutativeRingNumber: commutativeRingNumber,
  commutativeRingUnit: commutativeRingUnit,
  commutativeRingFn: commutativeRingFn,
  commutativeRingRecord: commutativeRingRecord,
  commutativeRingProxy: commutativeRingProxy,
  commutativeRingProxy2: commutativeRingProxy2,
  commutativeRingProxy3: commutativeRingProxy3,
  commutativeRingRecordNil: commutativeRingRecordNil,
  commutativeRingRecordCons: commutativeRingRecordCons,
  add: Data_Semiring.add,
  mul: Data_Semiring.mul,
  one: Data_Semiring.one,
  zero: Data_Semiring.zero
};
},{"../Data.Ring/index.js":"output/Data.Ring/index.js","../Data.Semiring/index.js":"output/Data.Semiring/index.js"}],"output/Data.EuclideanRing/index.js":[function(require,module,exports) {
// Generated by purs version 0.14.5
"use strict";

var $foreign = require("./foreign.js");

var Data_CommutativeRing = require("../Data.CommutativeRing/index.js");

var Data_Eq = require("../Data.Eq/index.js");

var Data_Ring = require("../Data.Ring/index.js");

var Data_Semiring = require("../Data.Semiring/index.js");

var mod = function mod(dict) {
  return dict.mod;
};

var gcd = function gcd($copy_dictEq) {
  return function ($copy_dictEuclideanRing) {
    return function ($copy_a) {
      return function ($copy_b) {
        var $tco_var_dictEq = $copy_dictEq;
        var $tco_var_dictEuclideanRing = $copy_dictEuclideanRing;
        var $tco_var_a = $copy_a;
        var $tco_done = false;
        var $tco_result;

        function $tco_loop(dictEq, dictEuclideanRing, a, b) {
          var $8 = Data_Eq.eq(dictEq)(b)(Data_Semiring.zero(dictEuclideanRing.CommutativeRing0().Ring0().Semiring0()));

          if ($8) {
            $tco_done = true;
            return a;
          }

          ;
          $tco_var_dictEq = dictEq;
          $tco_var_dictEuclideanRing = dictEuclideanRing;
          $tco_var_a = b;
          $copy_b = mod(dictEuclideanRing)(a)(b);
          return;
        }

        ;

        while (!$tco_done) {
          $tco_result = $tco_loop($tco_var_dictEq, $tco_var_dictEuclideanRing, $tco_var_a, $copy_b);
        }

        ;
        return $tco_result;
      };
    };
  };
};

var euclideanRingNumber = {
  degree: function degree(v) {
    return 1;
  },
  div: $foreign.numDiv,
  mod: function mod(v) {
    return function (v1) {
      return 0.0;
    };
  },
  CommutativeRing0: function CommutativeRing0() {
    return Data_CommutativeRing.commutativeRingNumber;
  }
};
var euclideanRingInt = {
  degree: $foreign.intDegree,
  div: $foreign.intDiv,
  mod: $foreign.intMod,
  CommutativeRing0: function CommutativeRing0() {
    return Data_CommutativeRing.commutativeRingInt;
  }
};

var div = function div(dict) {
  return dict.div;
};

var lcm = function lcm(dictEq) {
  return function (dictEuclideanRing) {
    return function (a) {
      return function (b) {
        var $10 = Data_Eq.eq(dictEq)(a)(Data_Semiring.zero(dictEuclideanRing.CommutativeRing0().Ring0().Semiring0())) || Data_Eq.eq(dictEq)(b)(Data_Semiring.zero(dictEuclideanRing.CommutativeRing0().Ring0().Semiring0()));

        if ($10) {
          return Data_Semiring.zero(dictEuclideanRing.CommutativeRing0().Ring0().Semiring0());
        }

        ;
        return div(dictEuclideanRing)(Data_Semiring.mul(dictEuclideanRing.CommutativeRing0().Ring0().Semiring0())(a)(b))(gcd(dictEq)(dictEuclideanRing)(a)(b));
      };
    };
  };
};

var degree = function degree(dict) {
  return dict.degree;
};

module.exports = {
  degree: degree,
  div: div,
  mod: mod,
  gcd: gcd,
  lcm: lcm,
  euclideanRingInt: euclideanRingInt,
  euclideanRingNumber: euclideanRingNumber,
  sub: Data_Ring.sub,
  add: Data_Semiring.add,
  mul: Data_Semiring.mul,
  one: Data_Semiring.one,
  zero: Data_Semiring.zero
};
},{"./foreign.js":"output/Data.EuclideanRing/foreign.js","../Data.CommutativeRing/index.js":"output/Data.CommutativeRing/index.js","../Data.Eq/index.js":"output/Data.Eq/index.js","../Data.Ring/index.js":"output/Data.Ring/index.js","../Data.Semiring/index.js":"output/Data.Semiring/index.js"}],"output/Data.Monoid/index.js":[function(require,module,exports) {
// Generated by purs version 0.14.5
"use strict";

var Data_Boolean = require("../Data.Boolean/index.js");

var Data_EuclideanRing = require("../Data.EuclideanRing/index.js");

var Data_Ordering = require("../Data.Ordering/index.js");

var Data_Semigroup = require("../Data.Semigroup/index.js");

var Data_Symbol = require("../Data.Symbol/index.js");

var Data_Unit = require("../Data.Unit/index.js");

var Record_Unsafe = require("../Record.Unsafe/index.js");

var Type_Proxy = require("../Type.Proxy/index.js");

var monoidUnit = {
  mempty: Data_Unit.unit,
  Semigroup0: function Semigroup0() {
    return Data_Semigroup.semigroupUnit;
  }
};
var monoidString = {
  mempty: "",
  Semigroup0: function Semigroup0() {
    return Data_Semigroup.semigroupString;
  }
};
var monoidRecordNil = {
  memptyRecord: function memptyRecord(v) {
    return {};
  },
  SemigroupRecord0: function SemigroupRecord0() {
    return Data_Semigroup.semigroupRecordNil;
  }
};
var monoidOrdering = {
  mempty: Data_Ordering.EQ.value,
  Semigroup0: function Semigroup0() {
    return Data_Ordering.semigroupOrdering;
  }
};
var monoidArray = {
  mempty: [],
  Semigroup0: function Semigroup0() {
    return Data_Semigroup.semigroupArray;
  }
};

var _memptyRecord = function memptyRecord(dict) {
  return dict.memptyRecord;
};

var monoidRecord = function monoidRecord(dictRowToList) {
  return function (dictMonoidRecord) {
    return {
      mempty: _memptyRecord(dictMonoidRecord)(Type_Proxy["Proxy"].value),
      Semigroup0: function Semigroup0() {
        return Data_Semigroup.semigroupRecord()(dictMonoidRecord.SemigroupRecord0());
      }
    };
  };
};

var _mempty = function mempty(dict) {
  return dict.mempty;
};

var monoidFn = function monoidFn(dictMonoid) {
  return {
    mempty: function mempty(v) {
      return _mempty(dictMonoid);
    },
    Semigroup0: function Semigroup0() {
      return Data_Semigroup.semigroupFn(dictMonoid.Semigroup0());
    }
  };
};

var monoidRecordCons = function monoidRecordCons(dictIsSymbol) {
  return function (dictMonoid) {
    return function (dictCons) {
      return function (dictMonoidRecord) {
        return {
          memptyRecord: function memptyRecord(v) {
            var tail = _memptyRecord(dictMonoidRecord)(Type_Proxy["Proxy"].value);

            var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value);
            var insert = Record_Unsafe.unsafeSet(key);
            return insert(_mempty(dictMonoid))(tail);
          },
          SemigroupRecord0: function SemigroupRecord0() {
            return Data_Semigroup.semigroupRecordCons(dictIsSymbol)()(dictMonoidRecord.SemigroupRecord0())(dictMonoid.Semigroup0());
          }
        };
      };
    };
  };
};

var power = function power(dictMonoid) {
  return function (x) {
    var go = function go(p) {
      if (p <= 0) {
        return _mempty(dictMonoid);
      }

      ;

      if (p === 1) {
        return x;
      }

      ;

      if (Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(p)(2) === 0) {
        var x$prime = go(Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(p)(2));
        return Data_Semigroup.append(dictMonoid.Semigroup0())(x$prime)(x$prime);
      }

      ;

      if (Data_Boolean.otherwise) {
        var x$prime = go(Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(p)(2));
        return Data_Semigroup.append(dictMonoid.Semigroup0())(x$prime)(Data_Semigroup.append(dictMonoid.Semigroup0())(x$prime)(x));
      }

      ;
      throw new Error("Failed pattern match at Data.Monoid (line 86, column 3 - line 86, column 17): " + [p.constructor.name]);
    };

    return go;
  };
};

var guard = function guard(dictMonoid) {
  return function (v) {
    return function (v1) {
      if (v) {
        return v1;
      }

      ;

      if (!v) {
        return _mempty(dictMonoid);
      }

      ;
      throw new Error("Failed pattern match at Data.Monoid (line 94, column 1 - line 94, column 49): " + [v.constructor.name, v1.constructor.name]);
    };
  };
};

module.exports = {
  mempty: _mempty,
  power: power,
  guard: guard,
  memptyRecord: _memptyRecord,
  monoidUnit: monoidUnit,
  monoidOrdering: monoidOrdering,
  monoidFn: monoidFn,
  monoidString: monoidString,
  monoidArray: monoidArray,
  monoidRecord: monoidRecord,
  monoidRecordNil: monoidRecordNil,
  monoidRecordCons: monoidRecordCons
};
},{"../Data.Boolean/index.js":"output/Data.Boolean/index.js","../Data.EuclideanRing/index.js":"output/Data.EuclideanRing/index.js","../Data.Ordering/index.js":"output/Data.Ordering/index.js","../Data.Semigroup/index.js":"output/Data.Semigroup/index.js","../Data.Symbol/index.js":"output/Data.Symbol/index.js","../Data.Unit/index.js":"output/Data.Unit/index.js","../Record.Unsafe/index.js":"output/Record.Unsafe/index.js","../Type.Proxy/index.js":"output/Type.Proxy/index.js"}],"output/Effect/index.js":[function(require,module,exports) {
// Generated by purs version 0.14.5
"use strict";

var $foreign = require("./foreign.js");

var Control_Applicative = require("../Control.Applicative/index.js");

var Control_Apply = require("../Control.Apply/index.js");

var Control_Monad = require("../Control.Monad/index.js");

var Data_Monoid = require("../Data.Monoid/index.js");

var Data_Semigroup = require("../Data.Semigroup/index.js");

var monadEffect = {
  Applicative0: function Applicative0() {
    return applicativeEffect;
  },
  Bind1: function Bind1() {
    return bindEffect;
  }
};
var bindEffect = {
  bind: $foreign.bindE,
  Apply0: function Apply0() {
    return applyEffect;
  }
};
var applyEffect = {
  apply: Control_Monad.ap(monadEffect),
  Functor0: function Functor0() {
    return functorEffect;
  }
};
var applicativeEffect = {
  pure: $foreign.pureE,
  Apply0: function Apply0() {
    return applyEffect;
  }
};
var functorEffect = {
  map: Control_Applicative.liftA1(applicativeEffect)
};

var semigroupEffect = function semigroupEffect(dictSemigroup) {
  return {
    append: Control_Apply.lift2(applyEffect)(Data_Semigroup.append(dictSemigroup))
  };
};

var monoidEffect = function monoidEffect(dictMonoid) {
  return {
    mempty: $foreign.pureE(Data_Monoid.mempty(dictMonoid)),
    Semigroup0: function Semigroup0() {
      return semigroupEffect(dictMonoid.Semigroup0());
    }
  };
};

module.exports = {
  functorEffect: functorEffect,
  applyEffect: applyEffect,
  applicativeEffect: applicativeEffect,
  bindEffect: bindEffect,
  monadEffect: monadEffect,
  semigroupEffect: semigroupEffect,
  monoidEffect: monoidEffect,
  untilE: $foreign.untilE,
  whileE: $foreign.whileE,
  forE: $foreign.forE,
  foreachE: $foreign.foreachE
};
},{"./foreign.js":"output/Effect/foreign.js","../Control.Applicative/index.js":"output/Control.Applicative/index.js","../Control.Apply/index.js":"output/Control.Apply/index.js","../Control.Monad/index.js":"output/Control.Monad/index.js","../Data.Monoid/index.js":"output/Data.Monoid/index.js","../Data.Semigroup/index.js":"output/Data.Semigroup/index.js"}],"output/Effect.Class/index.js":[function(require,module,exports) {
// Generated by purs version 0.14.5
"use strict";

var Control_Category = require("../Control.Category/index.js");

var Effect = require("../Effect/index.js");

var monadEffectEffect = {
  liftEffect: Control_Category.identity(Control_Category.categoryFn),
  Monad0: function Monad0() {
    return Effect.monadEffect;
  }
};

var liftEffect = function liftEffect(dict) {
  return dict.liftEffect;
};

module.exports = {
  liftEffect: liftEffect,
  monadEffectEffect: monadEffectEffect
};
},{"../Control.Category/index.js":"output/Control.Category/index.js","../Effect/index.js":"output/Effect/index.js"}],"output/Effect.Console/foreign.js":[function(require,module,exports) {
"use strict";

exports.log = function (s) {
  return function () {
    console.log(s);
  };
};

exports.warn = function (s) {
  return function () {
    console.warn(s);
  };
};

exports.error = function (s) {
  return function () {
    console.error(s);
  };
};

exports.info = function (s) {
  return function () {
    console.info(s);
  };
};

exports.time = function (s) {
  return function () {
    console.time(s);
  };
};

exports.timeLog = function (s) {
  return function () {
    console.timeLog(s);
  };
};

exports.timeEnd = function (s) {
  return function () {
    console.timeEnd(s);
  };
};

exports.clear = function () {
  console.clear();
};
},{}],"output/Effect.Console/index.js":[function(require,module,exports) {
// Generated by purs version 0.14.5
"use strict";

var $foreign = require("./foreign.js");

var Data_Show = require("../Data.Show/index.js");

var warnShow = function warnShow(dictShow) {
  return function (a) {
    return $foreign.warn(Data_Show.show(dictShow)(a));
  };
};

var logShow = function logShow(dictShow) {
  return function (a) {
    return $foreign.log(Data_Show.show(dictShow)(a));
  };
};

var infoShow = function infoShow(dictShow) {
  return function (a) {
    return $foreign.info(Data_Show.show(dictShow)(a));
  };
};

var errorShow = function errorShow(dictShow) {
  return function (a) {
    return $foreign.error(Data_Show.show(dictShow)(a));
  };
};

module.exports = {
  logShow: logShow,
  warnShow: warnShow,
  errorShow: errorShow,
  infoShow: infoShow,
  log: $foreign.log,
  warn: $foreign.warn,
  error: $foreign.error,
  info: $foreign.info,
  time: $foreign.time,
  timeLog: $foreign.timeLog,
  timeEnd: $foreign.timeEnd,
  clear: $foreign.clear
};
},{"./foreign.js":"output/Effect.Console/foreign.js","../Data.Show/index.js":"output/Data.Show/index.js"}],"node_modules/@opentelemetry/api/build/esm/baggage/types.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/@opentelemetry/api/build/esm/platform/browser/globalThis.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports._globalThis = void 0;

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/** only globals that common to node and browsers are allowed */
// eslint-disable-next-line node/no-unsupported-features/es-builtins, no-undef
var _globalThis = (typeof globalThis === "undefined" ? "undefined" : _typeof(globalThis)) === 'object' ? globalThis : window;

exports._globalThis = _globalThis;
},{}],"node_modules/@opentelemetry/api/build/esm/platform/browser/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _globalThis = require("./globalThis");

Object.keys(_globalThis).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _globalThis[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _globalThis[key];
    }
  });
});
},{"./globalThis":"node_modules/@opentelemetry/api/build/esm/platform/browser/globalThis.js"}],"node_modules/@opentelemetry/api/build/esm/version.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.VERSION = void 0;

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// this is autogenerated file, see scripts/version-update.js
var VERSION = '1.0.3';
exports.VERSION = VERSION;
},{}],"node_modules/@opentelemetry/api/build/esm/internal/semver.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports._makeCompatibilityCheck = _makeCompatibilityCheck;
exports.isCompatible = void 0;

var _version = require("../version");

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var re = /^(\d+)\.(\d+)\.(\d+)(-(.+))?$/;
/**
 * Create a function to test an API version to see if it is compatible with the provided ownVersion.
 *
 * The returned function has the following semantics:
 * - Exact match is always compatible
 * - Major versions must match exactly
 *    - 1.x package cannot use global 2.x package
 *    - 2.x package cannot use global 1.x package
 * - The minor version of the API module requesting access to the global API must be less than or equal to the minor version of this API
 *    - 1.3 package may use 1.4 global because the later global contains all functions 1.3 expects
 *    - 1.4 package may NOT use 1.3 global because it may try to call functions which don't exist on 1.3
 * - If the major version is 0, the minor version is treated as the major and the patch is treated as the minor
 * - Patch and build tag differences are not considered at this time
 *
 * @param ownVersion version which should be checked against
 */

function _makeCompatibilityCheck(ownVersion) {
  var acceptedVersions = new Set([ownVersion]);
  var rejectedVersions = new Set();
  var myVersionMatch = ownVersion.match(re);

  if (!myVersionMatch) {
    // we cannot guarantee compatibility so we always return noop
    return function () {
      return false;
    };
  }

  var ownVersionParsed = {
    major: +myVersionMatch[1],
    minor: +myVersionMatch[2],
    patch: +myVersionMatch[3],
    prerelease: myVersionMatch[4]
  }; // if ownVersion has a prerelease tag, versions must match exactly

  if (ownVersionParsed.prerelease != null) {
    return function isExactmatch(globalVersion) {
      return globalVersion === ownVersion;
    };
  }

  function _reject(v) {
    rejectedVersions.add(v);
    return false;
  }

  function _accept(v) {
    acceptedVersions.add(v);
    return true;
  }

  return function isCompatible(globalVersion) {
    if (acceptedVersions.has(globalVersion)) {
      return true;
    }

    if (rejectedVersions.has(globalVersion)) {
      return false;
    }

    var globalVersionMatch = globalVersion.match(re);

    if (!globalVersionMatch) {
      // cannot parse other version
      // we cannot guarantee compatibility so we always noop
      return _reject(globalVersion);
    }

    var globalVersionParsed = {
      major: +globalVersionMatch[1],
      minor: +globalVersionMatch[2],
      patch: +globalVersionMatch[3],
      prerelease: globalVersionMatch[4]
    }; // if globalVersion has a prerelease tag, versions must match exactly

    if (globalVersionParsed.prerelease != null) {
      return _reject(globalVersion);
    } // major versions must match


    if (ownVersionParsed.major !== globalVersionParsed.major) {
      return _reject(globalVersion);
    }

    if (ownVersionParsed.major === 0) {
      if (ownVersionParsed.minor === globalVersionParsed.minor && ownVersionParsed.patch <= globalVersionParsed.patch) {
        return _accept(globalVersion);
      }

      return _reject(globalVersion);
    }

    if (ownVersionParsed.minor <= globalVersionParsed.minor) {
      return _accept(globalVersion);
    }

    return _reject(globalVersion);
  };
}
/**
 * Test an API version to see if it is compatible with this API.
 *
 * - Exact match is always compatible
 * - Major versions must match exactly
 *    - 1.x package cannot use global 2.x package
 *    - 2.x package cannot use global 1.x package
 * - The minor version of the API module requesting access to the global API must be less than or equal to the minor version of this API
 *    - 1.3 package may use 1.4 global because the later global contains all functions 1.3 expects
 *    - 1.4 package may NOT use 1.3 global because it may try to call functions which don't exist on 1.3
 * - If the major version is 0, the minor version is treated as the major and the patch is treated as the minor
 * - Patch and build tag differences are not considered at this time
 *
 * @param version version of the API requesting an instance of the global API
 */


var isCompatible = _makeCompatibilityCheck(_version.VERSION);

exports.isCompatible = isCompatible;
},{"../version":"node_modules/@opentelemetry/api/build/esm/version.js"}],"node_modules/@opentelemetry/api/build/esm/internal/global-utils.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getGlobal = getGlobal;
exports.registerGlobal = registerGlobal;
exports.unregisterGlobal = unregisterGlobal;

var _platform = require("../platform");

var _version = require("../version");

var _semver = require("./semver");

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var major = _version.VERSION.split('.')[0];

var GLOBAL_OPENTELEMETRY_API_KEY = Symbol.for("opentelemetry.js.api." + major);
var _global = _platform._globalThis;

function registerGlobal(type, instance, diag, allowOverride) {
  var _a;

  if (allowOverride === void 0) {
    allowOverride = false;
  }

  var api = _global[GLOBAL_OPENTELEMETRY_API_KEY] = (_a = _global[GLOBAL_OPENTELEMETRY_API_KEY]) !== null && _a !== void 0 ? _a : {
    version: _version.VERSION
  };

  if (!allowOverride && api[type]) {
    // already registered an API of this type
    var err = new Error("@opentelemetry/api: Attempted duplicate registration of API: " + type);
    diag.error(err.stack || err.message);
    return false;
  }

  if (api.version !== _version.VERSION) {
    // All registered APIs must be of the same version exactly
    var err = new Error('@opentelemetry/api: All API registration versions must match');
    diag.error(err.stack || err.message);
    return false;
  }

  api[type] = instance;
  diag.debug("@opentelemetry/api: Registered a global for " + type + " v" + _version.VERSION + ".");
  return true;
}

function getGlobal(type) {
  var _a, _b;

  var globalVersion = (_a = _global[GLOBAL_OPENTELEMETRY_API_KEY]) === null || _a === void 0 ? void 0 : _a.version;

  if (!globalVersion || !(0, _semver.isCompatible)(globalVersion)) {
    return;
  }

  return (_b = _global[GLOBAL_OPENTELEMETRY_API_KEY]) === null || _b === void 0 ? void 0 : _b[type];
}

function unregisterGlobal(type, diag) {
  diag.debug("@opentelemetry/api: Unregistering a global for " + type + " v" + _version.VERSION + ".");
  var api = _global[GLOBAL_OPENTELEMETRY_API_KEY];

  if (api) {
    delete api[type];
  }
}
},{"../platform":"node_modules/@opentelemetry/api/build/esm/platform/browser/index.js","../version":"node_modules/@opentelemetry/api/build/esm/version.js","./semver":"node_modules/@opentelemetry/api/build/esm/internal/semver.js"}],"node_modules/@opentelemetry/api/build/esm/diag/ComponentLogger.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DiagComponentLogger = void 0;

var _globalUtils = require("../internal/global-utils");

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Component Logger which is meant to be used as part of any component which
 * will add automatically additional namespace in front of the log message.
 * It will then forward all message to global diag logger
 * @example
 * const cLogger = diag.createComponentLogger({ namespace: '@opentelemetry/instrumentation-http' });
 * cLogger.debug('test');
 * // @opentelemetry/instrumentation-http test
 */
var DiagComponentLogger =
/** @class */
function () {
  function DiagComponentLogger(props) {
    this._namespace = props.namespace || 'DiagComponentLogger';
  }

  DiagComponentLogger.prototype.debug = function () {
    var args = [];

    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }

    return logProxy('debug', this._namespace, args);
  };

  DiagComponentLogger.prototype.error = function () {
    var args = [];

    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }

    return logProxy('error', this._namespace, args);
  };

  DiagComponentLogger.prototype.info = function () {
    var args = [];

    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }

    return logProxy('info', this._namespace, args);
  };

  DiagComponentLogger.prototype.warn = function () {
    var args = [];

    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }

    return logProxy('warn', this._namespace, args);
  };

  DiagComponentLogger.prototype.verbose = function () {
    var args = [];

    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }

    return logProxy('verbose', this._namespace, args);
  };

  return DiagComponentLogger;
}();

exports.DiagComponentLogger = DiagComponentLogger;

function logProxy(funcName, namespace, args) {
  var logger = (0, _globalUtils.getGlobal)('diag'); // shortcut if logger not set

  if (!logger) {
    return;
  }

  args.unshift(namespace);
  return logger[funcName].apply(logger, args);
}
},{"../internal/global-utils":"node_modules/@opentelemetry/api/build/esm/internal/global-utils.js"}],"node_modules/@opentelemetry/api/build/esm/diag/types.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DiagLogLevel = void 0;

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Defines the available internal logging levels for the diagnostic logger, the numeric values
 * of the levels are defined to match the original values from the initial LogLevel to avoid
 * compatibility/migration issues for any implementation that assume the numeric ordering.
 */
var DiagLogLevel;
exports.DiagLogLevel = DiagLogLevel;

(function (DiagLogLevel) {
  /** Diagnostic Logging level setting to disable all logging (except and forced logs) */
  DiagLogLevel[DiagLogLevel["NONE"] = 0] = "NONE";
  /** Identifies an error scenario */

  DiagLogLevel[DiagLogLevel["ERROR"] = 30] = "ERROR";
  /** Identifies a warning scenario */

  DiagLogLevel[DiagLogLevel["WARN"] = 50] = "WARN";
  /** General informational log message */

  DiagLogLevel[DiagLogLevel["INFO"] = 60] = "INFO";
  /** General debug log message */

  DiagLogLevel[DiagLogLevel["DEBUG"] = 70] = "DEBUG";
  /**
   * Detailed trace level logging should only be used for development, should only be set
   * in a development environment.
   */

  DiagLogLevel[DiagLogLevel["VERBOSE"] = 80] = "VERBOSE";
  /** Used to set the logging level to include all logging */

  DiagLogLevel[DiagLogLevel["ALL"] = 9999] = "ALL";
})(DiagLogLevel || (exports.DiagLogLevel = DiagLogLevel = {}));
},{}],"node_modules/@opentelemetry/api/build/esm/diag/internal/logLevelLogger.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createLogLevelDiagLogger = createLogLevelDiagLogger;

var _types = require("../types");

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function createLogLevelDiagLogger(maxLevel, logger) {
  if (maxLevel < _types.DiagLogLevel.NONE) {
    maxLevel = _types.DiagLogLevel.NONE;
  } else if (maxLevel > _types.DiagLogLevel.ALL) {
    maxLevel = _types.DiagLogLevel.ALL;
  } // In case the logger is null or undefined


  logger = logger || {};

  function _filterFunc(funcName, theLevel) {
    var theFunc = logger[funcName];

    if (typeof theFunc === 'function' && maxLevel >= theLevel) {
      return theFunc.bind(logger);
    }

    return function () {};
  }

  return {
    error: _filterFunc('error', _types.DiagLogLevel.ERROR),
    warn: _filterFunc('warn', _types.DiagLogLevel.WARN),
    info: _filterFunc('info', _types.DiagLogLevel.INFO),
    debug: _filterFunc('debug', _types.DiagLogLevel.DEBUG),
    verbose: _filterFunc('verbose', _types.DiagLogLevel.VERBOSE)
  };
}
},{"../types":"node_modules/@opentelemetry/api/build/esm/diag/types.js"}],"node_modules/@opentelemetry/api/build/esm/api/diag.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DiagAPI = void 0;

var _ComponentLogger = require("../diag/ComponentLogger");

var _logLevelLogger = require("../diag/internal/logLevelLogger");

var _types = require("../diag/types");

var _globalUtils = require("../internal/global-utils");

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var API_NAME = 'diag';
/**
 * Singleton object which represents the entry point to the OpenTelemetry internal
 * diagnostic API
 */

var DiagAPI =
/** @class */
function () {
  /**
   * Private internal constructor
   * @private
   */
  function DiagAPI() {
    function _logProxy(funcName) {
      return function () {
        var logger = (0, _globalUtils.getGlobal)('diag'); // shortcut if logger not set

        if (!logger) return;
        return logger[funcName].apply(logger, // work around Function.prototype.apply types
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        arguments);
      };
    } // Using self local variable for minification purposes as 'this' cannot be minified


    var self = this; // DiagAPI specific functions

    self.setLogger = function (logger, logLevel) {
      var _a, _b;

      if (logLevel === void 0) {
        logLevel = _types.DiagLogLevel.INFO;
      }

      if (logger === self) {
        // There isn't much we can do here.
        // Logging to the console might break the user application.
        // Try to log to self. If a logger was previously registered it will receive the log.
        var err = new Error('Cannot use diag as the logger for itself. Please use a DiagLogger implementation like ConsoleDiagLogger or a custom implementation');
        self.error((_a = err.stack) !== null && _a !== void 0 ? _a : err.message);
        return false;
      }

      var oldLogger = (0, _globalUtils.getGlobal)('diag');
      var newLogger = (0, _logLevelLogger.createLogLevelDiagLogger)(logLevel, logger); // There already is an logger registered. We'll let it know before overwriting it.

      if (oldLogger) {
        var stack = (_b = new Error().stack) !== null && _b !== void 0 ? _b : '<failed to generate stacktrace>';
        oldLogger.warn("Current logger will be overwritten from " + stack);
        newLogger.warn("Current logger will overwrite one already registered from " + stack);
      }

      return (0, _globalUtils.registerGlobal)('diag', newLogger, self, true);
    };

    self.disable = function () {
      (0, _globalUtils.unregisterGlobal)(API_NAME, self);
    };

    self.createComponentLogger = function (options) {
      return new _ComponentLogger.DiagComponentLogger(options);
    };

    self.verbose = _logProxy('verbose');
    self.debug = _logProxy('debug');
    self.info = _logProxy('info');
    self.warn = _logProxy('warn');
    self.error = _logProxy('error');
  }
  /** Get the singleton instance of the DiagAPI API */


  DiagAPI.instance = function () {
    if (!this._instance) {
      this._instance = new DiagAPI();
    }

    return this._instance;
  };

  return DiagAPI;
}();

exports.DiagAPI = DiagAPI;
},{"../diag/ComponentLogger":"node_modules/@opentelemetry/api/build/esm/diag/ComponentLogger.js","../diag/internal/logLevelLogger":"node_modules/@opentelemetry/api/build/esm/diag/internal/logLevelLogger.js","../diag/types":"node_modules/@opentelemetry/api/build/esm/diag/types.js","../internal/global-utils":"node_modules/@opentelemetry/api/build/esm/internal/global-utils.js"}],"node_modules/@opentelemetry/api/build/esm/baggage/internal/baggage-impl.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BaggageImpl = void 0;

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var BaggageImpl =
/** @class */
function () {
  function BaggageImpl(entries) {
    this._entries = entries ? new Map(entries) : new Map();
  }

  BaggageImpl.prototype.getEntry = function (key) {
    var entry = this._entries.get(key);

    if (!entry) {
      return undefined;
    }

    return Object.assign({}, entry);
  };

  BaggageImpl.prototype.getAllEntries = function () {
    return Array.from(this._entries.entries()).map(function (_a) {
      var k = _a[0],
          v = _a[1];
      return [k, v];
    });
  };

  BaggageImpl.prototype.setEntry = function (key, entry) {
    var newBaggage = new BaggageImpl(this._entries);

    newBaggage._entries.set(key, entry);

    return newBaggage;
  };

  BaggageImpl.prototype.removeEntry = function (key) {
    var newBaggage = new BaggageImpl(this._entries);

    newBaggage._entries.delete(key);

    return newBaggage;
  };

  BaggageImpl.prototype.removeEntries = function () {
    var keys = [];

    for (var _i = 0; _i < arguments.length; _i++) {
      keys[_i] = arguments[_i];
    }

    var newBaggage = new BaggageImpl(this._entries);

    for (var _a = 0, keys_1 = keys; _a < keys_1.length; _a++) {
      var key = keys_1[_a];

      newBaggage._entries.delete(key);
    }

    return newBaggage;
  };

  BaggageImpl.prototype.clear = function () {
    return new BaggageImpl();
  };

  return BaggageImpl;
}();

exports.BaggageImpl = BaggageImpl;
},{}],"node_modules/@opentelemetry/api/build/esm/baggage/internal/symbol.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.baggageEntryMetadataSymbol = void 0;

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Symbol used to make BaggageEntryMetadata an opaque type
 */
var baggageEntryMetadataSymbol = Symbol('BaggageEntryMetadata');
exports.baggageEntryMetadataSymbol = baggageEntryMetadataSymbol;
},{}],"node_modules/@opentelemetry/api/build/esm/baggage/utils.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.baggageEntryMetadataFromString = baggageEntryMetadataFromString;
exports.createBaggage = createBaggage;

var _diag = require("../api/diag");

var _baggageImpl = require("./internal/baggage-impl");

var _symbol = require("./internal/symbol");

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var diag = _diag.DiagAPI.instance();
/**
 * Create a new Baggage with optional entries
 *
 * @param entries An array of baggage entries the new baggage should contain
 */


function createBaggage(entries) {
  if (entries === void 0) {
    entries = {};
  }

  return new _baggageImpl.BaggageImpl(new Map(Object.entries(entries)));
}
/**
 * Create a serializable BaggageEntryMetadata object from a string.
 *
 * @param str string metadata. Format is currently not defined by the spec and has no special meaning.
 *
 */


function baggageEntryMetadataFromString(str) {
  if (typeof str !== 'string') {
    diag.error("Cannot create baggage metadata from unknown type: " + _typeof(str));
    str = '';
  }

  return {
    __TYPE__: _symbol.baggageEntryMetadataSymbol,
    toString: function toString() {
      return str;
    }
  };
}
},{"../api/diag":"node_modules/@opentelemetry/api/build/esm/api/diag.js","./internal/baggage-impl":"node_modules/@opentelemetry/api/build/esm/baggage/internal/baggage-impl.js","./internal/symbol":"node_modules/@opentelemetry/api/build/esm/baggage/internal/symbol.js"}],"node_modules/@opentelemetry/api/build/esm/common/Exception.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/@opentelemetry/api/build/esm/common/Time.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/@opentelemetry/api/build/esm/diag/consoleLogger.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DiagConsoleLogger = void 0;

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var consoleMap = [{
  n: 'error',
  c: 'error'
}, {
  n: 'warn',
  c: 'warn'
}, {
  n: 'info',
  c: 'info'
}, {
  n: 'debug',
  c: 'debug'
}, {
  n: 'verbose',
  c: 'trace'
}];
/**
 * A simple Immutable Console based diagnostic logger which will output any messages to the Console.
 * If you want to limit the amount of logging to a specific level or lower use the
 * {@link createLogLevelDiagLogger}
 */

var DiagConsoleLogger =
/** @class */
function () {
  function DiagConsoleLogger() {
    function _consoleFunc(funcName) {
      return function () {
        var orgArguments = arguments;

        if (console) {
          // Some environments only expose the console when the F12 developer console is open
          var theFunc = console[funcName];

          if (typeof theFunc !== 'function') {
            // Not all environments support all functions
            theFunc = console.log;
          } // One last final check


          if (typeof theFunc === 'function') {
            return theFunc.apply(console, orgArguments);
          }
        }
      };
    }

    for (var i = 0; i < consoleMap.length; i++) {
      this[consoleMap[i].n] = _consoleFunc(consoleMap[i].c);
    }
  }

  return DiagConsoleLogger;
}();

exports.DiagConsoleLogger = DiagConsoleLogger;
},{}],"node_modules/@opentelemetry/api/build/esm/diag/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _consoleLogger = require("./consoleLogger");

Object.keys(_consoleLogger).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _consoleLogger[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _consoleLogger[key];
    }
  });
});

var _types = require("./types");

Object.keys(_types).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _types[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _types[key];
    }
  });
});
},{"./consoleLogger":"node_modules/@opentelemetry/api/build/esm/diag/consoleLogger.js","./types":"node_modules/@opentelemetry/api/build/esm/diag/types.js"}],"node_modules/@opentelemetry/api/build/esm/propagation/TextMapPropagator.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.defaultTextMapSetter = exports.defaultTextMapGetter = void 0;

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var defaultTextMapGetter = {
  get: function get(carrier, key) {
    if (carrier == null) {
      return undefined;
    }

    return carrier[key];
  },
  keys: function keys(carrier) {
    if (carrier == null) {
      return [];
    }

    return Object.keys(carrier);
  }
};
exports.defaultTextMapGetter = defaultTextMapGetter;
var defaultTextMapSetter = {
  set: function set(carrier, key, value) {
    if (carrier == null) {
      return;
    }

    carrier[key] = value;
  }
};
exports.defaultTextMapSetter = defaultTextMapSetter;
},{}],"node_modules/@opentelemetry/api/build/esm/trace/attributes.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/@opentelemetry/api/build/esm/trace/link.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/@opentelemetry/api/build/esm/context/context.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ROOT_CONTEXT = void 0;
exports.createContextKey = createContextKey;

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/** Get a key to uniquely identify a context value */
function createContextKey(description) {
  // The specification states that for the same input, multiple calls should
  // return different keys. Due to the nature of the JS dependency management
  // system, this creates problems where multiple versions of some package
  // could hold different keys for the same property.
  //
  // Therefore, we use Symbol.for which returns the same key for the same input.
  return Symbol.for(description);
}

var BaseContext =
/** @class */
function () {
  /**
   * Construct a new context which inherits values from an optional parent context.
   *
   * @param parentContext a context from which to inherit values
   */
  function BaseContext(parentContext) {
    // for minification
    var self = this;
    self._currentContext = parentContext ? new Map(parentContext) : new Map();

    self.getValue = function (key) {
      return self._currentContext.get(key);
    };

    self.setValue = function (key, value) {
      var context = new BaseContext(self._currentContext);

      context._currentContext.set(key, value);

      return context;
    };

    self.deleteValue = function (key) {
      var context = new BaseContext(self._currentContext);

      context._currentContext.delete(key);

      return context;
    };
  }

  return BaseContext;
}();
/** The root context is used as the default parent context when there is no active context */


var ROOT_CONTEXT = new BaseContext();
exports.ROOT_CONTEXT = ROOT_CONTEXT;
},{}],"node_modules/@opentelemetry/api/build/esm/context/NoopContextManager.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NoopContextManager = void 0;

var _context2 = require("./context");

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __spreadArray = void 0 && (void 0).__spreadArray || function (to, from) {
  for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) {
    to[j] = from[i];
  }

  return to;
};

var NoopContextManager =
/** @class */
function () {
  function NoopContextManager() {}

  NoopContextManager.prototype.active = function () {
    return _context2.ROOT_CONTEXT;
  };

  NoopContextManager.prototype.with = function (_context, fn, thisArg) {
    var args = [];

    for (var _i = 3; _i < arguments.length; _i++) {
      args[_i - 3] = arguments[_i];
    }

    return fn.call.apply(fn, __spreadArray([thisArg], args));
  };

  NoopContextManager.prototype.bind = function (_context, target) {
    return target;
  };

  NoopContextManager.prototype.enable = function () {
    return this;
  };

  NoopContextManager.prototype.disable = function () {
    return this;
  };

  return NoopContextManager;
}();

exports.NoopContextManager = NoopContextManager;
},{"./context":"node_modules/@opentelemetry/api/build/esm/context/context.js"}],"node_modules/@opentelemetry/api/build/esm/api/context.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ContextAPI = void 0;

var _NoopContextManager = require("../context/NoopContextManager");

var _globalUtils = require("../internal/global-utils");

var _diag = require("./diag");

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __spreadArray = void 0 && (void 0).__spreadArray || function (to, from) {
  for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) {
    to[j] = from[i];
  }

  return to;
};

var API_NAME = 'context';
var NOOP_CONTEXT_MANAGER = new _NoopContextManager.NoopContextManager();
/**
 * Singleton object which represents the entry point to the OpenTelemetry Context API
 */

var ContextAPI =
/** @class */
function () {
  /** Empty private constructor prevents end users from constructing a new instance of the API */
  function ContextAPI() {}
  /** Get the singleton instance of the Context API */


  ContextAPI.getInstance = function () {
    if (!this._instance) {
      this._instance = new ContextAPI();
    }

    return this._instance;
  };
  /**
   * Set the current context manager.
   *
   * @returns true if the context manager was successfully registered, else false
   */


  ContextAPI.prototype.setGlobalContextManager = function (contextManager) {
    return (0, _globalUtils.registerGlobal)(API_NAME, contextManager, _diag.DiagAPI.instance());
  };
  /**
   * Get the currently active context
   */


  ContextAPI.prototype.active = function () {
    return this._getContextManager().active();
  };
  /**
   * Execute a function with an active context
   *
   * @param context context to be active during function execution
   * @param fn function to execute in a context
   * @param thisArg optional receiver to be used for calling fn
   * @param args optional arguments forwarded to fn
   */


  ContextAPI.prototype.with = function (context, fn, thisArg) {
    var _a;

    var args = [];

    for (var _i = 3; _i < arguments.length; _i++) {
      args[_i - 3] = arguments[_i];
    }

    return (_a = this._getContextManager()).with.apply(_a, __spreadArray([context, fn, thisArg], args));
  };
  /**
   * Bind a context to a target function or event emitter
   *
   * @param context context to bind to the event emitter or function. Defaults to the currently active context
   * @param target function or event emitter to bind
   */


  ContextAPI.prototype.bind = function (context, target) {
    return this._getContextManager().bind(context, target);
  };

  ContextAPI.prototype._getContextManager = function () {
    return (0, _globalUtils.getGlobal)(API_NAME) || NOOP_CONTEXT_MANAGER;
  };
  /** Disable and remove the global context manager */


  ContextAPI.prototype.disable = function () {
    this._getContextManager().disable();

    (0, _globalUtils.unregisterGlobal)(API_NAME, _diag.DiagAPI.instance());
  };

  return ContextAPI;
}();

exports.ContextAPI = ContextAPI;
},{"../context/NoopContextManager":"node_modules/@opentelemetry/api/build/esm/context/NoopContextManager.js","../internal/global-utils":"node_modules/@opentelemetry/api/build/esm/internal/global-utils.js","./diag":"node_modules/@opentelemetry/api/build/esm/api/diag.js"}],"node_modules/@opentelemetry/api/build/esm/trace/trace_flags.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TraceFlags = void 0;

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var TraceFlags;
exports.TraceFlags = TraceFlags;

(function (TraceFlags) {
  /** Represents no flag set. */
  TraceFlags[TraceFlags["NONE"] = 0] = "NONE";
  /** Bit to represent whether trace is sampled in trace flags. */

  TraceFlags[TraceFlags["SAMPLED"] = 1] = "SAMPLED";
})(TraceFlags || (exports.TraceFlags = TraceFlags = {}));
},{}],"node_modules/@opentelemetry/api/build/esm/trace/invalid-span-constants.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.INVALID_TRACEID = exports.INVALID_SPAN_CONTEXT = exports.INVALID_SPANID = void 0;

var _trace_flags = require("./trace_flags");

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var INVALID_SPANID = '0000000000000000';
exports.INVALID_SPANID = INVALID_SPANID;
var INVALID_TRACEID = '00000000000000000000000000000000';
exports.INVALID_TRACEID = INVALID_TRACEID;
var INVALID_SPAN_CONTEXT = {
  traceId: INVALID_TRACEID,
  spanId: INVALID_SPANID,
  traceFlags: _trace_flags.TraceFlags.NONE
};
exports.INVALID_SPAN_CONTEXT = INVALID_SPAN_CONTEXT;
},{"./trace_flags":"node_modules/@opentelemetry/api/build/esm/trace/trace_flags.js"}],"node_modules/@opentelemetry/api/build/esm/trace/NonRecordingSpan.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NonRecordingSpan = void 0;

var _invalidSpanConstants = require("./invalid-span-constants");

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * The NonRecordingSpan is the default {@link Span} that is used when no Span
 * implementation is available. All operations are no-op including context
 * propagation.
 */
var NonRecordingSpan =
/** @class */
function () {
  function NonRecordingSpan(_spanContext) {
    if (_spanContext === void 0) {
      _spanContext = _invalidSpanConstants.INVALID_SPAN_CONTEXT;
    }

    this._spanContext = _spanContext;
  } // Returns a SpanContext.


  NonRecordingSpan.prototype.spanContext = function () {
    return this._spanContext;
  }; // By default does nothing


  NonRecordingSpan.prototype.setAttribute = function (_key, _value) {
    return this;
  }; // By default does nothing


  NonRecordingSpan.prototype.setAttributes = function (_attributes) {
    return this;
  }; // By default does nothing


  NonRecordingSpan.prototype.addEvent = function (_name, _attributes) {
    return this;
  }; // By default does nothing


  NonRecordingSpan.prototype.setStatus = function (_status) {
    return this;
  }; // By default does nothing


  NonRecordingSpan.prototype.updateName = function (_name) {
    return this;
  }; // By default does nothing


  NonRecordingSpan.prototype.end = function (_endTime) {}; // isRecording always returns false for NonRecordingSpan.


  NonRecordingSpan.prototype.isRecording = function () {
    return false;
  }; // By default does nothing


  NonRecordingSpan.prototype.recordException = function (_exception, _time) {};

  return NonRecordingSpan;
}();

exports.NonRecordingSpan = NonRecordingSpan;
},{"./invalid-span-constants":"node_modules/@opentelemetry/api/build/esm/trace/invalid-span-constants.js"}],"node_modules/@opentelemetry/api/build/esm/trace/context-utils.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.deleteSpan = deleteSpan;
exports.getSpan = getSpan;
exports.getSpanContext = getSpanContext;
exports.setSpan = setSpan;
exports.setSpanContext = setSpanContext;

var _context = require("../context/context");

var _NonRecordingSpan = require("./NonRecordingSpan");

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * span key
 */
var SPAN_KEY = (0, _context.createContextKey)('OpenTelemetry Context Key SPAN');
/**
 * Return the span if one exists
 *
 * @param context context to get span from
 */

function getSpan(context) {
  return context.getValue(SPAN_KEY) || undefined;
}
/**
 * Set the span on a context
 *
 * @param context context to use as parent
 * @param span span to set active
 */


function setSpan(context, span) {
  return context.setValue(SPAN_KEY, span);
}
/**
 * Remove current span stored in the context
 *
 * @param context context to delete span from
 */


function deleteSpan(context) {
  return context.deleteValue(SPAN_KEY);
}
/**
 * Wrap span context in a NoopSpan and set as span in a new
 * context
 *
 * @param context context to set active span on
 * @param spanContext span context to be wrapped
 */


function setSpanContext(context, spanContext) {
  return setSpan(context, new _NonRecordingSpan.NonRecordingSpan(spanContext));
}
/**
 * Get the span context of the span if it exists.
 *
 * @param context context to get values from
 */


function getSpanContext(context) {
  var _a;

  return (_a = getSpan(context)) === null || _a === void 0 ? void 0 : _a.spanContext();
}
},{"../context/context":"node_modules/@opentelemetry/api/build/esm/context/context.js","./NonRecordingSpan":"node_modules/@opentelemetry/api/build/esm/trace/NonRecordingSpan.js"}],"node_modules/@opentelemetry/api/build/esm/trace/spancontext-utils.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isSpanContextValid = isSpanContextValid;
exports.isValidSpanId = isValidSpanId;
exports.isValidTraceId = isValidTraceId;
exports.wrapSpanContext = wrapSpanContext;

var _invalidSpanConstants = require("./invalid-span-constants");

var _NonRecordingSpan = require("./NonRecordingSpan");

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var VALID_TRACEID_REGEX = /^([0-9a-f]{32})$/i;
var VALID_SPANID_REGEX = /^[0-9a-f]{16}$/i;

function isValidTraceId(traceId) {
  return VALID_TRACEID_REGEX.test(traceId) && traceId !== _invalidSpanConstants.INVALID_TRACEID;
}

function isValidSpanId(spanId) {
  return VALID_SPANID_REGEX.test(spanId) && spanId !== _invalidSpanConstants.INVALID_SPANID;
}
/**
 * Returns true if this {@link SpanContext} is valid.
 * @return true if this {@link SpanContext} is valid.
 */


function isSpanContextValid(spanContext) {
  return isValidTraceId(spanContext.traceId) && isValidSpanId(spanContext.spanId);
}
/**
 * Wrap the given {@link SpanContext} in a new non-recording {@link Span}
 *
 * @param spanContext span context to be wrapped
 * @returns a new non-recording {@link Span} with the provided context
 */


function wrapSpanContext(spanContext) {
  return new _NonRecordingSpan.NonRecordingSpan(spanContext);
}
},{"./invalid-span-constants":"node_modules/@opentelemetry/api/build/esm/trace/invalid-span-constants.js","./NonRecordingSpan":"node_modules/@opentelemetry/api/build/esm/trace/NonRecordingSpan.js"}],"node_modules/@opentelemetry/api/build/esm/trace/NoopTracer.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NoopTracer = void 0;

var _context = require("../api/context");

var _contextUtils = require("../trace/context-utils");

var _NonRecordingSpan = require("./NonRecordingSpan");

var _spancontextUtils = require("./spancontext-utils");

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var context = _context.ContextAPI.getInstance();
/**
 * No-op implementations of {@link Tracer}.
 */


var NoopTracer =
/** @class */
function () {
  function NoopTracer() {} // startSpan starts a noop span.


  NoopTracer.prototype.startSpan = function (name, options, context) {
    var root = Boolean(options === null || options === void 0 ? void 0 : options.root);

    if (root) {
      return new _NonRecordingSpan.NonRecordingSpan();
    }

    var parentFromContext = context && (0, _contextUtils.getSpanContext)(context);

    if (isSpanContext(parentFromContext) && (0, _spancontextUtils.isSpanContextValid)(parentFromContext)) {
      return new _NonRecordingSpan.NonRecordingSpan(parentFromContext);
    } else {
      return new _NonRecordingSpan.NonRecordingSpan();
    }
  };

  NoopTracer.prototype.startActiveSpan = function (name, arg2, arg3, arg4) {
    var opts;
    var ctx;
    var fn;

    if (arguments.length < 2) {
      return;
    } else if (arguments.length === 2) {
      fn = arg2;
    } else if (arguments.length === 3) {
      opts = arg2;
      fn = arg3;
    } else {
      opts = arg2;
      ctx = arg3;
      fn = arg4;
    }

    var parentContext = ctx !== null && ctx !== void 0 ? ctx : context.active();
    var span = this.startSpan(name, opts, parentContext);
    var contextWithSpanSet = (0, _contextUtils.setSpan)(parentContext, span);
    return context.with(contextWithSpanSet, fn, undefined, span);
  };

  return NoopTracer;
}();

exports.NoopTracer = NoopTracer;

function isSpanContext(spanContext) {
  return _typeof(spanContext) === 'object' && typeof spanContext['spanId'] === 'string' && typeof spanContext['traceId'] === 'string' && typeof spanContext['traceFlags'] === 'number';
}
},{"../api/context":"node_modules/@opentelemetry/api/build/esm/api/context.js","../trace/context-utils":"node_modules/@opentelemetry/api/build/esm/trace/context-utils.js","./NonRecordingSpan":"node_modules/@opentelemetry/api/build/esm/trace/NonRecordingSpan.js","./spancontext-utils":"node_modules/@opentelemetry/api/build/esm/trace/spancontext-utils.js"}],"node_modules/@opentelemetry/api/build/esm/trace/ProxyTracer.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ProxyTracer = void 0;

var _NoopTracer = require("./NoopTracer");

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var NOOP_TRACER = new _NoopTracer.NoopTracer();
/**
 * Proxy tracer provided by the proxy tracer provider
 */

var ProxyTracer =
/** @class */
function () {
  function ProxyTracer(_provider, name, version) {
    this._provider = _provider;
    this.name = name;
    this.version = version;
  }

  ProxyTracer.prototype.startSpan = function (name, options, context) {
    return this._getTracer().startSpan(name, options, context);
  };

  ProxyTracer.prototype.startActiveSpan = function (_name, _options, _context, _fn) {
    var tracer = this._getTracer();

    return Reflect.apply(tracer.startActiveSpan, tracer, arguments);
  };
  /**
   * Try to get a tracer from the proxy tracer provider.
   * If the proxy tracer provider has no delegate, return a noop tracer.
   */


  ProxyTracer.prototype._getTracer = function () {
    if (this._delegate) {
      return this._delegate;
    }

    var tracer = this._provider.getDelegateTracer(this.name, this.version);

    if (!tracer) {
      return NOOP_TRACER;
    }

    this._delegate = tracer;
    return this._delegate;
  };

  return ProxyTracer;
}();

exports.ProxyTracer = ProxyTracer;
},{"./NoopTracer":"node_modules/@opentelemetry/api/build/esm/trace/NoopTracer.js"}],"node_modules/@opentelemetry/api/build/esm/trace/NoopTracerProvider.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NoopTracerProvider = void 0;

var _NoopTracer = require("./NoopTracer");

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * An implementation of the {@link TracerProvider} which returns an impotent
 * Tracer for all calls to `getTracer`.
 *
 * All operations are no-op.
 */
var NoopTracerProvider =
/** @class */
function () {
  function NoopTracerProvider() {}

  NoopTracerProvider.prototype.getTracer = function (_name, _version) {
    return new _NoopTracer.NoopTracer();
  };

  return NoopTracerProvider;
}();

exports.NoopTracerProvider = NoopTracerProvider;
},{"./NoopTracer":"node_modules/@opentelemetry/api/build/esm/trace/NoopTracer.js"}],"node_modules/@opentelemetry/api/build/esm/trace/ProxyTracerProvider.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ProxyTracerProvider = void 0;

var _ProxyTracer = require("./ProxyTracer");

var _NoopTracerProvider = require("./NoopTracerProvider");

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var NOOP_TRACER_PROVIDER = new _NoopTracerProvider.NoopTracerProvider();
/**
 * Tracer provider which provides {@link ProxyTracer}s.
 *
 * Before a delegate is set, tracers provided are NoOp.
 *   When a delegate is set, traces are provided from the delegate.
 *   When a delegate is set after tracers have already been provided,
 *   all tracers already provided will use the provided delegate implementation.
 */

var ProxyTracerProvider =
/** @class */
function () {
  function ProxyTracerProvider() {}
  /**
   * Get a {@link ProxyTracer}
   */


  ProxyTracerProvider.prototype.getTracer = function (name, version) {
    var _a;

    return (_a = this.getDelegateTracer(name, version)) !== null && _a !== void 0 ? _a : new _ProxyTracer.ProxyTracer(this, name, version);
  };

  ProxyTracerProvider.prototype.getDelegate = function () {
    var _a;

    return (_a = this._delegate) !== null && _a !== void 0 ? _a : NOOP_TRACER_PROVIDER;
  };
  /**
   * Set the delegate tracer provider
   */


  ProxyTracerProvider.prototype.setDelegate = function (delegate) {
    this._delegate = delegate;
  };

  ProxyTracerProvider.prototype.getDelegateTracer = function (name, version) {
    var _a;

    return (_a = this._delegate) === null || _a === void 0 ? void 0 : _a.getTracer(name, version);
  };

  return ProxyTracerProvider;
}();

exports.ProxyTracerProvider = ProxyTracerProvider;
},{"./ProxyTracer":"node_modules/@opentelemetry/api/build/esm/trace/ProxyTracer.js","./NoopTracerProvider":"node_modules/@opentelemetry/api/build/esm/trace/NoopTracerProvider.js"}],"node_modules/@opentelemetry/api/build/esm/trace/Sampler.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/@opentelemetry/api/build/esm/trace/SamplingResult.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SamplingDecision = void 0;

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * A sampling decision that determines how a {@link Span} will be recorded
 * and collected.
 */
var SamplingDecision;
exports.SamplingDecision = SamplingDecision;

(function (SamplingDecision) {
  /**
   * `Span.isRecording() === false`, span will not be recorded and all events
   * and attributes will be dropped.
   */
  SamplingDecision[SamplingDecision["NOT_RECORD"] = 0] = "NOT_RECORD";
  /**
   * `Span.isRecording() === true`, but `Sampled` flag in {@link TraceFlags}
   * MUST NOT be set.
   */

  SamplingDecision[SamplingDecision["RECORD"] = 1] = "RECORD";
  /**
   * `Span.isRecording() === true` AND `Sampled` flag in {@link TraceFlags}
   * MUST be set.
   */

  SamplingDecision[SamplingDecision["RECORD_AND_SAMPLED"] = 2] = "RECORD_AND_SAMPLED";
})(SamplingDecision || (exports.SamplingDecision = SamplingDecision = {}));
},{}],"node_modules/@opentelemetry/api/build/esm/trace/span_context.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/@opentelemetry/api/build/esm/trace/span_kind.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SpanKind = void 0;

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var SpanKind;
exports.SpanKind = SpanKind;

(function (SpanKind) {
  /** Default value. Indicates that the span is used internally. */
  SpanKind[SpanKind["INTERNAL"] = 0] = "INTERNAL";
  /**
   * Indicates that the span covers server-side handling of an RPC or other
   * remote request.
   */

  SpanKind[SpanKind["SERVER"] = 1] = "SERVER";
  /**
   * Indicates that the span covers the client-side wrapper around an RPC or
   * other remote request.
   */

  SpanKind[SpanKind["CLIENT"] = 2] = "CLIENT";
  /**
   * Indicates that the span describes producer sending a message to a
   * broker. Unlike client and server, there is no direct critical path latency
   * relationship between producer and consumer spans.
   */

  SpanKind[SpanKind["PRODUCER"] = 3] = "PRODUCER";
  /**
   * Indicates that the span describes consumer receiving a message from a
   * broker. Unlike client and server, there is no direct critical path latency
   * relationship between producer and consumer spans.
   */

  SpanKind[SpanKind["CONSUMER"] = 4] = "CONSUMER";
})(SpanKind || (exports.SpanKind = SpanKind = {}));
},{}],"node_modules/@opentelemetry/api/build/esm/trace/span.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/@opentelemetry/api/build/esm/trace/SpanOptions.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/@opentelemetry/api/build/esm/trace/status.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SpanStatusCode = void 0;

/**
 * An enumeration of status codes.
 */
var SpanStatusCode;
exports.SpanStatusCode = SpanStatusCode;

(function (SpanStatusCode) {
  /**
   * The default status.
   */
  SpanStatusCode[SpanStatusCode["UNSET"] = 0] = "UNSET";
  /**
   * The operation has been validated by an Application developer or
   * Operator to have completed successfully.
   */

  SpanStatusCode[SpanStatusCode["OK"] = 1] = "OK";
  /**
   * The operation contains an error.
   */

  SpanStatusCode[SpanStatusCode["ERROR"] = 2] = "ERROR";
})(SpanStatusCode || (exports.SpanStatusCode = SpanStatusCode = {}));
},{}],"node_modules/@opentelemetry/api/build/esm/trace/trace_state.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/@opentelemetry/api/build/esm/trace/tracer_provider.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/@opentelemetry/api/build/esm/trace/tracer.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/@opentelemetry/api/build/esm/context/types.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/@opentelemetry/api/build/esm/api/trace.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TraceAPI = void 0;

var _globalUtils = require("../internal/global-utils");

var _ProxyTracerProvider = require("../trace/ProxyTracerProvider");

var _spancontextUtils = require("../trace/spancontext-utils");

var _contextUtils = require("../trace/context-utils");

var _diag = require("./diag");

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var API_NAME = 'trace';
/**
 * Singleton object which represents the entry point to the OpenTelemetry Tracing API
 */

var TraceAPI =
/** @class */
function () {
  /** Empty private constructor prevents end users from constructing a new instance of the API */
  function TraceAPI() {
    this._proxyTracerProvider = new _ProxyTracerProvider.ProxyTracerProvider();
    this.wrapSpanContext = _spancontextUtils.wrapSpanContext;
    this.isSpanContextValid = _spancontextUtils.isSpanContextValid;
    this.deleteSpan = _contextUtils.deleteSpan;
    this.getSpan = _contextUtils.getSpan;
    this.getSpanContext = _contextUtils.getSpanContext;
    this.setSpan = _contextUtils.setSpan;
    this.setSpanContext = _contextUtils.setSpanContext;
  }
  /** Get the singleton instance of the Trace API */


  TraceAPI.getInstance = function () {
    if (!this._instance) {
      this._instance = new TraceAPI();
    }

    return this._instance;
  };
  /**
   * Set the current global tracer.
   *
   * @returns true if the tracer provider was successfully registered, else false
   */


  TraceAPI.prototype.setGlobalTracerProvider = function (provider) {
    var success = (0, _globalUtils.registerGlobal)(API_NAME, this._proxyTracerProvider, _diag.DiagAPI.instance());

    if (success) {
      this._proxyTracerProvider.setDelegate(provider);
    }

    return success;
  };
  /**
   * Returns the global tracer provider.
   */


  TraceAPI.prototype.getTracerProvider = function () {
    return (0, _globalUtils.getGlobal)(API_NAME) || this._proxyTracerProvider;
  };
  /**
   * Returns a tracer from the global tracer provider.
   */


  TraceAPI.prototype.getTracer = function (name, version) {
    return this.getTracerProvider().getTracer(name, version);
  };
  /** Remove the global tracer provider */


  TraceAPI.prototype.disable = function () {
    (0, _globalUtils.unregisterGlobal)(API_NAME, _diag.DiagAPI.instance());
    this._proxyTracerProvider = new _ProxyTracerProvider.ProxyTracerProvider();
  };

  return TraceAPI;
}();

exports.TraceAPI = TraceAPI;
},{"../internal/global-utils":"node_modules/@opentelemetry/api/build/esm/internal/global-utils.js","../trace/ProxyTracerProvider":"node_modules/@opentelemetry/api/build/esm/trace/ProxyTracerProvider.js","../trace/spancontext-utils":"node_modules/@opentelemetry/api/build/esm/trace/spancontext-utils.js","../trace/context-utils":"node_modules/@opentelemetry/api/build/esm/trace/context-utils.js","./diag":"node_modules/@opentelemetry/api/build/esm/api/diag.js"}],"node_modules/@opentelemetry/api/build/esm/propagation/NoopTextMapPropagator.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NoopTextMapPropagator = void 0;

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * No-op implementations of {@link TextMapPropagator}.
 */
var NoopTextMapPropagator =
/** @class */
function () {
  function NoopTextMapPropagator() {}
  /** Noop inject function does nothing */


  NoopTextMapPropagator.prototype.inject = function (_context, _carrier) {};
  /** Noop extract function does nothing and returns the input context */


  NoopTextMapPropagator.prototype.extract = function (context, _carrier) {
    return context;
  };

  NoopTextMapPropagator.prototype.fields = function () {
    return [];
  };

  return NoopTextMapPropagator;
}();

exports.NoopTextMapPropagator = NoopTextMapPropagator;
},{}],"node_modules/@opentelemetry/api/build/esm/baggage/context-helpers.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.deleteBaggage = deleteBaggage;
exports.getBaggage = getBaggage;
exports.setBaggage = setBaggage;

var _context = require("../context/context");

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Baggage key
 */
var BAGGAGE_KEY = (0, _context.createContextKey)('OpenTelemetry Baggage Key');
/**
 * Retrieve the current baggage from the given context
 *
 * @param {Context} Context that manage all context values
 * @returns {Baggage} Extracted baggage from the context
 */

function getBaggage(context) {
  return context.getValue(BAGGAGE_KEY) || undefined;
}
/**
 * Store a baggage in the given context
 *
 * @param {Context} Context that manage all context values
 * @param {Baggage} baggage that will be set in the actual context
 */


function setBaggage(context, baggage) {
  return context.setValue(BAGGAGE_KEY, baggage);
}
/**
 * Delete the baggage stored in the given context
 *
 * @param {Context} Context that manage all context values
 */


function deleteBaggage(context) {
  return context.deleteValue(BAGGAGE_KEY);
}
},{"../context/context":"node_modules/@opentelemetry/api/build/esm/context/context.js"}],"node_modules/@opentelemetry/api/build/esm/api/propagation.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PropagationAPI = void 0;

var _globalUtils = require("../internal/global-utils");

var _NoopTextMapPropagator = require("../propagation/NoopTextMapPropagator");

var _TextMapPropagator = require("../propagation/TextMapPropagator");

var _contextHelpers = require("../baggage/context-helpers");

var _utils = require("../baggage/utils");

var _diag = require("./diag");

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var API_NAME = 'propagation';
var NOOP_TEXT_MAP_PROPAGATOR = new _NoopTextMapPropagator.NoopTextMapPropagator();
/**
 * Singleton object which represents the entry point to the OpenTelemetry Propagation API
 */

var PropagationAPI =
/** @class */
function () {
  /** Empty private constructor prevents end users from constructing a new instance of the API */
  function PropagationAPI() {
    this.createBaggage = _utils.createBaggage;
    this.getBaggage = _contextHelpers.getBaggage;
    this.setBaggage = _contextHelpers.setBaggage;
    this.deleteBaggage = _contextHelpers.deleteBaggage;
  }
  /** Get the singleton instance of the Propagator API */


  PropagationAPI.getInstance = function () {
    if (!this._instance) {
      this._instance = new PropagationAPI();
    }

    return this._instance;
  };
  /**
   * Set the current propagator.
   *
   * @returns true if the propagator was successfully registered, else false
   */


  PropagationAPI.prototype.setGlobalPropagator = function (propagator) {
    return (0, _globalUtils.registerGlobal)(API_NAME, propagator, _diag.DiagAPI.instance());
  };
  /**
   * Inject context into a carrier to be propagated inter-process
   *
   * @param context Context carrying tracing data to inject
   * @param carrier carrier to inject context into
   * @param setter Function used to set values on the carrier
   */


  PropagationAPI.prototype.inject = function (context, carrier, setter) {
    if (setter === void 0) {
      setter = _TextMapPropagator.defaultTextMapSetter;
    }

    return this._getGlobalPropagator().inject(context, carrier, setter);
  };
  /**
   * Extract context from a carrier
   *
   * @param context Context which the newly created context will inherit from
   * @param carrier Carrier to extract context from
   * @param getter Function used to extract keys from a carrier
   */


  PropagationAPI.prototype.extract = function (context, carrier, getter) {
    if (getter === void 0) {
      getter = _TextMapPropagator.defaultTextMapGetter;
    }

    return this._getGlobalPropagator().extract(context, carrier, getter);
  };
  /**
   * Return a list of all fields which may be used by the propagator.
   */


  PropagationAPI.prototype.fields = function () {
    return this._getGlobalPropagator().fields();
  };
  /** Remove the global propagator */


  PropagationAPI.prototype.disable = function () {
    (0, _globalUtils.unregisterGlobal)(API_NAME, _diag.DiagAPI.instance());
  };

  PropagationAPI.prototype._getGlobalPropagator = function () {
    return (0, _globalUtils.getGlobal)(API_NAME) || NOOP_TEXT_MAP_PROPAGATOR;
  };

  return PropagationAPI;
}();

exports.PropagationAPI = PropagationAPI;
},{"../internal/global-utils":"node_modules/@opentelemetry/api/build/esm/internal/global-utils.js","../propagation/NoopTextMapPropagator":"node_modules/@opentelemetry/api/build/esm/propagation/NoopTextMapPropagator.js","../propagation/TextMapPropagator":"node_modules/@opentelemetry/api/build/esm/propagation/TextMapPropagator.js","../baggage/context-helpers":"node_modules/@opentelemetry/api/build/esm/baggage/context-helpers.js","../baggage/utils":"node_modules/@opentelemetry/api/build/esm/baggage/utils.js","./diag":"node_modules/@opentelemetry/api/build/esm/api/diag.js"}],"node_modules/@opentelemetry/api/build/esm/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _exportNames = {
  context: true,
  trace: true,
  propagation: true,
  diag: true,
  baggageEntryMetadataFromString: true,
  isSpanContextValid: true,
  isValidTraceId: true,
  isValidSpanId: true,
  INVALID_SPANID: true,
  INVALID_TRACEID: true,
  INVALID_SPAN_CONTEXT: true
};
Object.defineProperty(exports, "INVALID_SPANID", {
  enumerable: true,
  get: function () {
    return _invalidSpanConstants.INVALID_SPANID;
  }
});
Object.defineProperty(exports, "INVALID_SPAN_CONTEXT", {
  enumerable: true,
  get: function () {
    return _invalidSpanConstants.INVALID_SPAN_CONTEXT;
  }
});
Object.defineProperty(exports, "INVALID_TRACEID", {
  enumerable: true,
  get: function () {
    return _invalidSpanConstants.INVALID_TRACEID;
  }
});
Object.defineProperty(exports, "baggageEntryMetadataFromString", {
  enumerable: true,
  get: function () {
    return _utils.baggageEntryMetadataFromString;
  }
});
exports.diag = exports.default = exports.context = void 0;
Object.defineProperty(exports, "isSpanContextValid", {
  enumerable: true,
  get: function () {
    return _spancontextUtils.isSpanContextValid;
  }
});
Object.defineProperty(exports, "isValidSpanId", {
  enumerable: true,
  get: function () {
    return _spancontextUtils.isValidSpanId;
  }
});
Object.defineProperty(exports, "isValidTraceId", {
  enumerable: true,
  get: function () {
    return _spancontextUtils.isValidTraceId;
  }
});
exports.trace = exports.propagation = void 0;

var _types = require("./baggage/types");

Object.keys(_types).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _types[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _types[key];
    }
  });
});

var _utils = require("./baggage/utils");

var _Exception = require("./common/Exception");

Object.keys(_Exception).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _Exception[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _Exception[key];
    }
  });
});

var _Time = require("./common/Time");

Object.keys(_Time).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _Time[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _Time[key];
    }
  });
});

var _diag = require("./diag");

Object.keys(_diag).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _diag[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _diag[key];
    }
  });
});

var _TextMapPropagator = require("./propagation/TextMapPropagator");

Object.keys(_TextMapPropagator).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _TextMapPropagator[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _TextMapPropagator[key];
    }
  });
});

var _attributes = require("./trace/attributes");

Object.keys(_attributes).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _attributes[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _attributes[key];
    }
  });
});

var _link = require("./trace/link");

Object.keys(_link).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _link[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _link[key];
    }
  });
});

var _ProxyTracer = require("./trace/ProxyTracer");

Object.keys(_ProxyTracer).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _ProxyTracer[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _ProxyTracer[key];
    }
  });
});

var _ProxyTracerProvider = require("./trace/ProxyTracerProvider");

Object.keys(_ProxyTracerProvider).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _ProxyTracerProvider[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _ProxyTracerProvider[key];
    }
  });
});

var _Sampler = require("./trace/Sampler");

Object.keys(_Sampler).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _Sampler[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _Sampler[key];
    }
  });
});

var _SamplingResult = require("./trace/SamplingResult");

Object.keys(_SamplingResult).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _SamplingResult[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _SamplingResult[key];
    }
  });
});

var _span_context = require("./trace/span_context");

Object.keys(_span_context).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _span_context[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _span_context[key];
    }
  });
});

var _span_kind = require("./trace/span_kind");

Object.keys(_span_kind).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _span_kind[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _span_kind[key];
    }
  });
});

var _span = require("./trace/span");

Object.keys(_span).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _span[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _span[key];
    }
  });
});

var _SpanOptions = require("./trace/SpanOptions");

Object.keys(_SpanOptions).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _SpanOptions[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _SpanOptions[key];
    }
  });
});

var _status = require("./trace/status");

Object.keys(_status).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _status[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _status[key];
    }
  });
});

var _trace_flags = require("./trace/trace_flags");

Object.keys(_trace_flags).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _trace_flags[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _trace_flags[key];
    }
  });
});

var _trace_state = require("./trace/trace_state");

Object.keys(_trace_state).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _trace_state[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _trace_state[key];
    }
  });
});

var _tracer_provider = require("./trace/tracer_provider");

Object.keys(_tracer_provider).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _tracer_provider[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _tracer_provider[key];
    }
  });
});

var _tracer = require("./trace/tracer");

Object.keys(_tracer).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _tracer[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _tracer[key];
    }
  });
});

var _spancontextUtils = require("./trace/spancontext-utils");

var _invalidSpanConstants = require("./trace/invalid-span-constants");

var _context = require("./context/context");

Object.keys(_context).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _context[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _context[key];
    }
  });
});

var _types2 = require("./context/types");

Object.keys(_types2).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _types2[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _types2[key];
    }
  });
});

var _context2 = require("./api/context");

var _trace = require("./api/trace");

var _propagation = require("./api/propagation");

var _diag2 = require("./api/diag");

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/** Entrypoint for context API */
var context = _context2.ContextAPI.getInstance();

exports.context = context;

/** Entrypoint for trace API */
var trace = _trace.TraceAPI.getInstance();

exports.trace = trace;

/** Entrypoint for propagation API */
var propagation = _propagation.PropagationAPI.getInstance();

exports.propagation = propagation;

/**
 * Entrypoint for Diag API.
 * Defines Diagnostic handler used for internal diagnostic logging operations.
 * The default provides a Noop DiagLogger implementation which may be changed via the
 * diag.setLogger(logger: DiagLogger) function.
 */
var diag = _diag2.DiagAPI.instance();

exports.diag = diag;
var _default = {
  trace: trace,
  context: context,
  propagation: propagation,
  diag: diag
};
exports.default = _default;
},{"./baggage/types":"node_modules/@opentelemetry/api/build/esm/baggage/types.js","./baggage/utils":"node_modules/@opentelemetry/api/build/esm/baggage/utils.js","./common/Exception":"node_modules/@opentelemetry/api/build/esm/common/Exception.js","./common/Time":"node_modules/@opentelemetry/api/build/esm/common/Time.js","./diag":"node_modules/@opentelemetry/api/build/esm/diag/index.js","./propagation/TextMapPropagator":"node_modules/@opentelemetry/api/build/esm/propagation/TextMapPropagator.js","./trace/attributes":"node_modules/@opentelemetry/api/build/esm/trace/attributes.js","./trace/link":"node_modules/@opentelemetry/api/build/esm/trace/link.js","./trace/ProxyTracer":"node_modules/@opentelemetry/api/build/esm/trace/ProxyTracer.js","./trace/ProxyTracerProvider":"node_modules/@opentelemetry/api/build/esm/trace/ProxyTracerProvider.js","./trace/Sampler":"node_modules/@opentelemetry/api/build/esm/trace/Sampler.js","./trace/SamplingResult":"node_modules/@opentelemetry/api/build/esm/trace/SamplingResult.js","./trace/span_context":"node_modules/@opentelemetry/api/build/esm/trace/span_context.js","./trace/span_kind":"node_modules/@opentelemetry/api/build/esm/trace/span_kind.js","./trace/span":"node_modules/@opentelemetry/api/build/esm/trace/span.js","./trace/SpanOptions":"node_modules/@opentelemetry/api/build/esm/trace/SpanOptions.js","./trace/status":"node_modules/@opentelemetry/api/build/esm/trace/status.js","./trace/trace_flags":"node_modules/@opentelemetry/api/build/esm/trace/trace_flags.js","./trace/trace_state":"node_modules/@opentelemetry/api/build/esm/trace/trace_state.js","./trace/tracer_provider":"node_modules/@opentelemetry/api/build/esm/trace/tracer_provider.js","./trace/tracer":"node_modules/@opentelemetry/api/build/esm/trace/tracer.js","./trace/spancontext-utils":"node_modules/@opentelemetry/api/build/esm/trace/spancontext-utils.js","./trace/invalid-span-constants":"node_modules/@opentelemetry/api/build/esm/trace/invalid-span-constants.js","./context/context":"node_modules/@opentelemetry/api/build/esm/context/context.js","./context/types":"node_modules/@opentelemetry/api/build/esm/context/types.js","./api/context":"node_modules/@opentelemetry/api/build/esm/api/context.js","./api/trace":"node_modules/@opentelemetry/api/build/esm/api/trace.js","./api/propagation":"node_modules/@opentelemetry/api/build/esm/api/propagation.js","./api/diag":"node_modules/@opentelemetry/api/build/esm/api/diag.js"}],"output/OpenTelemetry.API.Span/foreign.js":[function(require,module,exports) {
"use strict";

var opentelemetry = require("@opentelemetry/api");

exports.addEvent = function (span) {
  return function (name) {
    return function () {
      return span.addEvent(name);
    };
  };
};

exports.end = function (span) {
  return function () {
    return span.end();
  };
};

exports.isRecording = function (span) {
  return function () {
    return span.isRecording();
  };
};

exports.setAttribute = function (span) {
  return function (key) {
    return function (value) {
      return function () {
        return span.setAttribute(key, value);
      };
    };
  };
};
},{"@opentelemetry/api":"node_modules/@opentelemetry/api/build/esm/index.js"}],"output/OpenTelemetry.API.Span/index.js":[function(require,module,exports) {
// Generated by purs version 0.14.5
"use strict";

var $foreign = require("./foreign.js");

var UNSET = function () {
  function UNSET() {}

  ;
  UNSET.value = new UNSET();
  return UNSET;
}();

var OK = function () {
  function OK() {}

  ;
  OK.value = new OK();
  return OK;
}();

var ERROR = function () {
  function ERROR() {}

  ;
  ERROR.value = new ERROR();
  return ERROR;
}();

module.exports = {
  UNSET: UNSET,
  OK: OK,
  ERROR: ERROR,
  addEvent: $foreign.addEvent,
  end: $foreign.end,
  isRecording: $foreign.isRecording,
  setAttribute: $foreign.setAttribute
};
},{"./foreign.js":"output/OpenTelemetry.API.Span/foreign.js"}],"output/OpenTelemetry.API.Tracer/foreign.js":[function(require,module,exports) {
"use strict";

var _this = this;

var opentelemetry = require("@opentelemetry/api");

exports.startSpan = function (tracer) {
  return function (name) {
    return function () {
      return tracer.startSpan(name);
    };
  };
};

exports.startActiveSpan = function (_monad) {
  return function (tracer) {
    return function (spanName) {
      return function (func) {
        return function () {
          tracer.startActiveSpan(spanName, function (span) {
            var result = func.call(_this, span)();
            span.end();
            return result;
          });
        };
      };
    };
  };
};
},{"@opentelemetry/api":"node_modules/@opentelemetry/api/build/esm/index.js"}],"output/OpenTelemetry.API.Tracer/index.js":[function(require,module,exports) {
// Generated by purs version 0.14.5
"use strict";

var $foreign = require("./foreign.js");

module.exports = {
  startSpan: $foreign.startSpan,
  startActiveSpan: $foreign.startActiveSpan
};
},{"./foreign.js":"output/OpenTelemetry.API.Tracer/foreign.js"}],"node_modules/@opentelemetry/api-metrics/build/esm/NoopMeter.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NoopValueRecorderMetric = exports.NoopMetric = exports.NoopMeter = exports.NoopCounterMetric = exports.NoopBoundValueRecorder = exports.NoopBoundCounter = exports.NoopBoundBaseObserver = exports.NoopBatchObserver = exports.NoopBaseObserverMetric = exports.NOOP_VALUE_RECORDER_METRIC = exports.NOOP_VALUE_OBSERVER_METRIC = exports.NOOP_UP_DOWN_SUM_OBSERVER_METRIC = exports.NOOP_SUM_OBSERVER_METRIC = exports.NOOP_METER = exports.NOOP_COUNTER_METRIC = exports.NOOP_BOUND_VALUE_RECORDER = exports.NOOP_BOUND_COUNTER = exports.NOOP_BOUND_BASE_OBSERVER = exports.NOOP_BATCH_OBSERVER = void 0;

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __extends = void 0 && (void 0).__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) {
        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
      }
    };

    return _extendStatics(d, b);
  };

  return function (d, b) {
    if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");

    _extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
/**
 * NoopMeter is a noop implementation of the {@link Meter} interface. It reuses
 * constant NoopMetrics for all of its methods.
 */


var NoopMeter =
/** @class */
function () {
  function NoopMeter() {}
  /**
   * Returns constant noop value recorder.
   * @param name the name of the metric.
   * @param [options] the metric options.
   */


  NoopMeter.prototype.createValueRecorder = function (_name, _options) {
    return NOOP_VALUE_RECORDER_METRIC;
  };
  /**
   * Returns a constant noop counter.
   * @param name the name of the metric.
   * @param [options] the metric options.
   */


  NoopMeter.prototype.createCounter = function (_name, _options) {
    return NOOP_COUNTER_METRIC;
  };
  /**
   * Returns a constant noop UpDownCounter.
   * @param name the name of the metric.
   * @param [options] the metric options.
   */


  NoopMeter.prototype.createUpDownCounter = function (_name, _options) {
    return NOOP_COUNTER_METRIC;
  };
  /**
   * Returns constant noop value observer.
   * @param name the name of the metric.
   * @param [options] the metric options.
   * @param [callback] the value observer callback
   */


  NoopMeter.prototype.createValueObserver = function (_name, _options, _callback) {
    return NOOP_VALUE_OBSERVER_METRIC;
  };
  /**
   * Returns constant noop sum observer.
   * @param name the name of the metric.
   * @param [options] the metric options.
   * @param [callback] the sum observer callback
   */


  NoopMeter.prototype.createSumObserver = function (_name, _options, _callback) {
    return NOOP_SUM_OBSERVER_METRIC;
  };
  /**
   * Returns constant noop up down sum observer.
   * @param name the name of the metric.
   * @param [options] the metric options.
   * @param [callback] the up down sum observer callback
   */


  NoopMeter.prototype.createUpDownSumObserver = function (_name, _options, _callback) {
    return NOOP_UP_DOWN_SUM_OBSERVER_METRIC;
  };
  /**
   * Returns constant noop batch observer.
   * @param name the name of the metric.
   * @param callback the batch observer callback
   */


  NoopMeter.prototype.createBatchObserver = function (_callback) {
    return NOOP_BATCH_OBSERVER;
  };

  return NoopMeter;
}();

exports.NoopMeter = NoopMeter;

var NoopMetric =
/** @class */
function () {
  function NoopMetric(instrument) {
    this._instrument = instrument;
  }
  /**
   * Returns a Bound Instrument associated with specified Labels.
   * It is recommended to keep a reference to the Bound Instrument instead of
   * always calling this method for every operations.
   * @param labels key-values pairs that are associated with a specific metric
   *     that you want to record.
   */


  NoopMetric.prototype.bind = function (_labels) {
    return this._instrument;
  };
  /**
   * Removes the Binding from the metric, if it is present.
   * @param labels key-values pairs that are associated with a specific metric.
   */


  NoopMetric.prototype.unbind = function (_labels) {
    return;
  };
  /**
   * Clears all timeseries from the Metric.
   */


  NoopMetric.prototype.clear = function () {
    return;
  };

  return NoopMetric;
}();

exports.NoopMetric = NoopMetric;

var NoopCounterMetric =
/** @class */
function (_super) {
  __extends(NoopCounterMetric, _super);

  function NoopCounterMetric() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  NoopCounterMetric.prototype.add = function (value, labels) {
    this.bind(labels).add(value);
  };

  return NoopCounterMetric;
}(NoopMetric);

exports.NoopCounterMetric = NoopCounterMetric;

var NoopValueRecorderMetric =
/** @class */
function (_super) {
  __extends(NoopValueRecorderMetric, _super);

  function NoopValueRecorderMetric() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  NoopValueRecorderMetric.prototype.record = function (value, labels) {
    this.bind(labels).record(value);
  };

  return NoopValueRecorderMetric;
}(NoopMetric);

exports.NoopValueRecorderMetric = NoopValueRecorderMetric;

var NoopBaseObserverMetric =
/** @class */
function (_super) {
  __extends(NoopBaseObserverMetric, _super);

  function NoopBaseObserverMetric() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  NoopBaseObserverMetric.prototype.observation = function () {
    return {
      observer: this,
      value: 0
    };
  };

  return NoopBaseObserverMetric;
}(NoopMetric);

exports.NoopBaseObserverMetric = NoopBaseObserverMetric;

var NoopBatchObserver =
/** @class */
function () {
  function NoopBatchObserver() {}

  return NoopBatchObserver;
}();

exports.NoopBatchObserver = NoopBatchObserver;

var NoopBoundCounter =
/** @class */
function () {
  function NoopBoundCounter() {}

  NoopBoundCounter.prototype.add = function (_value) {
    return;
  };

  return NoopBoundCounter;
}();

exports.NoopBoundCounter = NoopBoundCounter;

var NoopBoundValueRecorder =
/** @class */
function () {
  function NoopBoundValueRecorder() {}

  NoopBoundValueRecorder.prototype.record = function (_value, _baggage, _spanContext) {
    return;
  };

  return NoopBoundValueRecorder;
}();

exports.NoopBoundValueRecorder = NoopBoundValueRecorder;

var NoopBoundBaseObserver =
/** @class */
function () {
  function NoopBoundBaseObserver() {}

  NoopBoundBaseObserver.prototype.update = function (_value) {};

  return NoopBoundBaseObserver;
}();

exports.NoopBoundBaseObserver = NoopBoundBaseObserver;
var NOOP_METER = new NoopMeter();
exports.NOOP_METER = NOOP_METER;
var NOOP_BOUND_COUNTER = new NoopBoundCounter();
exports.NOOP_BOUND_COUNTER = NOOP_BOUND_COUNTER;
var NOOP_COUNTER_METRIC = new NoopCounterMetric(NOOP_BOUND_COUNTER);
exports.NOOP_COUNTER_METRIC = NOOP_COUNTER_METRIC;
var NOOP_BOUND_VALUE_RECORDER = new NoopBoundValueRecorder();
exports.NOOP_BOUND_VALUE_RECORDER = NOOP_BOUND_VALUE_RECORDER;
var NOOP_VALUE_RECORDER_METRIC = new NoopValueRecorderMetric(NOOP_BOUND_VALUE_RECORDER);
exports.NOOP_VALUE_RECORDER_METRIC = NOOP_VALUE_RECORDER_METRIC;
var NOOP_BOUND_BASE_OBSERVER = new NoopBoundBaseObserver();
exports.NOOP_BOUND_BASE_OBSERVER = NOOP_BOUND_BASE_OBSERVER;
var NOOP_VALUE_OBSERVER_METRIC = new NoopBaseObserverMetric(NOOP_BOUND_BASE_OBSERVER);
exports.NOOP_VALUE_OBSERVER_METRIC = NOOP_VALUE_OBSERVER_METRIC;
var NOOP_UP_DOWN_SUM_OBSERVER_METRIC = new NoopBaseObserverMetric(NOOP_BOUND_BASE_OBSERVER);
exports.NOOP_UP_DOWN_SUM_OBSERVER_METRIC = NOOP_UP_DOWN_SUM_OBSERVER_METRIC;
var NOOP_SUM_OBSERVER_METRIC = new NoopBaseObserverMetric(NOOP_BOUND_BASE_OBSERVER);
exports.NOOP_SUM_OBSERVER_METRIC = NOOP_SUM_OBSERVER_METRIC;
var NOOP_BATCH_OBSERVER = new NoopBatchObserver();
exports.NOOP_BATCH_OBSERVER = NOOP_BATCH_OBSERVER;
},{}],"node_modules/@opentelemetry/api-metrics/build/esm/NoopMeterProvider.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NoopMeterProvider = exports.NOOP_METER_PROVIDER = void 0;

var _NoopMeter = require("./NoopMeter");

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * An implementation of the {@link MeterProvider} which returns an impotent Meter
 * for all calls to `getMeter`
 */
var NoopMeterProvider =
/** @class */
function () {
  function NoopMeterProvider() {}

  NoopMeterProvider.prototype.getMeter = function (_name, _version) {
    return _NoopMeter.NOOP_METER;
  };

  return NoopMeterProvider;
}();

exports.NoopMeterProvider = NoopMeterProvider;
var NOOP_METER_PROVIDER = new NoopMeterProvider();
exports.NOOP_METER_PROVIDER = NOOP_METER_PROVIDER;
},{"./NoopMeter":"node_modules/@opentelemetry/api-metrics/build/esm/NoopMeter.js"}],"node_modules/@opentelemetry/api-metrics/build/esm/types/BatchObserverResult.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/@opentelemetry/api-metrics/build/esm/types/BoundInstrument.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/@opentelemetry/api-metrics/build/esm/types/Meter.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/@opentelemetry/api-metrics/build/esm/types/MeterProvider.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/@opentelemetry/api-metrics/build/esm/types/Metric.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ValueType = exports.AggregationTemporality = void 0;

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/** The Type of value. It describes how the data is reported. */
var ValueType;
exports.ValueType = ValueType;

(function (ValueType) {
  ValueType[ValueType["INT"] = 0] = "INT";
  ValueType[ValueType["DOUBLE"] = 1] = "DOUBLE";
})(ValueType || (exports.ValueType = ValueType = {}));
/** The kind of aggregator. */


var AggregationTemporality;
exports.AggregationTemporality = AggregationTemporality;

(function (AggregationTemporality) {
  AggregationTemporality[AggregationTemporality["AGGREGATION_TEMPORALITY_UNSPECIFIED"] = 0] = "AGGREGATION_TEMPORALITY_UNSPECIFIED";
  AggregationTemporality[AggregationTemporality["AGGREGATION_TEMPORALITY_DELTA"] = 1] = "AGGREGATION_TEMPORALITY_DELTA";
  AggregationTemporality[AggregationTemporality["AGGREGATION_TEMPORALITY_CUMULATIVE"] = 2] = "AGGREGATION_TEMPORALITY_CUMULATIVE";
})(AggregationTemporality || (exports.AggregationTemporality = AggregationTemporality = {}));
},{}],"node_modules/@opentelemetry/api-metrics/build/esm/types/Observation.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/@opentelemetry/api-metrics/build/esm/types/ObserverResult.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/@opentelemetry/api-metrics/build/esm/platform/browser/globalThis.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports._globalThis = void 0;

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/** only globals that common to node and browsers are allowed */
// eslint-disable-next-line node/no-unsupported-features/es-builtins, no-undef
var _globalThis = (typeof globalThis === "undefined" ? "undefined" : _typeof(globalThis)) === 'object' ? globalThis : window;

exports._globalThis = _globalThis;
},{}],"node_modules/@opentelemetry/api-metrics/build/esm/platform/browser/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _globalThis = require("./globalThis");

Object.keys(_globalThis).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _globalThis[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _globalThis[key];
    }
  });
});
},{"./globalThis":"node_modules/@opentelemetry/api-metrics/build/esm/platform/browser/globalThis.js"}],"node_modules/@opentelemetry/api-metrics/build/esm/api/global-utils.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports._global = exports.GLOBAL_METRICS_API_KEY = exports.API_BACKWARDS_COMPATIBILITY_VERSION = void 0;
exports.makeGetter = makeGetter;

var _platform = require("../platform");

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var GLOBAL_METRICS_API_KEY = Symbol.for('io.opentelemetry.js.api.metrics');
exports.GLOBAL_METRICS_API_KEY = GLOBAL_METRICS_API_KEY;
var _global = _platform._globalThis;
/**
 * Make a function which accepts a version integer and returns the instance of an API if the version
 * is compatible, or a fallback version (usually NOOP) if it is not.
 *
 * @param requiredVersion Backwards compatibility version which is required to return the instance
 * @param instance Instance which should be returned if the required version is compatible
 * @param fallback Fallback instance, usually NOOP, which will be returned if the required version is not compatible
 */

exports._global = _global;

function makeGetter(requiredVersion, instance, fallback) {
  return function (version) {
    return version === requiredVersion ? instance : fallback;
  };
}
/**
 * A number which should be incremented each time a backwards incompatible
 * change is made to the API. This number is used when an API package
 * attempts to access the global API to ensure it is getting a compatible
 * version. If the global API is not compatible with the API package
 * attempting to get it, a NOOP API implementation will be returned.
 */


var API_BACKWARDS_COMPATIBILITY_VERSION = 3;
exports.API_BACKWARDS_COMPATIBILITY_VERSION = API_BACKWARDS_COMPATIBILITY_VERSION;
},{"../platform":"node_modules/@opentelemetry/api-metrics/build/esm/platform/browser/index.js"}],"node_modules/@opentelemetry/api-metrics/build/esm/api/metrics.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MetricsAPI = void 0;

var _NoopMeterProvider = require("../NoopMeterProvider");

var _globalUtils = require("./global-utils");

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Singleton object which represents the entry point to the OpenTelemetry Metrics API
 */
var MetricsAPI =
/** @class */
function () {
  /** Empty private constructor prevents end users from constructing a new instance of the API */
  function MetricsAPI() {}
  /** Get the singleton instance of the Metrics API */


  MetricsAPI.getInstance = function () {
    if (!this._instance) {
      this._instance = new MetricsAPI();
    }

    return this._instance;
  };
  /**
   * Set the current global meter. Returns the initialized global meter provider.
   */


  MetricsAPI.prototype.setGlobalMeterProvider = function (provider) {
    if (_globalUtils._global[_globalUtils.GLOBAL_METRICS_API_KEY]) {
      // global meter provider has already been set
      return this.getMeterProvider();
    }

    _globalUtils._global[_globalUtils.GLOBAL_METRICS_API_KEY] = (0, _globalUtils.makeGetter)(_globalUtils.API_BACKWARDS_COMPATIBILITY_VERSION, provider, _NoopMeterProvider.NOOP_METER_PROVIDER);
    return provider;
  };
  /**
   * Returns the global meter provider.
   */


  MetricsAPI.prototype.getMeterProvider = function () {
    var _a, _b;

    return (_b = (_a = _globalUtils._global[_globalUtils.GLOBAL_METRICS_API_KEY]) === null || _a === void 0 ? void 0 : _a.call(_globalUtils._global, _globalUtils.API_BACKWARDS_COMPATIBILITY_VERSION)) !== null && _b !== void 0 ? _b : _NoopMeterProvider.NOOP_METER_PROVIDER;
  };
  /**
   * Returns a meter from the global meter provider.
   */


  MetricsAPI.prototype.getMeter = function (name, version) {
    return this.getMeterProvider().getMeter(name, version);
  };
  /** Remove the global meter provider */


  MetricsAPI.prototype.disable = function () {
    delete _globalUtils._global[_globalUtils.GLOBAL_METRICS_API_KEY];
  };

  return MetricsAPI;
}();

exports.MetricsAPI = MetricsAPI;
},{"../NoopMeterProvider":"node_modules/@opentelemetry/api-metrics/build/esm/NoopMeterProvider.js","./global-utils":"node_modules/@opentelemetry/api-metrics/build/esm/api/global-utils.js"}],"node_modules/@opentelemetry/api-metrics/build/esm/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _exportNames = {
  metrics: true
};
exports.metrics = void 0;

var _NoopMeter = require("./NoopMeter");

Object.keys(_NoopMeter).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _NoopMeter[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _NoopMeter[key];
    }
  });
});

var _NoopMeterProvider = require("./NoopMeterProvider");

Object.keys(_NoopMeterProvider).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _NoopMeterProvider[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _NoopMeterProvider[key];
    }
  });
});

var _BatchObserverResult = require("./types/BatchObserverResult");

Object.keys(_BatchObserverResult).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _BatchObserverResult[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _BatchObserverResult[key];
    }
  });
});

var _BoundInstrument = require("./types/BoundInstrument");

Object.keys(_BoundInstrument).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _BoundInstrument[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _BoundInstrument[key];
    }
  });
});

var _Meter = require("./types/Meter");

Object.keys(_Meter).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _Meter[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _Meter[key];
    }
  });
});

var _MeterProvider = require("./types/MeterProvider");

Object.keys(_MeterProvider).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _MeterProvider[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _MeterProvider[key];
    }
  });
});

var _Metric = require("./types/Metric");

Object.keys(_Metric).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _Metric[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _Metric[key];
    }
  });
});

var _Observation = require("./types/Observation");

Object.keys(_Observation).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _Observation[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _Observation[key];
    }
  });
});

var _ObserverResult = require("./types/ObserverResult");

Object.keys(_ObserverResult).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _ObserverResult[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _ObserverResult[key];
    }
  });
});

var _metrics = require("./api/metrics");

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/** Entrypoint for metrics API */
var metrics = _metrics.MetricsAPI.getInstance();

exports.metrics = metrics;
},{"./NoopMeter":"node_modules/@opentelemetry/api-metrics/build/esm/NoopMeter.js","./NoopMeterProvider":"node_modules/@opentelemetry/api-metrics/build/esm/NoopMeterProvider.js","./types/BatchObserverResult":"node_modules/@opentelemetry/api-metrics/build/esm/types/BatchObserverResult.js","./types/BoundInstrument":"node_modules/@opentelemetry/api-metrics/build/esm/types/BoundInstrument.js","./types/Meter":"node_modules/@opentelemetry/api-metrics/build/esm/types/Meter.js","./types/MeterProvider":"node_modules/@opentelemetry/api-metrics/build/esm/types/MeterProvider.js","./types/Metric":"node_modules/@opentelemetry/api-metrics/build/esm/types/Metric.js","./types/Observation":"node_modules/@opentelemetry/api-metrics/build/esm/types/Observation.js","./types/ObserverResult":"node_modules/@opentelemetry/api-metrics/build/esm/types/ObserverResult.js","./api/metrics":"node_modules/@opentelemetry/api-metrics/build/esm/api/metrics.js"}],"node_modules/@opentelemetry/instrumentation/build/esm/autoLoaderUtils.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.disableInstrumentations = disableInstrumentations;
exports.enableInstrumentations = enableInstrumentations;
exports.parseInstrumentationOptions = parseInstrumentationOptions;

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Parses the options and returns instrumentations, node plugins and
 *   web plugins
 * @param options
 */
function parseInstrumentationOptions(options) {
  if (options === void 0) {
    options = [];
  }

  var instrumentations = [];

  for (var i = 0, j = options.length; i < j; i++) {
    var option = options[i];

    if (Array.isArray(option)) {
      var results = parseInstrumentationOptions(option);
      instrumentations = instrumentations.concat(results.instrumentations);
    } else if (typeof option === 'function') {
      instrumentations.push(new option());
    } else if (option.instrumentationName) {
      instrumentations.push(option);
    }
  }

  return {
    instrumentations: instrumentations
  };
}
/**
 * Enable instrumentations
 * @param instrumentations
 * @param tracerProvider
 * @param meterProvider
 */


function enableInstrumentations(instrumentations, tracerProvider, meterProvider) {
  for (var i = 0, j = instrumentations.length; i < j; i++) {
    var instrumentation = instrumentations[i];

    if (tracerProvider) {
      instrumentation.setTracerProvider(tracerProvider);
    }

    if (meterProvider) {
      instrumentation.setMeterProvider(meterProvider);
    }

    instrumentation.enable();
  }
}
/**
 * Disable instrumentations
 * @param instrumentations
 */


function disableInstrumentations(instrumentations) {
  instrumentations.forEach(function (instrumentation) {
    return instrumentation.disable();
  });
}
},{}],"node_modules/@opentelemetry/instrumentation/build/esm/autoLoader.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.registerInstrumentations = registerInstrumentations;

var _api = require("@opentelemetry/api");

var _apiMetrics = require("@opentelemetry/api-metrics");

var _autoLoaderUtils = require("./autoLoaderUtils");

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * It will register instrumentations and plugins
 * @param options
 * @return returns function to unload instrumentation and plugins that were
 *   registered
 */
function registerInstrumentations(options) {
  var instrumentations = (0, _autoLoaderUtils.parseInstrumentationOptions)(options.instrumentations).instrumentations;

  var tracerProvider = options.tracerProvider || _api.trace.getTracerProvider();

  var meterProvider = options.meterProvider || _apiMetrics.metrics.getMeterProvider();

  (0, _autoLoaderUtils.enableInstrumentations)(instrumentations, tracerProvider, meterProvider);
  return function () {
    (0, _autoLoaderUtils.disableInstrumentations)(instrumentations);
  };
}
},{"@opentelemetry/api":"node_modules/@opentelemetry/api/build/esm/index.js","@opentelemetry/api-metrics":"node_modules/@opentelemetry/api-metrics/build/esm/index.js","./autoLoaderUtils":"node_modules/@opentelemetry/instrumentation/build/esm/autoLoaderUtils.js"}],"node_modules/shimmer/index.js":[function(require,module,exports) {
'use strict'

function isFunction (funktion) {
  return typeof funktion === 'function'
}

// Default to complaining loudly when things don't go according to plan.
var logger = console.error.bind(console)

// Sets a property on an object, preserving its enumerability.
// This function assumes that the property is already writable.
function defineProperty (obj, name, value) {
  var enumerable = !!obj[name] && obj.propertyIsEnumerable(name)
  Object.defineProperty(obj, name, {
    configurable: true,
    enumerable: enumerable,
    writable: true,
    value: value
  })
}

// Keep initialization idempotent.
function shimmer (options) {
  if (options && options.logger) {
    if (!isFunction(options.logger)) logger("new logger isn't a function, not replacing")
    else logger = options.logger
  }
}

function wrap (nodule, name, wrapper) {
  if (!nodule || !nodule[name]) {
    logger('no original function ' + name + ' to wrap')
    return
  }

  if (!wrapper) {
    logger('no wrapper function')
    logger((new Error()).stack)
    return
  }

  if (!isFunction(nodule[name]) || !isFunction(wrapper)) {
    logger('original object and wrapper must be functions')
    return
  }

  var original = nodule[name]
  var wrapped = wrapper(original, name)

  defineProperty(wrapped, '__original', original)
  defineProperty(wrapped, '__unwrap', function () {
    if (nodule[name] === wrapped) defineProperty(nodule, name, original)
  })
  defineProperty(wrapped, '__wrapped', true)

  defineProperty(nodule, name, wrapped)
  return wrapped
}

function massWrap (nodules, names, wrapper) {
  if (!nodules) {
    logger('must provide one or more modules to patch')
    logger((new Error()).stack)
    return
  } else if (!Array.isArray(nodules)) {
    nodules = [nodules]
  }

  if (!(names && Array.isArray(names))) {
    logger('must provide one or more functions to wrap on modules')
    return
  }

  nodules.forEach(function (nodule) {
    names.forEach(function (name) {
      wrap(nodule, name, wrapper)
    })
  })
}

function unwrap (nodule, name) {
  if (!nodule || !nodule[name]) {
    logger('no function to unwrap.')
    logger((new Error()).stack)
    return
  }

  if (!nodule[name].__unwrap) {
    logger('no original to unwrap to -- has ' + name + ' already been unwrapped?')
  } else {
    return nodule[name].__unwrap()
  }
}

function massUnwrap (nodules, names) {
  if (!nodules) {
    logger('must provide one or more modules to patch')
    logger((new Error()).stack)
    return
  } else if (!Array.isArray(nodules)) {
    nodules = [nodules]
  }

  if (!(names && Array.isArray(names))) {
    logger('must provide one or more functions to unwrap on modules')
    return
  }

  nodules.forEach(function (nodule) {
    names.forEach(function (name) {
      unwrap(nodule, name)
    })
  })
}

shimmer.wrap = wrap
shimmer.massWrap = massWrap
shimmer.unwrap = unwrap
shimmer.massUnwrap = massUnwrap

module.exports = shimmer

},{}],"node_modules/@opentelemetry/instrumentation/build/esm/instrumentation.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.InstrumentationAbstract = void 0;

var _api = require("@opentelemetry/api");

var _apiMetrics = require("@opentelemetry/api-metrics");

var shimmer = _interopRequireWildcard(require("shimmer"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __assign = void 0 && (void 0).__assign || function () {
  __assign = Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];

      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }

    return t;
  };

  return __assign.apply(this, arguments);
};

/**
 * Base abstract internal class for instrumenting node and web plugins
 */
var InstrumentationAbstract =
/** @class */
function () {
  function InstrumentationAbstract(instrumentationName, instrumentationVersion, config) {
    if (config === void 0) {
      config = {};
    }

    this.instrumentationName = instrumentationName;
    this.instrumentationVersion = instrumentationVersion;
    /* Api to wrap instrumented method */

    this._wrap = shimmer.wrap;
    /* Api to unwrap instrumented methods */

    this._unwrap = shimmer.unwrap;
    /* Api to mass wrap instrumented method */

    this._massWrap = shimmer.massWrap;
    /* Api to mass unwrap instrumented methods */

    this._massUnwrap = shimmer.massUnwrap;
    this._config = __assign({
      enabled: true
    }, config);
    this._diag = _api.diag.createComponentLogger({
      namespace: instrumentationName
    });
    this._tracer = _api.trace.getTracer(instrumentationName, instrumentationVersion);
    this._meter = _apiMetrics.metrics.getMeter(instrumentationName, instrumentationVersion);
  }

  Object.defineProperty(InstrumentationAbstract.prototype, "meter", {
    /* Returns meter */
    get: function () {
      return this._meter;
    },
    enumerable: false,
    configurable: true
  });
  /**
   * Sets MeterProvider to this plugin
   * @param meterProvider
   */

  InstrumentationAbstract.prototype.setMeterProvider = function (meterProvider) {
    this._meter = meterProvider.getMeter(this.instrumentationName, this.instrumentationVersion);
  };
  /* Returns InstrumentationConfig */


  InstrumentationAbstract.prototype.getConfig = function () {
    return this._config;
  };
  /**
   * Sets InstrumentationConfig to this plugin
   * @param InstrumentationConfig
   */


  InstrumentationAbstract.prototype.setConfig = function (config) {
    if (config === void 0) {
      config = {};
    }

    this._config = Object.assign({}, config);
  };
  /**
   * Sets TraceProvider to this plugin
   * @param tracerProvider
   */


  InstrumentationAbstract.prototype.setTracerProvider = function (tracerProvider) {
    this._tracer = tracerProvider.getTracer(this.instrumentationName, this.instrumentationVersion);
  };

  Object.defineProperty(InstrumentationAbstract.prototype, "tracer", {
    /* Returns tracer */
    get: function () {
      return this._tracer;
    },
    enumerable: false,
    configurable: true
  });
  return InstrumentationAbstract;
}();

exports.InstrumentationAbstract = InstrumentationAbstract;
},{"@opentelemetry/api":"node_modules/@opentelemetry/api/build/esm/index.js","@opentelemetry/api-metrics":"node_modules/@opentelemetry/api-metrics/build/esm/index.js","shimmer":"node_modules/shimmer/index.js"}],"node_modules/@opentelemetry/instrumentation/build/esm/platform/browser/instrumentation.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.InstrumentationBase = void 0;

var _instrumentation = require("../../instrumentation");

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __extends = void 0 && (void 0).__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

/**
 * Base abstract class for instrumenting web plugins
 */
var InstrumentationBase =
/** @class */
function (_super) {
  __extends(InstrumentationBase, _super);

  function InstrumentationBase(instrumentationName, instrumentationVersion, config) {
    if (config === void 0) {
      config = {};
    }

    var _this = _super.call(this, instrumentationName, instrumentationVersion, config) || this;

    if (_this._config.enabled) {
      _this.enable();
    }

    return _this;
  }

  return InstrumentationBase;
}(_instrumentation.InstrumentationAbstract);

exports.InstrumentationBase = InstrumentationBase;
},{"../../instrumentation":"node_modules/@opentelemetry/instrumentation/build/esm/instrumentation.js"}],"node_modules/@opentelemetry/instrumentation/build/esm/platform/browser/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _instrumentation = require("./instrumentation");

Object.keys(_instrumentation).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _instrumentation[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _instrumentation[key];
    }
  });
});
},{"./instrumentation":"node_modules/@opentelemetry/instrumentation/build/esm/platform/browser/instrumentation.js"}],"node_modules/@opentelemetry/instrumentation/build/esm/types.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/@opentelemetry/instrumentation/build/esm/types_internal.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/@opentelemetry/instrumentation/build/esm/utils.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isWrapped = isWrapped;
exports.safeExecuteInTheMiddle = safeExecuteInTheMiddle;
exports.safeExecuteInTheMiddleAsync = safeExecuteInTheMiddleAsync;

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __awaiter = void 0 && (void 0).__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};

var __generator = void 0 && (void 0).__generator || function (thisArg, body) {
  var _ = {
    label: 0,
    sent: function () {
      if (t[0] & 1) throw t[1];
      return t[1];
    },
    trys: [],
    ops: []
  },
      f,
      y,
      t,
      g;
  return g = {
    next: verb(0),
    "throw": verb(1),
    "return": verb(2)
  }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
    return this;
  }), g;

  function verb(n) {
    return function (v) {
      return step([n, v]);
    };
  }

  function step(op) {
    if (f) throw new TypeError("Generator is already executing.");

    while (_) try {
      if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
      if (y = 0, t) op = [op[0] & 2, t.value];

      switch (op[0]) {
        case 0:
        case 1:
          t = op;
          break;

        case 4:
          _.label++;
          return {
            value: op[1],
            done: false
          };

        case 5:
          _.label++;
          y = op[1];
          op = [0];
          continue;

        case 7:
          op = _.ops.pop();

          _.trys.pop();

          continue;

        default:
          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
            _ = 0;
            continue;
          }

          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
            _.label = op[1];
            break;
          }

          if (op[0] === 6 && _.label < t[1]) {
            _.label = t[1];
            t = op;
            break;
          }

          if (t && _.label < t[2]) {
            _.label = t[2];

            _.ops.push(op);

            break;
          }

          if (t[2]) _.ops.pop();

          _.trys.pop();

          continue;
      }

      op = body.call(thisArg, _);
    } catch (e) {
      op = [6, e];
      y = 0;
    } finally {
      f = t = 0;
    }

    if (op[0] & 5) throw op[1];
    return {
      value: op[0] ? op[1] : void 0,
      done: true
    };
  }
};
/**
 * function to execute patched function and being able to catch errors
 * @param execute - function to be executed
 * @param onFinish - callback to run when execute finishes
 */


function safeExecuteInTheMiddle(execute, onFinish, preventThrowingError) {
  var error;
  var result;

  try {
    result = execute();
  } catch (e) {
    error = e;
  } finally {
    onFinish(error, result);

    if (error && !preventThrowingError) {
      // eslint-disable-next-line no-unsafe-finally
      throw error;
    } // eslint-disable-next-line no-unsafe-finally


    return result;
  }
}
/**
 * Async function to execute patched function and being able to catch errors
 * @param execute - function to be executed
 * @param onFinish - callback to run when execute finishes
 */


function safeExecuteInTheMiddleAsync(execute, onFinish, preventThrowingError) {
  return __awaiter(this, void 0, void 0, function () {
    var error, result, e_1;
    return __generator(this, function (_a) {
      switch (_a.label) {
        case 0:
          _a.trys.push([0, 2, 3, 4]);

          return [4
          /*yield*/
          , execute()];

        case 1:
          result = _a.sent();
          return [3
          /*break*/
          , 4];

        case 2:
          e_1 = _a.sent();
          error = e_1;
          return [3
          /*break*/
          , 4];

        case 3:
          onFinish(error, result);

          if (error && !preventThrowingError) {
            // eslint-disable-next-line no-unsafe-finally
            throw error;
          } // eslint-disable-next-line no-unsafe-finally


          return [2
          /*return*/
          , result];

        case 4:
          return [2
          /*return*/
          ];
      }
    });
  });
}
/**
 * Checks if certain function has been already wrapped
 * @param func
 */


function isWrapped(func) {
  return typeof func === 'function' && typeof func.__original === 'function' && typeof func.__unwrap === 'function' && func.__wrapped === true;
}
},{}],"node_modules/@opentelemetry/instrumentation/build/esm/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _autoLoader = require("./autoLoader");

Object.keys(_autoLoader).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _autoLoader[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _autoLoader[key];
    }
  });
});

var _index = require("./platform/index");

Object.keys(_index).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index[key];
    }
  });
});

var _types = require("./types");

Object.keys(_types).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _types[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _types[key];
    }
  });
});

var _types_internal = require("./types_internal");

Object.keys(_types_internal).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _types_internal[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _types_internal[key];
    }
  });
});

var _utils = require("./utils");

Object.keys(_utils).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _utils[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _utils[key];
    }
  });
});
},{"./autoLoader":"node_modules/@opentelemetry/instrumentation/build/esm/autoLoader.js","./platform/index":"node_modules/@opentelemetry/instrumentation/build/esm/platform/browser/index.js","./types":"node_modules/@opentelemetry/instrumentation/build/esm/types.js","./types_internal":"node_modules/@opentelemetry/instrumentation/build/esm/types_internal.js","./utils":"node_modules/@opentelemetry/instrumentation/build/esm/utils.js"}],"output/OpenTelemetry.Instrumentation/foreign.js":[function(require,module,exports) {
"use strict";

var _require = require('@opentelemetry/instrumentation'),
    registerInstrumentations = _require.registerInstrumentations;

exports.registerInstrumentationsFFI = function (autoLoaderOptions) {
  return function () {
    return registerInstrumentations(autoLoaderOptions);
  };
};
},{"@opentelemetry/instrumentation":"node_modules/@opentelemetry/instrumentation/build/esm/index.js"}],"output/Data.Nullable/foreign.js":[function(require,module,exports) {
/* eslint-disable no-eq-null, eqeqeq */
"use strict";

exports["null"] = null;

exports.nullable = function (a, r, f) {
  return a == null ? r : f(a);
};

exports.notNull = function (x) {
  return x;
};
},{}],"output/Data.Nullable/index.js":[function(require,module,exports) {
// Generated by purs version 0.14.5
"use strict";

var $foreign = require("./foreign.js");

var Data_Eq = require("../Data.Eq/index.js");

var Data_Function = require("../Data.Function/index.js");

var Data_Maybe = require("../Data.Maybe/index.js");

var Data_Ord = require("../Data.Ord/index.js");

var Data_Show = require("../Data.Show/index.js");

var toNullable = Data_Maybe.maybe($foreign["null"])($foreign.notNull);

var toMaybe = function toMaybe(n) {
  return $foreign.nullable(n, Data_Maybe.Nothing.value, Data_Maybe.Just.create);
};

var showNullable = function showNullable(dictShow) {
  return {
    show: function () {
      var $5 = Data_Maybe.maybe("null")(Data_Show.show(dictShow));
      return function ($6) {
        return $5(toMaybe($6));
      };
    }()
  };
};

var eqNullable = function eqNullable(dictEq) {
  return {
    eq: Data_Function.on(Data_Eq.eq(Data_Maybe.eqMaybe(dictEq)))(toMaybe)
  };
};

var ordNullable = function ordNullable(dictOrd) {
  return {
    compare: Data_Function.on(Data_Ord.compare(Data_Maybe.ordMaybe(dictOrd)))(toMaybe),
    Eq0: function Eq0() {
      return eqNullable(dictOrd.Eq0());
    }
  };
};

var eq1Nullable = {
  eq1: function eq1(dictEq) {
    return Data_Eq.eq(eqNullable(dictEq));
  }
};
var ord1Nullable = {
  compare1: function compare1(dictOrd) {
    return Data_Ord.compare(ordNullable(dictOrd));
  },
  Eq10: function Eq10() {
    return eq1Nullable;
  }
};
module.exports = {
  toMaybe: toMaybe,
  toNullable: toNullable,
  showNullable: showNullable,
  eqNullable: eqNullable,
  eq1Nullable: eq1Nullable,
  ordNullable: ordNullable,
  ord1Nullable: ord1Nullable,
  "null": $foreign["null"],
  notNull: $foreign.notNull
};
},{"./foreign.js":"output/Data.Nullable/foreign.js","../Data.Eq/index.js":"output/Data.Eq/index.js","../Data.Function/index.js":"output/Data.Function/index.js","../Data.Maybe/index.js":"output/Data.Maybe/index.js","../Data.Ord/index.js":"output/Data.Ord/index.js","../Data.Show/index.js":"output/Data.Show/index.js"}],"output/OpenTelemetry.Instrumentation/index.js":[function(require,module,exports) {
// Generated by purs version 0.14.5
"use strict";

var $foreign = require("./foreign.js");

var Data_Nullable = require("../Data.Nullable/index.js");

var optionsToFFI = function optionsToFFI(options) {
  return {
    instrumentations: options.instrumentations,
    tracerProvider: Data_Nullable.toNullable(options.tracerProvider),
    meterProvider: Data_Nullable.toNullable(options.meterProvider)
  };
};

var registerInstrumentations = function registerInstrumentations(options) {
  return $foreign.registerInstrumentationsFFI(optionsToFFI(options));
};

module.exports = {
  registerInstrumentations: registerInstrumentations
};
},{"./foreign.js":"output/OpenTelemetry.Instrumentation/foreign.js","../Data.Nullable/index.js":"output/Data.Nullable/index.js"}],"node_modules/@opentelemetry/core/build/esm/trace/suppress-tracing.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isTracingSuppressed = isTracingSuppressed;
exports.suppressTracing = suppressTracing;
exports.unsuppressTracing = unsuppressTracing;

var _api = require("@opentelemetry/api");

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var SUPPRESS_TRACING_KEY = (0, _api.createContextKey)('OpenTelemetry SDK Context Key SUPPRESS_TRACING');

function suppressTracing(context) {
  return context.setValue(SUPPRESS_TRACING_KEY, true);
}

function unsuppressTracing(context) {
  return context.deleteValue(SUPPRESS_TRACING_KEY);
}

function isTracingSuppressed(context) {
  return context.getValue(SUPPRESS_TRACING_KEY) === true;
}
},{"@opentelemetry/api":"node_modules/@opentelemetry/api/build/esm/index.js"}],"node_modules/@opentelemetry/core/build/esm/baggage/constants.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BAGGAGE_PROPERTIES_SEPARATOR = exports.BAGGAGE_MAX_TOTAL_LENGTH = exports.BAGGAGE_MAX_PER_NAME_VALUE_PAIRS = exports.BAGGAGE_MAX_NAME_VALUE_PAIRS = exports.BAGGAGE_KEY_PAIR_SEPARATOR = exports.BAGGAGE_ITEMS_SEPARATOR = exports.BAGGAGE_HEADER = void 0;

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var BAGGAGE_KEY_PAIR_SEPARATOR = '=';
exports.BAGGAGE_KEY_PAIR_SEPARATOR = BAGGAGE_KEY_PAIR_SEPARATOR;
var BAGGAGE_PROPERTIES_SEPARATOR = ';';
exports.BAGGAGE_PROPERTIES_SEPARATOR = BAGGAGE_PROPERTIES_SEPARATOR;
var BAGGAGE_ITEMS_SEPARATOR = ','; // Name of the http header used to propagate the baggage

exports.BAGGAGE_ITEMS_SEPARATOR = BAGGAGE_ITEMS_SEPARATOR;
var BAGGAGE_HEADER = 'baggage'; // Maximum number of name-value pairs allowed by w3c spec

exports.BAGGAGE_HEADER = BAGGAGE_HEADER;
var BAGGAGE_MAX_NAME_VALUE_PAIRS = 180; // Maximum number of bytes per a single name-value pair allowed by w3c spec

exports.BAGGAGE_MAX_NAME_VALUE_PAIRS = BAGGAGE_MAX_NAME_VALUE_PAIRS;
var BAGGAGE_MAX_PER_NAME_VALUE_PAIRS = 4096; // Maximum total length of all name-value pairs allowed by w3c spec

exports.BAGGAGE_MAX_PER_NAME_VALUE_PAIRS = BAGGAGE_MAX_PER_NAME_VALUE_PAIRS;
var BAGGAGE_MAX_TOTAL_LENGTH = 8192;
exports.BAGGAGE_MAX_TOTAL_LENGTH = BAGGAGE_MAX_TOTAL_LENGTH;
},{}],"node_modules/@opentelemetry/core/build/esm/baggage/utils.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getKeyPairs = getKeyPairs;
exports.parseKeyPairsIntoRecord = parseKeyPairsIntoRecord;
exports.parsePairKeyValue = parsePairKeyValue;
exports.serializeKeyPairs = serializeKeyPairs;

var _api = require("@opentelemetry/api");

var _constants = require("./constants");

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function serializeKeyPairs(keyPairs) {
  return keyPairs.reduce(function (hValue, current) {
    var value = "" + hValue + (hValue !== '' ? _constants.BAGGAGE_ITEMS_SEPARATOR : '') + current;
    return value.length > _constants.BAGGAGE_MAX_TOTAL_LENGTH ? hValue : value;
  }, '');
}

function getKeyPairs(baggage) {
  return baggage.getAllEntries().map(function (_a) {
    var key = _a[0],
        value = _a[1];
    return encodeURIComponent(key) + "=" + encodeURIComponent(value.value);
  });
}

function parsePairKeyValue(entry) {
  var valueProps = entry.split(_constants.BAGGAGE_PROPERTIES_SEPARATOR);
  if (valueProps.length <= 0) return;
  var keyPairPart = valueProps.shift();
  if (!keyPairPart) return;
  var keyPair = keyPairPart.split(_constants.BAGGAGE_KEY_PAIR_SEPARATOR);
  if (keyPair.length !== 2) return;
  var key = decodeURIComponent(keyPair[0].trim());
  var value = decodeURIComponent(keyPair[1].trim());
  var metadata;

  if (valueProps.length > 0) {
    metadata = (0, _api.baggageEntryMetadataFromString)(valueProps.join(_constants.BAGGAGE_PROPERTIES_SEPARATOR));
  }

  return {
    key: key,
    value: value,
    metadata: metadata
  };
}
/**
 * Parse a string serialized in the baggage HTTP Format (without metadata):
 * https://github.com/w3c/baggage/blob/master/baggage/HTTP_HEADER_FORMAT.md
 */


function parseKeyPairsIntoRecord(value) {
  if (typeof value !== 'string' || value.length === 0) return {};
  return value.split(_constants.BAGGAGE_ITEMS_SEPARATOR).map(function (entry) {
    return parsePairKeyValue(entry);
  }).filter(function (keyPair) {
    return keyPair !== undefined && keyPair.value.length > 0;
  }).reduce(function (headers, keyPair) {
    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
    headers[keyPair.key] = keyPair.value;
    return headers;
  }, {});
}
},{"@opentelemetry/api":"node_modules/@opentelemetry/api/build/esm/index.js","./constants":"node_modules/@opentelemetry/core/build/esm/baggage/constants.js"}],"node_modules/@opentelemetry/core/build/esm/baggage/propagation/W3CBaggagePropagator.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.W3CBaggagePropagator = void 0;

var _api = require("@opentelemetry/api");

var _suppressTracing = require("../../trace/suppress-tracing");

var _constants = require("../constants");

var _utils = require("../utils");

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Propagates {@link Baggage} through Context format propagation.
 *
 * Based on the Baggage specification:
 * https://w3c.github.io/baggage/
 */
var W3CBaggagePropagator =
/** @class */
function () {
  function W3CBaggagePropagator() {}

  W3CBaggagePropagator.prototype.inject = function (context, carrier, setter) {
    var baggage = _api.propagation.getBaggage(context);

    if (!baggage || (0, _suppressTracing.isTracingSuppressed)(context)) return;
    var keyPairs = (0, _utils.getKeyPairs)(baggage).filter(function (pair) {
      return pair.length <= _constants.BAGGAGE_MAX_PER_NAME_VALUE_PAIRS;
    }).slice(0, _constants.BAGGAGE_MAX_NAME_VALUE_PAIRS);
    var headerValue = (0, _utils.serializeKeyPairs)(keyPairs);

    if (headerValue.length > 0) {
      setter.set(carrier, _constants.BAGGAGE_HEADER, headerValue);
    }
  };

  W3CBaggagePropagator.prototype.extract = function (context, carrier, getter) {
    var headerValue = getter.get(carrier, _constants.BAGGAGE_HEADER);
    if (!headerValue) return context;
    var baggage = {};

    if (headerValue.length === 0) {
      return context;
    }

    var pairs = headerValue.split(_constants.BAGGAGE_ITEMS_SEPARATOR);
    pairs.forEach(function (entry) {
      var keyPair = (0, _utils.parsePairKeyValue)(entry);

      if (keyPair) {
        var baggageEntry = {
          value: keyPair.value
        };

        if (keyPair.metadata) {
          baggageEntry.metadata = keyPair.metadata;
        }

        baggage[keyPair.key] = baggageEntry;
      }
    });

    if (Object.entries(baggage).length === 0) {
      return context;
    }

    return _api.propagation.setBaggage(context, _api.propagation.createBaggage(baggage));
  };

  W3CBaggagePropagator.prototype.fields = function () {
    return [_constants.BAGGAGE_HEADER];
  };

  return W3CBaggagePropagator;
}();

exports.W3CBaggagePropagator = W3CBaggagePropagator;
},{"@opentelemetry/api":"node_modules/@opentelemetry/api/build/esm/index.js","../../trace/suppress-tracing":"node_modules/@opentelemetry/core/build/esm/trace/suppress-tracing.js","../constants":"node_modules/@opentelemetry/core/build/esm/baggage/constants.js","../utils":"node_modules/@opentelemetry/core/build/esm/baggage/utils.js"}],"node_modules/@opentelemetry/core/build/esm/common/attributes.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isAttributeValue = isAttributeValue;
exports.sanitizeAttributes = sanitizeAttributes;

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function sanitizeAttributes(attributes) {
  var out = {};

  if (attributes == null || _typeof(attributes) !== 'object') {
    return out;
  } // eslint-disable-next-line @typescript-eslint/no-non-null-assertion


  for (var _i = 0, _a = Object.entries(attributes); _i < _a.length; _i++) {
    var _b = _a[_i],
        k = _b[0],
        v = _b[1];

    if (isAttributeValue(v)) {
      if (Array.isArray(v)) {
        out[k] = v.slice();
      } else {
        out[k] = v;
      }
    }
  }

  return out;
}

function isAttributeValue(val) {
  if (val == null) {
    return true;
  }

  if (Array.isArray(val)) {
    return isHomogeneousAttributeValueArray(val);
  }

  return isValidPrimitiveAttributeValue(val);
}

function isHomogeneousAttributeValueArray(arr) {
  var type;

  for (var _i = 0, arr_1 = arr; _i < arr_1.length; _i++) {
    var element = arr_1[_i]; // null/undefined elements are allowed

    if (element == null) continue;

    if (!type) {
      if (isValidPrimitiveAttributeValue(element)) {
        type = _typeof(element);
        continue;
      } // encountered an invalid primitive


      return false;
    }

    if (_typeof(element) === type) {
      continue;
    }

    return false;
  }

  return true;
}

function isValidPrimitiveAttributeValue(val) {
  switch (_typeof(val)) {
    case 'number':
      return true;

    case 'boolean':
      return true;

    case 'string':
      return true;
  }

  return false;
}
},{}],"node_modules/@opentelemetry/core/build/esm/common/logging-error-handler.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.loggingErrorHandler = loggingErrorHandler;

var _api = require("@opentelemetry/api");

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Returns a function that logs an error using the provided logger, or a
 * console logger if one was not provided.
 */
function loggingErrorHandler() {
  return function (ex) {
    _api.diag.error(stringifyException(ex));
  };
}
/**
 * Converts an exception into a string representation
 * @param {Exception} ex
 */


function stringifyException(ex) {
  if (typeof ex === 'string') {
    return ex;
  } else {
    return JSON.stringify(flattenException(ex));
  }
}
/**
 * Flattens an exception into key-value pairs by traversing the prototype chain
 * and coercing values to strings. Duplicate properties will not be overwritten;
 * the first insert wins.
 */


function flattenException(ex) {
  var result = {};
  var current = ex;

  while (current !== null) {
    Object.getOwnPropertyNames(current).forEach(function (propertyName) {
      if (result[propertyName]) return;
      var value = current[propertyName];

      if (value) {
        result[propertyName] = String(value);
      }
    });
    current = Object.getPrototypeOf(current);
  }

  return result;
}
},{"@opentelemetry/api":"node_modules/@opentelemetry/api/build/esm/index.js"}],"node_modules/@opentelemetry/core/build/esm/common/global-error-handler.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.globalErrorHandler = globalErrorHandler;
exports.setGlobalErrorHandler = setGlobalErrorHandler;

var _loggingErrorHandler = require("./logging-error-handler");

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/** The global error handler delegate */
var delegateHandler = (0, _loggingErrorHandler.loggingErrorHandler)();
/**
 * Set the global error handler
 * @param {ErrorHandler} handler
 */

function setGlobalErrorHandler(handler) {
  delegateHandler = handler;
}
/**
 * Return the global error handler
 * @param {Exception} ex
 */


function globalErrorHandler(ex) {
  try {
    delegateHandler(ex);
  } catch (_a) {} // eslint-disable-line no-empty

}
},{"./logging-error-handler":"node_modules/@opentelemetry/core/build/esm/common/logging-error-handler.js"}],"node_modules/@opentelemetry/core/build/esm/utils/sampling.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TracesSamplerValues = void 0;

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var TracesSamplerValues;
exports.TracesSamplerValues = TracesSamplerValues;

(function (TracesSamplerValues) {
  TracesSamplerValues["AlwaysOff"] = "always_off";
  TracesSamplerValues["AlwaysOn"] = "always_on";
  TracesSamplerValues["ParentBasedAlwaysOff"] = "parentbased_always_off";
  TracesSamplerValues["ParentBasedAlwaysOn"] = "parentbased_always_on";
  TracesSamplerValues["ParentBasedTraceIdRatio"] = "parentbased_traceidratio";
  TracesSamplerValues["TraceIdRatio"] = "traceidratio";
})(TracesSamplerValues || (exports.TracesSamplerValues = TracesSamplerValues = {}));
},{}],"node_modules/@opentelemetry/core/build/esm/utils/environment.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DEFAULT_ENVIRONMENT = exports.DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT = exports.DEFAULT_ATTRIBUTE_COUNT_LIMIT = void 0;
exports.parseEnvironment = parseEnvironment;

var _api = require("@opentelemetry/api");

var _sampling = require("./sampling");

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var DEFAULT_LIST_SEPARATOR = ',';
/**
 * Environment interface to define all names
 */

var ENVIRONMENT_NUMBERS_KEYS = ['OTEL_BSP_EXPORT_TIMEOUT', 'OTEL_BSP_MAX_EXPORT_BATCH_SIZE', 'OTEL_BSP_MAX_QUEUE_SIZE', 'OTEL_BSP_SCHEDULE_DELAY', 'OTEL_ATTRIBUTE_VALUE_LENGTH_LIMIT', 'OTEL_ATTRIBUTE_COUNT_LIMIT', 'OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT', 'OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT', 'OTEL_SPAN_EVENT_COUNT_LIMIT', 'OTEL_SPAN_LINK_COUNT_LIMIT'];

function isEnvVarANumber(key) {
  return ENVIRONMENT_NUMBERS_KEYS.indexOf(key) > -1;
}

var ENVIRONMENT_LISTS_KEYS = ['OTEL_NO_PATCH_MODULES', 'OTEL_PROPAGATORS'];

function isEnvVarAList(key) {
  return ENVIRONMENT_LISTS_KEYS.indexOf(key) > -1;
}

var DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT = Infinity;
exports.DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT = DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT;
var DEFAULT_ATTRIBUTE_COUNT_LIMIT = 128;
/**
 * Default environment variables
 */

exports.DEFAULT_ATTRIBUTE_COUNT_LIMIT = DEFAULT_ATTRIBUTE_COUNT_LIMIT;
var DEFAULT_ENVIRONMENT = {
  CONTAINER_NAME: '',
  ECS_CONTAINER_METADATA_URI_V4: '',
  ECS_CONTAINER_METADATA_URI: '',
  HOSTNAME: '',
  KUBERNETES_SERVICE_HOST: '',
  NAMESPACE: '',
  OTEL_BSP_EXPORT_TIMEOUT: 30000,
  OTEL_BSP_MAX_EXPORT_BATCH_SIZE: 512,
  OTEL_BSP_MAX_QUEUE_SIZE: 2048,
  OTEL_BSP_SCHEDULE_DELAY: 5000,
  OTEL_EXPORTER_JAEGER_AGENT_HOST: '',
  OTEL_EXPORTER_JAEGER_ENDPOINT: '',
  OTEL_EXPORTER_JAEGER_PASSWORD: '',
  OTEL_EXPORTER_JAEGER_USER: '',
  OTEL_EXPORTER_OTLP_ENDPOINT: '',
  OTEL_EXPORTER_OTLP_TRACES_ENDPOINT: '',
  OTEL_EXPORTER_OTLP_METRICS_ENDPOINT: '',
  OTEL_EXPORTER_OTLP_HEADERS: '',
  OTEL_EXPORTER_OTLP_TRACES_HEADERS: '',
  OTEL_EXPORTER_OTLP_METRICS_HEADERS: '',
  OTEL_EXPORTER_ZIPKIN_ENDPOINT: 'http://localhost:9411/api/v2/spans',
  OTEL_LOG_LEVEL: _api.DiagLogLevel.INFO,
  OTEL_NO_PATCH_MODULES: [],
  OTEL_PROPAGATORS: ['tracecontext', 'baggage'],
  OTEL_RESOURCE_ATTRIBUTES: '',
  OTEL_SERVICE_NAME: '',
  OTEL_ATTRIBUTE_VALUE_LENGTH_LIMIT: DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT,
  OTEL_ATTRIBUTE_COUNT_LIMIT: DEFAULT_ATTRIBUTE_COUNT_LIMIT,
  OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT: DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT,
  OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT: DEFAULT_ATTRIBUTE_COUNT_LIMIT,
  OTEL_SPAN_EVENT_COUNT_LIMIT: 128,
  OTEL_SPAN_LINK_COUNT_LIMIT: 128,
  OTEL_TRACES_EXPORTER: 'none',
  OTEL_TRACES_SAMPLER: _sampling.TracesSamplerValues.ParentBasedAlwaysOn,
  OTEL_TRACES_SAMPLER_ARG: ''
};
/**
 * Parses a variable as number with number validation
 * @param name
 * @param environment
 * @param values
 * @param min
 * @param max
 */

exports.DEFAULT_ENVIRONMENT = DEFAULT_ENVIRONMENT;

function parseNumber(name, environment, values, min, max) {
  if (min === void 0) {
    min = -Infinity;
  }

  if (max === void 0) {
    max = Infinity;
  }

  if (typeof values[name] !== 'undefined') {
    var value = Number(values[name]);

    if (!isNaN(value)) {
      if (value < min) {
        environment[name] = min;
      } else if (value > max) {
        environment[name] = max;
      } else {
        environment[name] = value;
      }
    }
  }
}
/**
 * Parses list-like strings from input into output.
 * @param name
 * @param environment
 * @param values
 * @param separator
 */


function parseStringList(name, output, input, separator) {
  if (separator === void 0) {
    separator = DEFAULT_LIST_SEPARATOR;
  }

  var givenValue = input[name];

  if (typeof givenValue === 'string') {
    output[name] = givenValue.split(separator).map(function (v) {
      return v.trim();
    });
  }
} // The support string -> DiagLogLevel mappings


var logLevelMap = {
  ALL: _api.DiagLogLevel.ALL,
  VERBOSE: _api.DiagLogLevel.VERBOSE,
  DEBUG: _api.DiagLogLevel.DEBUG,
  INFO: _api.DiagLogLevel.INFO,
  WARN: _api.DiagLogLevel.WARN,
  ERROR: _api.DiagLogLevel.ERROR,
  NONE: _api.DiagLogLevel.NONE
};
/**
 * Environmentally sets log level if valid log level string is provided
 * @param key
 * @param environment
 * @param values
 */

function setLogLevelFromEnv(key, environment, values) {
  var value = values[key];

  if (typeof value === 'string') {
    var theLevel = logLevelMap[value.toUpperCase()];

    if (theLevel != null) {
      environment[key] = theLevel;
    }
  }
}
/**
 * Parses environment values
 * @param values
 */


function parseEnvironment(values) {
  var environment = {};

  for (var env in DEFAULT_ENVIRONMENT) {
    var key = env;

    switch (key) {
      case 'OTEL_LOG_LEVEL':
        setLogLevelFromEnv(key, environment, values);
        break;

      default:
        if (isEnvVarANumber(key)) {
          parseNumber(key, environment, values);
        } else if (isEnvVarAList(key)) {
          parseStringList(key, environment, values);
        } else {
          var value = values[key];

          if (typeof value !== 'undefined' && value !== null) {
            environment[key] = String(value);
          }
        }

    }
  }

  return environment;
}
},{"@opentelemetry/api":"node_modules/@opentelemetry/api/build/esm/index.js","./sampling":"node_modules/@opentelemetry/core/build/esm/utils/sampling.js"}],"node_modules/@opentelemetry/core/build/esm/platform/browser/environment.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getEnv = getEnv;

var _environment = require("../../utils/environment");

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Gets the environment variables
 */
function getEnv() {
  var _window = window;
  var globalEnv = (0, _environment.parseEnvironment)(_window);
  return Object.assign({}, _environment.DEFAULT_ENVIRONMENT, globalEnv);
}
},{"../../utils/environment":"node_modules/@opentelemetry/core/build/esm/utils/environment.js"}],"node_modules/@opentelemetry/core/build/esm/platform/browser/hex-to-base64.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.hexToBase64 = hexToBase64;

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function hexToBase64(hexStr) {
  var hexStrLen = hexStr.length;
  var hexAsciiCharsStr = '';

  for (var i = 0; i < hexStrLen; i += 2) {
    var hexPair = hexStr.substring(i, i + 2);
    var hexVal = parseInt(hexPair, 16);
    hexAsciiCharsStr += String.fromCharCode(hexVal);
  }

  return btoa(hexAsciiCharsStr);
}
},{}],"node_modules/@opentelemetry/core/build/esm/platform/browser/RandomIdGenerator.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RandomIdGenerator = void 0;
var SPAN_ID_BYTES = 8;
var TRACE_ID_BYTES = 16;

var RandomIdGenerator =
/** @class */
function () {
  function RandomIdGenerator() {
    /**
     * Returns a random 16-byte trace ID formatted/encoded as a 32 lowercase hex
     * characters corresponding to 128 bits.
     */
    this.generateTraceId = getIdGenerator(TRACE_ID_BYTES);
    /**
     * Returns a random 8-byte span ID formatted/encoded as a 16 lowercase hex
     * characters corresponding to 64 bits.
     */

    this.generateSpanId = getIdGenerator(SPAN_ID_BYTES);
  }

  return RandomIdGenerator;
}();

exports.RandomIdGenerator = RandomIdGenerator;
var SHARED_CHAR_CODES_ARRAY = Array(32);

function getIdGenerator(bytes) {
  return function generateId() {
    for (var i = 0; i < bytes * 2; i++) {
      SHARED_CHAR_CODES_ARRAY[i] = Math.floor(Math.random() * 16) + 48; // valid hex characters in the range 48-57 and 97-102

      if (SHARED_CHAR_CODES_ARRAY[i] >= 58) {
        SHARED_CHAR_CODES_ARRAY[i] += 39;
      }
    }

    return String.fromCharCode.apply(null, SHARED_CHAR_CODES_ARRAY.slice(0, bytes * 2));
  };
}
},{}],"node_modules/@opentelemetry/core/build/esm/platform/browser/performance.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.otperformance = void 0;

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var otperformance = performance;
exports.otperformance = otperformance;
},{}],"node_modules/@opentelemetry/core/build/esm/version.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.VERSION = void 0;

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// this is autogenerated file, see scripts/version-update.js
var VERSION = '1.0.0';
exports.VERSION = VERSION;
},{}],"node_modules/@opentelemetry/semantic-conventions/build/esm/trace/SemanticAttributes.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SemanticAttributes = exports.RpcGrpcStatusCodeValues = exports.NetTransportValues = exports.NetHostConnectionTypeValues = exports.NetHostConnectionSubtypeValues = exports.MessagingOperationValues = exports.MessagingDestinationKindValues = exports.HttpFlavorValues = exports.FaasTriggerValues = exports.FaasInvokedProviderValues = exports.FaasDocumentOperationValues = exports.DbSystemValues = exports.DbCassandraConsistencyLevelValues = void 0;

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// DO NOT EDIT, this is an Auto-generated file from scripts/semconv/templates//templates/SemanticAttributes.ts.j2
var SemanticAttributes = {
  /**
  * The full invoked ARN as provided on the `Context` passed to the function (`Lambda-Runtime-Invoked-Function-Arn` header on the `/runtime/invocation/next` applicable).
  *
  * Note: This may be different from `faas.id` if an alias is involved.
  */
  AWS_LAMBDA_INVOKED_ARN: 'aws.lambda.invoked_arn',

  /**
  * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.
  */
  DB_SYSTEM: 'db.system',

  /**
  * The connection string used to connect to the database. It is recommended to remove embedded credentials.
  */
  DB_CONNECTION_STRING: 'db.connection_string',

  /**
  * Username for accessing the database.
  */
  DB_USER: 'db.user',

  /**
  * The fully-qualified class name of the [Java Database Connectivity (JDBC)](https://docs.oracle.com/javase/8/docs/technotes/guides/jdbc/) driver used to connect.
  */
  DB_JDBC_DRIVER_CLASSNAME: 'db.jdbc.driver_classname',

  /**
  * If no [tech-specific attribute](#call-level-attributes-for-specific-technologies) is defined, this attribute is used to report the name of the database being accessed. For commands that switch the database, this should be set to the target database (even if the command fails).
  *
  * Note: In some SQL databases, the database name to be used is called &#34;schema name&#34;.
  */
  DB_NAME: 'db.name',

  /**
  * The database statement being executed.
  *
  * Note: The value may be sanitized to exclude sensitive information.
  */
  DB_STATEMENT: 'db.statement',

  /**
  * The name of the operation being executed, e.g. the [MongoDB command name](https://docs.mongodb.com/manual/reference/command/#database-operations) such as `findAndModify`, or the SQL keyword.
  *
  * Note: When setting this to an SQL keyword, it is not recommended to attempt any client-side parsing of `db.statement` just to get this property, but it should be set if the operation name is provided by the library being instrumented. If the SQL statement has an ambiguous operation, or performs more than one operation, this value may be omitted.
  */
  DB_OPERATION: 'db.operation',

  /**
  * The Microsoft SQL Server [instance name](https://docs.microsoft.com/en-us/sql/connect/jdbc/building-the-connection-url?view=sql-server-ver15) connecting to. This name is used to determine the port of a named instance.
  *
  * Note: If setting a `db.mssql.instance_name`, `net.peer.port` is no longer required (but still recommended if non-standard).
  */
  DB_MSSQL_INSTANCE_NAME: 'db.mssql.instance_name',

  /**
  * The name of the keyspace being accessed. To be used instead of the generic `db.name` attribute.
  */
  DB_CASSANDRA_KEYSPACE: 'db.cassandra.keyspace',

  /**
  * The fetch size used for paging, i.e. how many rows will be returned at once.
  */
  DB_CASSANDRA_PAGE_SIZE: 'db.cassandra.page_size',

  /**
  * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).
  */
  DB_CASSANDRA_CONSISTENCY_LEVEL: 'db.cassandra.consistency_level',

  /**
  * The name of the primary table that the operation is acting upon, including the schema name (if applicable).
  *
  * Note: This mirrors the db.sql.table attribute but references cassandra rather than sql. It is not recommended to attempt any client-side parsing of `db.statement` just to get this property, but it should be set if it is provided by the library being instrumented. If the operation is acting upon an anonymous table, or more than one table, this value MUST NOT be set.
  */
  DB_CASSANDRA_TABLE: 'db.cassandra.table',

  /**
  * Whether or not the query is idempotent.
  */
  DB_CASSANDRA_IDEMPOTENCE: 'db.cassandra.idempotence',

  /**
  * The number of times a query was speculatively executed. Not set or `0` if the query was not executed speculatively.
  */
  DB_CASSANDRA_SPECULATIVE_EXECUTION_COUNT: 'db.cassandra.speculative_execution_count',

  /**
  * The ID of the coordinating node for a query.
  */
  DB_CASSANDRA_COORDINATOR_ID: 'db.cassandra.coordinator.id',

  /**
  * The data center of the coordinating node for a query.
  */
  DB_CASSANDRA_COORDINATOR_DC: 'db.cassandra.coordinator.dc',

  /**
  * The [HBase namespace](https://hbase.apache.org/book.html#_namespace) being accessed. To be used instead of the generic `db.name` attribute.
  */
  DB_HBASE_NAMESPACE: 'db.hbase.namespace',

  /**
  * The index of the database being accessed as used in the [`SELECT` command](https://redis.io/commands/select), provided as an integer. To be used instead of the generic `db.name` attribute.
  */
  DB_REDIS_DATABASE_INDEX: 'db.redis.database_index',

  /**
  * The collection being accessed within the database stated in `db.name`.
  */
  DB_MONGODB_COLLECTION: 'db.mongodb.collection',

  /**
  * The name of the primary table that the operation is acting upon, including the schema name (if applicable).
  *
  * Note: It is not recommended to attempt any client-side parsing of `db.statement` just to get this property, but it should be set if it is provided by the library being instrumented. If the operation is acting upon an anonymous table, or more than one table, this value MUST NOT be set.
  */
  DB_SQL_TABLE: 'db.sql.table',

  /**
  * The type of the exception (its fully-qualified class name, if applicable). The dynamic type of the exception should be preferred over the static type in languages that support it.
  */
  EXCEPTION_TYPE: 'exception.type',

  /**
  * The exception message.
  */
  EXCEPTION_MESSAGE: 'exception.message',

  /**
  * A stacktrace as a string in the natural representation for the language runtime. The representation is to be determined and documented by each language SIG.
  */
  EXCEPTION_STACKTRACE: 'exception.stacktrace',

  /**
  * SHOULD be set to true if the exception event is recorded at a point where it is known that the exception is escaping the scope of the span.
  *
  * Note: An exception is considered to have escaped (or left) the scope of a span,
  if that span is ended while the exception is still logically &#34;in flight&#34;.
  This may be actually &#34;in flight&#34; in some languages (e.g. if the exception
  is passed to a Context manager&#39;s `__exit__` method in Python) but will
  usually be caught at the point of recording the exception in most languages.
   It is usually not possible to determine at the point where an exception is thrown
  whether it will escape the scope of a span.
  However, it is trivial to know that an exception
  will escape, if one checks for an active exception just before ending the span,
  as done in the [example above](#exception-end-example).
   It follows that an exception may still escape the scope of the span
  even if the `exception.escaped` attribute was not set or set to false,
  since the event might have been recorded at a time where it was not
  clear whether the exception will escape.
  */
  EXCEPTION_ESCAPED: 'exception.escaped',

  /**
  * Type of the trigger on which the function is executed.
  */
  FAAS_TRIGGER: 'faas.trigger',

  /**
  * The execution ID of the current function execution.
  */
  FAAS_EXECUTION: 'faas.execution',

  /**
  * The name of the source on which the triggering operation was performed. For example, in Cloud Storage or S3 corresponds to the bucket name, and in Cosmos DB to the database name.
  */
  FAAS_DOCUMENT_COLLECTION: 'faas.document.collection',

  /**
  * Describes the type of the operation that was performed on the data.
  */
  FAAS_DOCUMENT_OPERATION: 'faas.document.operation',

  /**
  * A string containing the time when the data was accessed in the [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format expressed in [UTC](https://www.w3.org/TR/NOTE-datetime).
  */
  FAAS_DOCUMENT_TIME: 'faas.document.time',

  /**
  * The document name/table subjected to the operation. For example, in Cloud Storage or S3 is the name of the file, and in Cosmos DB the table name.
  */
  FAAS_DOCUMENT_NAME: 'faas.document.name',

  /**
  * A string containing the function invocation time in the [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format expressed in [UTC](https://www.w3.org/TR/NOTE-datetime).
  */
  FAAS_TIME: 'faas.time',

  /**
  * A string containing the schedule period as [Cron Expression](https://docs.oracle.com/cd/E12058_01/doc/doc.1014/e12030/cron_expressions.htm).
  */
  FAAS_CRON: 'faas.cron',

  /**
  * A boolean that is true if the serverless function is executed for the first time (aka cold-start).
  */
  FAAS_COLDSTART: 'faas.coldstart',

  /**
  * The name of the invoked function.
  *
  * Note: SHOULD be equal to the `faas.name` resource attribute of the invoked function.
  */
  FAAS_INVOKED_NAME: 'faas.invoked_name',

  /**
  * The cloud provider of the invoked function.
  *
  * Note: SHOULD be equal to the `cloud.provider` resource attribute of the invoked function.
  */
  FAAS_INVOKED_PROVIDER: 'faas.invoked_provider',

  /**
  * The cloud region of the invoked function.
  *
  * Note: SHOULD be equal to the `cloud.region` resource attribute of the invoked function.
  */
  FAAS_INVOKED_REGION: 'faas.invoked_region',

  /**
  * Transport protocol used. See note below.
  */
  NET_TRANSPORT: 'net.transport',

  /**
  * Remote address of the peer (dotted decimal for IPv4 or [RFC5952](https://tools.ietf.org/html/rfc5952) for IPv6).
  */
  NET_PEER_IP: 'net.peer.ip',

  /**
  * Remote port number.
  */
  NET_PEER_PORT: 'net.peer.port',

  /**
  * Remote hostname or similar, see note below.
  */
  NET_PEER_NAME: 'net.peer.name',

  /**
  * Like `net.peer.ip` but for the host IP. Useful in case of a multi-IP host.
  */
  NET_HOST_IP: 'net.host.ip',

  /**
  * Like `net.peer.port` but for the host port.
  */
  NET_HOST_PORT: 'net.host.port',

  /**
  * Local hostname or similar, see note below.
  */
  NET_HOST_NAME: 'net.host.name',

  /**
  * The internet connection type currently being used by the host.
  */
  NET_HOST_CONNECTION_TYPE: 'net.host.connection.type',

  /**
  * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.
  */
  NET_HOST_CONNECTION_SUBTYPE: 'net.host.connection.subtype',

  /**
  * The name of the mobile carrier.
  */
  NET_HOST_CARRIER_NAME: 'net.host.carrier.name',

  /**
  * The mobile carrier country code.
  */
  NET_HOST_CARRIER_MCC: 'net.host.carrier.mcc',

  /**
  * The mobile carrier network code.
  */
  NET_HOST_CARRIER_MNC: 'net.host.carrier.mnc',

  /**
  * The ISO 3166-1 alpha-2 2-character country code associated with the mobile carrier network.
  */
  NET_HOST_CARRIER_ICC: 'net.host.carrier.icc',

  /**
  * The [`service.name`](../../resource/semantic_conventions/README.md#service) of the remote service. SHOULD be equal to the actual `service.name` resource attribute of the remote service if any.
  */
  PEER_SERVICE: 'peer.service',

  /**
  * Username or client_id extracted from the access token or [Authorization](https://tools.ietf.org/html/rfc7235#section-4.2) header in the inbound request from outside the system.
  */
  ENDUSER_ID: 'enduser.id',

  /**
  * Actual/assumed role the client is making the request under extracted from token or application security context.
  */
  ENDUSER_ROLE: 'enduser.role',

  /**
  * Scopes or granted authorities the client currently possesses extracted from token or application security context. The value would come from the scope associated with an [OAuth 2.0 Access Token](https://tools.ietf.org/html/rfc6749#section-3.3) or an attribute value in a [SAML 2.0 Assertion](http://docs.oasis-open.org/security/saml/Post2.0/sstc-saml-tech-overview-2.0.html).
  */
  ENDUSER_SCOPE: 'enduser.scope',

  /**
  * Current &#34;managed&#34; thread ID (as opposed to OS thread ID).
  */
  THREAD_ID: 'thread.id',

  /**
  * Current thread name.
  */
  THREAD_NAME: 'thread.name',

  /**
  * The method or function name, or equivalent (usually rightmost part of the code unit&#39;s name).
  */
  CODE_FUNCTION: 'code.function',

  /**
  * The &#34;namespace&#34; within which `code.function` is defined. Usually the qualified class or module name, such that `code.namespace` + some separator + `code.function` form a unique identifier for the code unit.
  */
  CODE_NAMESPACE: 'code.namespace',

  /**
  * The source code file name that identifies the code unit as uniquely as possible (preferably an absolute file path).
  */
  CODE_FILEPATH: 'code.filepath',

  /**
  * The line number in `code.filepath` best representing the operation. It SHOULD point within the code unit named in `code.function`.
  */
  CODE_LINENO: 'code.lineno',

  /**
  * HTTP request method.
  */
  HTTP_METHOD: 'http.method',

  /**
  * Full HTTP request URL in the form `scheme://host[:port]/path?query[#fragment]`. Usually the fragment is not transmitted over HTTP, but if it is known, it should be included nevertheless.
  *
  * Note: `http.url` MUST NOT contain credentials passed via URL in form of `https://username:password@www.example.com/`. In such case the attribute&#39;s value should be `https://www.example.com/`.
  */
  HTTP_URL: 'http.url',

  /**
  * The full request target as passed in a HTTP request line or equivalent.
  */
  HTTP_TARGET: 'http.target',

  /**
  * The value of the [HTTP host header](https://tools.ietf.org/html/rfc7230#section-5.4). When the header is empty or not present, this attribute should be the same.
  */
  HTTP_HOST: 'http.host',

  /**
  * The URI scheme identifying the used protocol.
  */
  HTTP_SCHEME: 'http.scheme',

  /**
  * [HTTP response status code](https://tools.ietf.org/html/rfc7231#section-6).
  */
  HTTP_STATUS_CODE: 'http.status_code',

  /**
  * Kind of HTTP protocol used.
  *
  * Note: If `net.transport` is not specified, it can be assumed to be `IP.TCP` except if `http.flavor` is `QUIC`, in which case `IP.UDP` is assumed.
  */
  HTTP_FLAVOR: 'http.flavor',

  /**
  * Value of the [HTTP User-Agent](https://tools.ietf.org/html/rfc7231#section-5.5.3) header sent by the client.
  */
  HTTP_USER_AGENT: 'http.user_agent',

  /**
  * The size of the request payload body in bytes. This is the number of bytes transferred excluding headers and is often, but not always, present as the [Content-Length](https://tools.ietf.org/html/rfc7230#section-3.3.2) header. For requests using transport encoding, this should be the compressed size.
  */
  HTTP_REQUEST_CONTENT_LENGTH: 'http.request_content_length',

  /**
  * The size of the uncompressed request payload body after transport decoding. Not set if transport encoding not used.
  */
  HTTP_REQUEST_CONTENT_LENGTH_UNCOMPRESSED: 'http.request_content_length_uncompressed',

  /**
  * The size of the response payload body in bytes. This is the number of bytes transferred excluding headers and is often, but not always, present as the [Content-Length](https://tools.ietf.org/html/rfc7230#section-3.3.2) header. For requests using transport encoding, this should be the compressed size.
  */
  HTTP_RESPONSE_CONTENT_LENGTH: 'http.response_content_length',

  /**
  * The size of the uncompressed response payload body after transport decoding. Not set if transport encoding not used.
  */
  HTTP_RESPONSE_CONTENT_LENGTH_UNCOMPRESSED: 'http.response_content_length_uncompressed',

  /**
  * The primary server name of the matched virtual host. This should be obtained via configuration. If no such configuration can be obtained, this attribute MUST NOT be set ( `net.host.name` should be used instead).
  *
  * Note: `http.url` is usually not readily available on the server side but would have to be assembled in a cumbersome and sometimes lossy process from other information (see e.g. open-telemetry/opentelemetry-python/pull/148). It is thus preferred to supply the raw data that is available.
  */
  HTTP_SERVER_NAME: 'http.server_name',

  /**
  * The matched route (path template).
  */
  HTTP_ROUTE: 'http.route',

  /**
  * The IP address of the original client behind all proxies, if known (e.g. from [X-Forwarded-For](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Forwarded-For)).
  *
  * Note: This is not necessarily the same as `net.peer.ip`, which would identify the network-level peer, which may be a proxy.
  */
  HTTP_CLIENT_IP: 'http.client_ip',

  /**
  * The keys in the `RequestItems` object field.
  */
  AWS_DYNAMODB_TABLE_NAMES: 'aws.dynamodb.table_names',

  /**
  * The JSON-serialized value of each item in the `ConsumedCapacity` response field.
  */
  AWS_DYNAMODB_CONSUMED_CAPACITY: 'aws.dynamodb.consumed_capacity',

  /**
  * The JSON-serialized value of the `ItemCollectionMetrics` response field.
  */
  AWS_DYNAMODB_ITEM_COLLECTION_METRICS: 'aws.dynamodb.item_collection_metrics',

  /**
  * The value of the `ProvisionedThroughput.ReadCapacityUnits` request parameter.
  */
  AWS_DYNAMODB_PROVISIONED_READ_CAPACITY: 'aws.dynamodb.provisioned_read_capacity',

  /**
  * The value of the `ProvisionedThroughput.WriteCapacityUnits` request parameter.
  */
  AWS_DYNAMODB_PROVISIONED_WRITE_CAPACITY: 'aws.dynamodb.provisioned_write_capacity',

  /**
  * The value of the `ConsistentRead` request parameter.
  */
  AWS_DYNAMODB_CONSISTENT_READ: 'aws.dynamodb.consistent_read',

  /**
  * The value of the `ProjectionExpression` request parameter.
  */
  AWS_DYNAMODB_PROJECTION: 'aws.dynamodb.projection',

  /**
  * The value of the `Limit` request parameter.
  */
  AWS_DYNAMODB_LIMIT: 'aws.dynamodb.limit',

  /**
  * The value of the `AttributesToGet` request parameter.
  */
  AWS_DYNAMODB_ATTRIBUTES_TO_GET: 'aws.dynamodb.attributes_to_get',

  /**
  * The value of the `IndexName` request parameter.
  */
  AWS_DYNAMODB_INDEX_NAME: 'aws.dynamodb.index_name',

  /**
  * The value of the `Select` request parameter.
  */
  AWS_DYNAMODB_SELECT: 'aws.dynamodb.select',

  /**
  * The JSON-serialized value of each item of the `GlobalSecondaryIndexes` request field.
  */
  AWS_DYNAMODB_GLOBAL_SECONDARY_INDEXES: 'aws.dynamodb.global_secondary_indexes',

  /**
  * The JSON-serialized value of each item of the `LocalSecondaryIndexes` request field.
  */
  AWS_DYNAMODB_LOCAL_SECONDARY_INDEXES: 'aws.dynamodb.local_secondary_indexes',

  /**
  * The value of the `ExclusiveStartTableName` request parameter.
  */
  AWS_DYNAMODB_EXCLUSIVE_START_TABLE: 'aws.dynamodb.exclusive_start_table',

  /**
  * The the number of items in the `TableNames` response parameter.
  */
  AWS_DYNAMODB_TABLE_COUNT: 'aws.dynamodb.table_count',

  /**
  * The value of the `ScanIndexForward` request parameter.
  */
  AWS_DYNAMODB_SCAN_FORWARD: 'aws.dynamodb.scan_forward',

  /**
  * The value of the `Segment` request parameter.
  */
  AWS_DYNAMODB_SEGMENT: 'aws.dynamodb.segment',

  /**
  * The value of the `TotalSegments` request parameter.
  */
  AWS_DYNAMODB_TOTAL_SEGMENTS: 'aws.dynamodb.total_segments',

  /**
  * The value of the `Count` response parameter.
  */
  AWS_DYNAMODB_COUNT: 'aws.dynamodb.count',

  /**
  * The value of the `ScannedCount` response parameter.
  */
  AWS_DYNAMODB_SCANNED_COUNT: 'aws.dynamodb.scanned_count',

  /**
  * The JSON-serialized value of each item in the `AttributeDefinitions` request field.
  */
  AWS_DYNAMODB_ATTRIBUTE_DEFINITIONS: 'aws.dynamodb.attribute_definitions',

  /**
  * The JSON-serialized value of each item in the the `GlobalSecondaryIndexUpdates` request field.
  */
  AWS_DYNAMODB_GLOBAL_SECONDARY_INDEX_UPDATES: 'aws.dynamodb.global_secondary_index_updates',

  /**
  * A string identifying the messaging system.
  */
  MESSAGING_SYSTEM: 'messaging.system',

  /**
  * The message destination name. This might be equal to the span name but is required nevertheless.
  */
  MESSAGING_DESTINATION: 'messaging.destination',

  /**
  * The kind of message destination.
  */
  MESSAGING_DESTINATION_KIND: 'messaging.destination_kind',

  /**
  * A boolean that is true if the message destination is temporary.
  */
  MESSAGING_TEMP_DESTINATION: 'messaging.temp_destination',

  /**
  * The name of the transport protocol.
  */
  MESSAGING_PROTOCOL: 'messaging.protocol',

  /**
  * The version of the transport protocol.
  */
  MESSAGING_PROTOCOL_VERSION: 'messaging.protocol_version',

  /**
  * Connection string.
  */
  MESSAGING_URL: 'messaging.url',

  /**
  * A value used by the messaging system as an identifier for the message, represented as a string.
  */
  MESSAGING_MESSAGE_ID: 'messaging.message_id',

  /**
  * The [conversation ID](#conversations) identifying the conversation to which the message belongs, represented as a string. Sometimes called &#34;Correlation ID&#34;.
  */
  MESSAGING_CONVERSATION_ID: 'messaging.conversation_id',

  /**
  * The (uncompressed) size of the message payload in bytes. Also use this attribute if it is unknown whether the compressed or uncompressed payload size is reported.
  */
  MESSAGING_MESSAGE_PAYLOAD_SIZE_BYTES: 'messaging.message_payload_size_bytes',

  /**
  * The compressed size of the message payload in bytes.
  */
  MESSAGING_MESSAGE_PAYLOAD_COMPRESSED_SIZE_BYTES: 'messaging.message_payload_compressed_size_bytes',

  /**
  * A string identifying the kind of message consumption as defined in the [Operation names](#operation-names) section above. If the operation is &#34;send&#34;, this attribute MUST NOT be set, since the operation can be inferred from the span kind in that case.
  */
  MESSAGING_OPERATION: 'messaging.operation',

  /**
  * RabbitMQ message routing key.
  */
  MESSAGING_RABBITMQ_ROUTING_KEY: 'messaging.rabbitmq.routing_key',

  /**
  * Message keys in Kafka are used for grouping alike messages to ensure they&#39;re processed on the same partition. They differ from `messaging.message_id` in that they&#39;re not unique. If the key is `null`, the attribute MUST NOT be set.
  *
  * Note: If the key type is not string, it&#39;s string representation has to be supplied for the attribute. If the key has no unambiguous, canonical string form, don&#39;t include its value.
  */
  MESSAGING_KAFKA_MESSAGE_KEY: 'messaging.kafka.message_key',

  /**
  * Name of the Kafka Consumer Group that is handling the message. Only applies to consumers, not producers.
  */
  MESSAGING_KAFKA_CONSUMER_GROUP: 'messaging.kafka.consumer_group',

  /**
  * Client Id for the Consumer or Producer that is handling the message.
  */
  MESSAGING_KAFKA_CLIENT_ID: 'messaging.kafka.client_id',

  /**
  * Partition the message is sent to.
  */
  MESSAGING_KAFKA_PARTITION: 'messaging.kafka.partition',

  /**
  * A boolean that is true if the message is a tombstone.
  */
  MESSAGING_KAFKA_TOMBSTONE: 'messaging.kafka.tombstone',

  /**
  * A string identifying the remoting system.
  */
  RPC_SYSTEM: 'rpc.system',

  /**
  * The full (logical) name of the service being called, including its package name, if applicable.
  *
  * Note: This is the logical name of the service from the RPC interface perspective, which can be different from the name of any implementing class. The `code.namespace` attribute may be used to store the latter (despite the attribute name, it may include a class name; e.g., class with method actually executing the call on the server side, RPC client stub class on the client side).
  */
  RPC_SERVICE: 'rpc.service',

  /**
  * The name of the (logical) method being called, must be equal to the $method part in the span name.
  *
  * Note: This is the logical name of the method from the RPC interface perspective, which can be different from the name of any implementing method/function. The `code.function` attribute may be used to store the latter (e.g., method actually executing the call on the server side, RPC client stub method on the client side).
  */
  RPC_METHOD: 'rpc.method',

  /**
  * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.
  */
  RPC_GRPC_STATUS_CODE: 'rpc.grpc.status_code',

  /**
  * Protocol version as in `jsonrpc` property of request/response. Since JSON-RPC 1.0 does not specify this, the value can be omitted.
  */
  RPC_JSONRPC_VERSION: 'rpc.jsonrpc.version',

  /**
  * `id` property of request or response. Since protocol allows id to be int, string, `null` or missing (for notifications), value is expected to be cast to string for simplicity. Use empty string in case of `null` value. Omit entirely if this is a notification.
  */
  RPC_JSONRPC_REQUEST_ID: 'rpc.jsonrpc.request_id',

  /**
  * `error.code` property of response if it is an error response.
  */
  RPC_JSONRPC_ERROR_CODE: 'rpc.jsonrpc.error_code',

  /**
  * `error.message` property of response if it is an error response.
  */
  RPC_JSONRPC_ERROR_MESSAGE: 'rpc.jsonrpc.error_message'
}; // Enum definitions

exports.SemanticAttributes = SemanticAttributes;
var DbSystemValues;
exports.DbSystemValues = DbSystemValues;

(function (DbSystemValues) {
  /** Some other SQL database. Fallback only. See notes. */
  DbSystemValues["OTHER_SQL"] = "other_sql";
  /** Microsoft SQL Server. */

  DbSystemValues["MSSQL"] = "mssql";
  /** MySQL. */

  DbSystemValues["MYSQL"] = "mysql";
  /** Oracle Database. */

  DbSystemValues["ORACLE"] = "oracle";
  /** IBM Db2. */

  DbSystemValues["DB2"] = "db2";
  /** PostgreSQL. */

  DbSystemValues["POSTGRESQL"] = "postgresql";
  /** Amazon Redshift. */

  DbSystemValues["REDSHIFT"] = "redshift";
  /** Apache Hive. */

  DbSystemValues["HIVE"] = "hive";
  /** Cloudscape. */

  DbSystemValues["CLOUDSCAPE"] = "cloudscape";
  /** HyperSQL DataBase. */

  DbSystemValues["HSQLDB"] = "hsqldb";
  /** Progress Database. */

  DbSystemValues["PROGRESS"] = "progress";
  /** SAP MaxDB. */

  DbSystemValues["MAXDB"] = "maxdb";
  /** SAP HANA. */

  DbSystemValues["HANADB"] = "hanadb";
  /** Ingres. */

  DbSystemValues["INGRES"] = "ingres";
  /** FirstSQL. */

  DbSystemValues["FIRSTSQL"] = "firstsql";
  /** EnterpriseDB. */

  DbSystemValues["EDB"] = "edb";
  /** InterSystems Caché. */

  DbSystemValues["CACHE"] = "cache";
  /** Adabas (Adaptable Database System). */

  DbSystemValues["ADABAS"] = "adabas";
  /** Firebird. */

  DbSystemValues["FIREBIRD"] = "firebird";
  /** Apache Derby. */

  DbSystemValues["DERBY"] = "derby";
  /** FileMaker. */

  DbSystemValues["FILEMAKER"] = "filemaker";
  /** Informix. */

  DbSystemValues["INFORMIX"] = "informix";
  /** InstantDB. */

  DbSystemValues["INSTANTDB"] = "instantdb";
  /** InterBase. */

  DbSystemValues["INTERBASE"] = "interbase";
  /** MariaDB. */

  DbSystemValues["MARIADB"] = "mariadb";
  /** Netezza. */

  DbSystemValues["NETEZZA"] = "netezza";
  /** Pervasive PSQL. */

  DbSystemValues["PERVASIVE"] = "pervasive";
  /** PointBase. */

  DbSystemValues["POINTBASE"] = "pointbase";
  /** SQLite. */

  DbSystemValues["SQLITE"] = "sqlite";
  /** Sybase. */

  DbSystemValues["SYBASE"] = "sybase";
  /** Teradata. */

  DbSystemValues["TERADATA"] = "teradata";
  /** Vertica. */

  DbSystemValues["VERTICA"] = "vertica";
  /** H2. */

  DbSystemValues["H2"] = "h2";
  /** ColdFusion IMQ. */

  DbSystemValues["COLDFUSION"] = "coldfusion";
  /** Apache Cassandra. */

  DbSystemValues["CASSANDRA"] = "cassandra";
  /** Apache HBase. */

  DbSystemValues["HBASE"] = "hbase";
  /** MongoDB. */

  DbSystemValues["MONGODB"] = "mongodb";
  /** Redis. */

  DbSystemValues["REDIS"] = "redis";
  /** Couchbase. */

  DbSystemValues["COUCHBASE"] = "couchbase";
  /** CouchDB. */

  DbSystemValues["COUCHDB"] = "couchdb";
  /** Microsoft Azure Cosmos DB. */

  DbSystemValues["COSMOSDB"] = "cosmosdb";
  /** Amazon DynamoDB. */

  DbSystemValues["DYNAMODB"] = "dynamodb";
  /** Neo4j. */

  DbSystemValues["NEO4J"] = "neo4j";
  /** Apache Geode. */

  DbSystemValues["GEODE"] = "geode";
  /** Elasticsearch. */

  DbSystemValues["ELASTICSEARCH"] = "elasticsearch";
  /** Memcached. */

  DbSystemValues["MEMCACHED"] = "memcached";
  /** CockroachDB. */

  DbSystemValues["COCKROACHDB"] = "cockroachdb";
})(DbSystemValues || (exports.DbSystemValues = DbSystemValues = {}));

var DbCassandraConsistencyLevelValues;
exports.DbCassandraConsistencyLevelValues = DbCassandraConsistencyLevelValues;

(function (DbCassandraConsistencyLevelValues) {
  /** all. */
  DbCassandraConsistencyLevelValues["ALL"] = "all";
  /** each_quorum. */

  DbCassandraConsistencyLevelValues["EACH_QUORUM"] = "each_quorum";
  /** quorum. */

  DbCassandraConsistencyLevelValues["QUORUM"] = "quorum";
  /** local_quorum. */

  DbCassandraConsistencyLevelValues["LOCAL_QUORUM"] = "local_quorum";
  /** one. */

  DbCassandraConsistencyLevelValues["ONE"] = "one";
  /** two. */

  DbCassandraConsistencyLevelValues["TWO"] = "two";
  /** three. */

  DbCassandraConsistencyLevelValues["THREE"] = "three";
  /** local_one. */

  DbCassandraConsistencyLevelValues["LOCAL_ONE"] = "local_one";
  /** any. */

  DbCassandraConsistencyLevelValues["ANY"] = "any";
  /** serial. */

  DbCassandraConsistencyLevelValues["SERIAL"] = "serial";
  /** local_serial. */

  DbCassandraConsistencyLevelValues["LOCAL_SERIAL"] = "local_serial";
})(DbCassandraConsistencyLevelValues || (exports.DbCassandraConsistencyLevelValues = DbCassandraConsistencyLevelValues = {}));

var FaasTriggerValues;
exports.FaasTriggerValues = FaasTriggerValues;

(function (FaasTriggerValues) {
  /** A response to some data source operation such as a database or filesystem read/write. */
  FaasTriggerValues["DATASOURCE"] = "datasource";
  /** To provide an answer to an inbound HTTP request. */

  FaasTriggerValues["HTTP"] = "http";
  /** A function is set to be executed when messages are sent to a messaging system. */

  FaasTriggerValues["PUBSUB"] = "pubsub";
  /** A function is scheduled to be executed regularly. */

  FaasTriggerValues["TIMER"] = "timer";
  /** If none of the others apply. */

  FaasTriggerValues["OTHER"] = "other";
})(FaasTriggerValues || (exports.FaasTriggerValues = FaasTriggerValues = {}));

var FaasDocumentOperationValues;
exports.FaasDocumentOperationValues = FaasDocumentOperationValues;

(function (FaasDocumentOperationValues) {
  /** When a new object is created. */
  FaasDocumentOperationValues["INSERT"] = "insert";
  /** When an object is modified. */

  FaasDocumentOperationValues["EDIT"] = "edit";
  /** When an object is deleted. */

  FaasDocumentOperationValues["DELETE"] = "delete";
})(FaasDocumentOperationValues || (exports.FaasDocumentOperationValues = FaasDocumentOperationValues = {}));

var FaasInvokedProviderValues;
exports.FaasInvokedProviderValues = FaasInvokedProviderValues;

(function (FaasInvokedProviderValues) {
  /** Alibaba Cloud. */
  FaasInvokedProviderValues["ALIBABA_CLOUD"] = "alibaba_cloud";
  /** Amazon Web Services. */

  FaasInvokedProviderValues["AWS"] = "aws";
  /** Microsoft Azure. */

  FaasInvokedProviderValues["AZURE"] = "azure";
  /** Google Cloud Platform. */

  FaasInvokedProviderValues["GCP"] = "gcp";
})(FaasInvokedProviderValues || (exports.FaasInvokedProviderValues = FaasInvokedProviderValues = {}));

var NetTransportValues;
exports.NetTransportValues = NetTransportValues;

(function (NetTransportValues) {
  /** ip_tcp. */
  NetTransportValues["IP_TCP"] = "ip_tcp";
  /** ip_udp. */

  NetTransportValues["IP_UDP"] = "ip_udp";
  /** Another IP-based protocol. */

  NetTransportValues["IP"] = "ip";
  /** Unix Domain socket. See below. */

  NetTransportValues["UNIX"] = "unix";
  /** Named or anonymous pipe. See note below. */

  NetTransportValues["PIPE"] = "pipe";
  /** In-process communication. */

  NetTransportValues["INPROC"] = "inproc";
  /** Something else (non IP-based). */

  NetTransportValues["OTHER"] = "other";
})(NetTransportValues || (exports.NetTransportValues = NetTransportValues = {}));

var NetHostConnectionTypeValues;
exports.NetHostConnectionTypeValues = NetHostConnectionTypeValues;

(function (NetHostConnectionTypeValues) {
  /** wifi. */
  NetHostConnectionTypeValues["WIFI"] = "wifi";
  /** wired. */

  NetHostConnectionTypeValues["WIRED"] = "wired";
  /** cell. */

  NetHostConnectionTypeValues["CELL"] = "cell";
  /** unavailable. */

  NetHostConnectionTypeValues["UNAVAILABLE"] = "unavailable";
  /** unknown. */

  NetHostConnectionTypeValues["UNKNOWN"] = "unknown";
})(NetHostConnectionTypeValues || (exports.NetHostConnectionTypeValues = NetHostConnectionTypeValues = {}));

var NetHostConnectionSubtypeValues;
exports.NetHostConnectionSubtypeValues = NetHostConnectionSubtypeValues;

(function (NetHostConnectionSubtypeValues) {
  /** GPRS. */
  NetHostConnectionSubtypeValues["GPRS"] = "gprs";
  /** EDGE. */

  NetHostConnectionSubtypeValues["EDGE"] = "edge";
  /** UMTS. */

  NetHostConnectionSubtypeValues["UMTS"] = "umts";
  /** CDMA. */

  NetHostConnectionSubtypeValues["CDMA"] = "cdma";
  /** EVDO Rel. 0. */

  NetHostConnectionSubtypeValues["EVDO_0"] = "evdo_0";
  /** EVDO Rev. A. */

  NetHostConnectionSubtypeValues["EVDO_A"] = "evdo_a";
  /** CDMA2000 1XRTT. */

  NetHostConnectionSubtypeValues["CDMA2000_1XRTT"] = "cdma2000_1xrtt";
  /** HSDPA. */

  NetHostConnectionSubtypeValues["HSDPA"] = "hsdpa";
  /** HSUPA. */

  NetHostConnectionSubtypeValues["HSUPA"] = "hsupa";
  /** HSPA. */

  NetHostConnectionSubtypeValues["HSPA"] = "hspa";
  /** IDEN. */

  NetHostConnectionSubtypeValues["IDEN"] = "iden";
  /** EVDO Rev. B. */

  NetHostConnectionSubtypeValues["EVDO_B"] = "evdo_b";
  /** LTE. */

  NetHostConnectionSubtypeValues["LTE"] = "lte";
  /** EHRPD. */

  NetHostConnectionSubtypeValues["EHRPD"] = "ehrpd";
  /** HSPAP. */

  NetHostConnectionSubtypeValues["HSPAP"] = "hspap";
  /** GSM. */

  NetHostConnectionSubtypeValues["GSM"] = "gsm";
  /** TD-SCDMA. */

  NetHostConnectionSubtypeValues["TD_SCDMA"] = "td_scdma";
  /** IWLAN. */

  NetHostConnectionSubtypeValues["IWLAN"] = "iwlan";
  /** 5G NR (New Radio). */

  NetHostConnectionSubtypeValues["NR"] = "nr";
  /** 5G NRNSA (New Radio Non-Standalone). */

  NetHostConnectionSubtypeValues["NRNSA"] = "nrnsa";
  /** LTE CA. */

  NetHostConnectionSubtypeValues["LTE_CA"] = "lte_ca";
})(NetHostConnectionSubtypeValues || (exports.NetHostConnectionSubtypeValues = NetHostConnectionSubtypeValues = {}));

var HttpFlavorValues;
exports.HttpFlavorValues = HttpFlavorValues;

(function (HttpFlavorValues) {
  /** HTTP 1.0. */
  HttpFlavorValues["HTTP_1_0"] = "1.0";
  /** HTTP 1.1. */

  HttpFlavorValues["HTTP_1_1"] = "1.1";
  /** HTTP 2. */

  HttpFlavorValues["HTTP_2_0"] = "2.0";
  /** SPDY protocol. */

  HttpFlavorValues["SPDY"] = "SPDY";
  /** QUIC protocol. */

  HttpFlavorValues["QUIC"] = "QUIC";
})(HttpFlavorValues || (exports.HttpFlavorValues = HttpFlavorValues = {}));

var MessagingDestinationKindValues;
exports.MessagingDestinationKindValues = MessagingDestinationKindValues;

(function (MessagingDestinationKindValues) {
  /** A message sent to a queue. */
  MessagingDestinationKindValues["QUEUE"] = "queue";
  /** A message sent to a topic. */

  MessagingDestinationKindValues["TOPIC"] = "topic";
})(MessagingDestinationKindValues || (exports.MessagingDestinationKindValues = MessagingDestinationKindValues = {}));

var MessagingOperationValues;
exports.MessagingOperationValues = MessagingOperationValues;

(function (MessagingOperationValues) {
  /** receive. */
  MessagingOperationValues["RECEIVE"] = "receive";
  /** process. */

  MessagingOperationValues["PROCESS"] = "process";
})(MessagingOperationValues || (exports.MessagingOperationValues = MessagingOperationValues = {}));

var RpcGrpcStatusCodeValues;
exports.RpcGrpcStatusCodeValues = RpcGrpcStatusCodeValues;

(function (RpcGrpcStatusCodeValues) {
  /** OK. */
  RpcGrpcStatusCodeValues[RpcGrpcStatusCodeValues["OK"] = 0] = "OK";
  /** CANCELLED. */

  RpcGrpcStatusCodeValues[RpcGrpcStatusCodeValues["CANCELLED"] = 1] = "CANCELLED";
  /** UNKNOWN. */

  RpcGrpcStatusCodeValues[RpcGrpcStatusCodeValues["UNKNOWN"] = 2] = "UNKNOWN";
  /** INVALID_ARGUMENT. */

  RpcGrpcStatusCodeValues[RpcGrpcStatusCodeValues["INVALID_ARGUMENT"] = 3] = "INVALID_ARGUMENT";
  /** DEADLINE_EXCEEDED. */

  RpcGrpcStatusCodeValues[RpcGrpcStatusCodeValues["DEADLINE_EXCEEDED"] = 4] = "DEADLINE_EXCEEDED";
  /** NOT_FOUND. */

  RpcGrpcStatusCodeValues[RpcGrpcStatusCodeValues["NOT_FOUND"] = 5] = "NOT_FOUND";
  /** ALREADY_EXISTS. */

  RpcGrpcStatusCodeValues[RpcGrpcStatusCodeValues["ALREADY_EXISTS"] = 6] = "ALREADY_EXISTS";
  /** PERMISSION_DENIED. */

  RpcGrpcStatusCodeValues[RpcGrpcStatusCodeValues["PERMISSION_DENIED"] = 7] = "PERMISSION_DENIED";
  /** RESOURCE_EXHAUSTED. */

  RpcGrpcStatusCodeValues[RpcGrpcStatusCodeValues["RESOURCE_EXHAUSTED"] = 8] = "RESOURCE_EXHAUSTED";
  /** FAILED_PRECONDITION. */

  RpcGrpcStatusCodeValues[RpcGrpcStatusCodeValues["FAILED_PRECONDITION"] = 9] = "FAILED_PRECONDITION";
  /** ABORTED. */

  RpcGrpcStatusCodeValues[RpcGrpcStatusCodeValues["ABORTED"] = 10] = "ABORTED";
  /** OUT_OF_RANGE. */

  RpcGrpcStatusCodeValues[RpcGrpcStatusCodeValues["OUT_OF_RANGE"] = 11] = "OUT_OF_RANGE";
  /** UNIMPLEMENTED. */

  RpcGrpcStatusCodeValues[RpcGrpcStatusCodeValues["UNIMPLEMENTED"] = 12] = "UNIMPLEMENTED";
  /** INTERNAL. */

  RpcGrpcStatusCodeValues[RpcGrpcStatusCodeValues["INTERNAL"] = 13] = "INTERNAL";
  /** UNAVAILABLE. */

  RpcGrpcStatusCodeValues[RpcGrpcStatusCodeValues["UNAVAILABLE"] = 14] = "UNAVAILABLE";
  /** DATA_LOSS. */

  RpcGrpcStatusCodeValues[RpcGrpcStatusCodeValues["DATA_LOSS"] = 15] = "DATA_LOSS";
  /** UNAUTHENTICATED. */

  RpcGrpcStatusCodeValues[RpcGrpcStatusCodeValues["UNAUTHENTICATED"] = 16] = "UNAUTHENTICATED";
})(RpcGrpcStatusCodeValues || (exports.RpcGrpcStatusCodeValues = RpcGrpcStatusCodeValues = {}));
},{}],"node_modules/@opentelemetry/semantic-conventions/build/esm/trace/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _SemanticAttributes = require("./SemanticAttributes");

Object.keys(_SemanticAttributes).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _SemanticAttributes[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _SemanticAttributes[key];
    }
  });
});
},{"./SemanticAttributes":"node_modules/@opentelemetry/semantic-conventions/build/esm/trace/SemanticAttributes.js"}],"node_modules/@opentelemetry/semantic-conventions/build/esm/resource/SemanticResourceAttributes.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TelemetrySdkLanguageValues = exports.SemanticResourceAttributes = exports.OsTypeValues = exports.HostArchValues = exports.CloudProviderValues = exports.CloudPlatformValues = exports.AwsEcsLaunchtypeValues = void 0;

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// DO NOT EDIT, this is an Auto-generated file from scripts/semconv/templates//templates/SemanticAttributes.ts.j2
var SemanticResourceAttributes = {
  /**
  * Name of the cloud provider.
  */
  CLOUD_PROVIDER: 'cloud.provider',

  /**
  * The cloud account ID the resource is assigned to.
  */
  CLOUD_ACCOUNT_ID: 'cloud.account.id',

  /**
  * The geographical region the resource is running. Refer to your provider&#39;s docs to see the available regions, for example [Alibaba Cloud regions](https://www.alibabacloud.com/help/doc-detail/40654.htm), [AWS regions](https://aws.amazon.com/about-aws/global-infrastructure/regions_az/), [Azure regions](https://azure.microsoft.com/en-us/global-infrastructure/geographies/), or [Google Cloud regions](https://cloud.google.com/about/locations).
  */
  CLOUD_REGION: 'cloud.region',

  /**
  * Cloud regions often have multiple, isolated locations known as zones to increase availability. Availability zone represents the zone where the resource is running.
  *
  * Note: Availability zones are called &#34;zones&#34; on Alibaba Cloud and Google Cloud.
  */
  CLOUD_AVAILABILITY_ZONE: 'cloud.availability_zone',

  /**
  * The cloud platform in use.
  *
  * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.
  */
  CLOUD_PLATFORM: 'cloud.platform',

  /**
  * The Amazon Resource Name (ARN) of an [ECS container instance](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ECS_instances.html).
  */
  AWS_ECS_CONTAINER_ARN: 'aws.ecs.container.arn',

  /**
  * The ARN of an [ECS cluster](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/clusters.html).
  */
  AWS_ECS_CLUSTER_ARN: 'aws.ecs.cluster.arn',

  /**
  * The [launch type](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html) for an ECS task.
  */
  AWS_ECS_LAUNCHTYPE: 'aws.ecs.launchtype',

  /**
  * The ARN of an [ECS task definition](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definitions.html).
  */
  AWS_ECS_TASK_ARN: 'aws.ecs.task.arn',

  /**
  * The task definition family this task definition is a member of.
  */
  AWS_ECS_TASK_FAMILY: 'aws.ecs.task.family',

  /**
  * The revision for this task definition.
  */
  AWS_ECS_TASK_REVISION: 'aws.ecs.task.revision',

  /**
  * The ARN of an EKS cluster.
  */
  AWS_EKS_CLUSTER_ARN: 'aws.eks.cluster.arn',

  /**
  * The name(s) of the AWS log group(s) an application is writing to.
  *
  * Note: Multiple log groups must be supported for cases like multi-container applications, where a single application has sidecar containers, and each write to their own log group.
  */
  AWS_LOG_GROUP_NAMES: 'aws.log.group.names',

  /**
  * The Amazon Resource Name(s) (ARN) of the AWS log group(s).
  *
  * Note: See the [log group ARN format documentation](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/iam-access-control-overview-cwl.html#CWL_ARN_Format).
  */
  AWS_LOG_GROUP_ARNS: 'aws.log.group.arns',

  /**
  * The name(s) of the AWS log stream(s) an application is writing to.
  */
  AWS_LOG_STREAM_NAMES: 'aws.log.stream.names',

  /**
  * The ARN(s) of the AWS log stream(s).
  *
  * Note: See the [log stream ARN format documentation](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/iam-access-control-overview-cwl.html#CWL_ARN_Format). One log group can contain several log streams, so these ARNs necessarily identify both a log group and a log stream.
  */
  AWS_LOG_STREAM_ARNS: 'aws.log.stream.arns',

  /**
  * Container name.
  */
  CONTAINER_NAME: 'container.name',

  /**
  * Container ID. Usually a UUID, as for example used to [identify Docker containers](https://docs.docker.com/engine/reference/run/#container-identification). The UUID might be abbreviated.
  */
  CONTAINER_ID: 'container.id',

  /**
  * The container runtime managing this container.
  */
  CONTAINER_RUNTIME: 'container.runtime',

  /**
  * Name of the image the container was built on.
  */
  CONTAINER_IMAGE_NAME: 'container.image.name',

  /**
  * Container image tag.
  */
  CONTAINER_IMAGE_TAG: 'container.image.tag',

  /**
  * Name of the [deployment environment](https://en.wikipedia.org/wiki/Deployment_environment) (aka deployment tier).
  */
  DEPLOYMENT_ENVIRONMENT: 'deployment.environment',

  /**
  * A unique identifier representing the device.
  *
  * Note: The device identifier MUST only be defined using the values outlined below. This value is not an advertising identifier and MUST NOT be used as such. On iOS (Swift or Objective-C), this value MUST be equal to the [vendor identifier](https://developer.apple.com/documentation/uikit/uidevice/1620059-identifierforvendor). On Android (Java or Kotlin), this value MUST be equal to the Firebase Installation ID or a globally unique UUID which is persisted across sessions in your application. More information can be found [here](https://developer.android.com/training/articles/user-data-ids) on best practices and exact implementation details. Caution should be taken when storing personal data or anything which can identify a user. GDPR and data protection laws may apply, ensure you do your own due diligence.
  */
  DEVICE_ID: 'device.id',

  /**
  * The model identifier for the device.
  *
  * Note: It&#39;s recommended this value represents a machine readable version of the model identifier rather than the market or consumer-friendly name of the device.
  */
  DEVICE_MODEL_IDENTIFIER: 'device.model.identifier',

  /**
  * The marketing name for the device model.
  *
  * Note: It&#39;s recommended this value represents a human readable version of the device model rather than a machine readable alternative.
  */
  DEVICE_MODEL_NAME: 'device.model.name',

  /**
  * The name of the single function that this runtime instance executes.
  *
  * Note: This is the name of the function as configured/deployed on the FaaS platform and is usually different from the name of the callback function (which may be stored in the [`code.namespace`/`code.function`](../../trace/semantic_conventions/span-general.md#source-code-attributes) span attributes).
  */
  FAAS_NAME: 'faas.name',

  /**
  * The unique ID of the single function that this runtime instance executes.
  *
  * Note: Depending on the cloud provider, use:
   * **AWS Lambda:** The function [ARN](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html).
  Take care not to use the &#34;invoked ARN&#34; directly but replace any
  [alias suffix](https://docs.aws.amazon.com/lambda/latest/dg/configuration-aliases.html) with the resolved function version, as the same runtime instance may be invokable with multiple
  different aliases.
  * **GCP:** The [URI of the resource](https://cloud.google.com/iam/docs/full-resource-names)
  * **Azure:** The [Fully Qualified Resource ID](https://docs.microsoft.com/en-us/rest/api/resources/resources/get-by-id).
   On some providers, it may not be possible to determine the full ID at startup,
  which is why this field cannot be made required. For example, on AWS the account ID
  part of the ARN is not available without calling another AWS API
  which may be deemed too slow for a short-running lambda function.
  As an alternative, consider setting `faas.id` as a span attribute instead.
  */
  FAAS_ID: 'faas.id',

  /**
  * The immutable version of the function being executed.
  *
  * Note: Depending on the cloud provider and platform, use:
   * **AWS Lambda:** The [function version](https://docs.aws.amazon.com/lambda/latest/dg/configuration-versions.html)
  (an integer represented as a decimal string).
  * **Google Cloud Run:** The [revision](https://cloud.google.com/run/docs/managing/revisions)
  (i.e., the function name plus the revision suffix).
  * **Google Cloud Functions:** The value of the
  [`K_REVISION` environment variable](https://cloud.google.com/functions/docs/env-var#runtime_environment_variables_set_automatically).
  * **Azure Functions:** Not applicable. Do not set this attribute.
  */
  FAAS_VERSION: 'faas.version',

  /**
  * The execution environment ID as a string, that will be potentially reused for other invocations to the same function/function version.
  *
  * Note: * **AWS Lambda:** Use the (full) log stream name.
  */
  FAAS_INSTANCE: 'faas.instance',

  /**
  * The amount of memory available to the serverless function in MiB.
  *
  * Note: It&#39;s recommended to set this attribute since e.g. too little memory can easily stop a Java AWS Lambda function from working correctly. On AWS Lambda, the environment variable `AWS_LAMBDA_FUNCTION_MEMORY_SIZE` provides this information.
  */
  FAAS_MAX_MEMORY: 'faas.max_memory',

  /**
  * Unique host ID. For Cloud, this must be the instance_id assigned by the cloud provider.
  */
  HOST_ID: 'host.id',

  /**
  * Name of the host. On Unix systems, it may contain what the hostname command returns, or the fully qualified hostname, or another name specified by the user.
  */
  HOST_NAME: 'host.name',

  /**
  * Type of host. For Cloud, this must be the machine type.
  */
  HOST_TYPE: 'host.type',

  /**
  * The CPU architecture the host system is running on.
  */
  HOST_ARCH: 'host.arch',

  /**
  * Name of the VM image or OS install the host was instantiated from.
  */
  HOST_IMAGE_NAME: 'host.image.name',

  /**
  * VM image ID. For Cloud, this value is from the provider.
  */
  HOST_IMAGE_ID: 'host.image.id',

  /**
  * The version string of the VM image as defined in [Version Attributes](README.md#version-attributes).
  */
  HOST_IMAGE_VERSION: 'host.image.version',

  /**
  * The name of the cluster.
  */
  K8S_CLUSTER_NAME: 'k8s.cluster.name',

  /**
  * The name of the Node.
  */
  K8S_NODE_NAME: 'k8s.node.name',

  /**
  * The UID of the Node.
  */
  K8S_NODE_UID: 'k8s.node.uid',

  /**
  * The name of the namespace that the pod is running in.
  */
  K8S_NAMESPACE_NAME: 'k8s.namespace.name',

  /**
  * The UID of the Pod.
  */
  K8S_POD_UID: 'k8s.pod.uid',

  /**
  * The name of the Pod.
  */
  K8S_POD_NAME: 'k8s.pod.name',

  /**
  * The name of the Container in a Pod template.
  */
  K8S_CONTAINER_NAME: 'k8s.container.name',

  /**
  * The UID of the ReplicaSet.
  */
  K8S_REPLICASET_UID: 'k8s.replicaset.uid',

  /**
  * The name of the ReplicaSet.
  */
  K8S_REPLICASET_NAME: 'k8s.replicaset.name',

  /**
  * The UID of the Deployment.
  */
  K8S_DEPLOYMENT_UID: 'k8s.deployment.uid',

  /**
  * The name of the Deployment.
  */
  K8S_DEPLOYMENT_NAME: 'k8s.deployment.name',

  /**
  * The UID of the StatefulSet.
  */
  K8S_STATEFULSET_UID: 'k8s.statefulset.uid',

  /**
  * The name of the StatefulSet.
  */
  K8S_STATEFULSET_NAME: 'k8s.statefulset.name',

  /**
  * The UID of the DaemonSet.
  */
  K8S_DAEMONSET_UID: 'k8s.daemonset.uid',

  /**
  * The name of the DaemonSet.
  */
  K8S_DAEMONSET_NAME: 'k8s.daemonset.name',

  /**
  * The UID of the Job.
  */
  K8S_JOB_UID: 'k8s.job.uid',

  /**
  * The name of the Job.
  */
  K8S_JOB_NAME: 'k8s.job.name',

  /**
  * The UID of the CronJob.
  */
  K8S_CRONJOB_UID: 'k8s.cronjob.uid',

  /**
  * The name of the CronJob.
  */
  K8S_CRONJOB_NAME: 'k8s.cronjob.name',

  /**
  * The operating system type.
  */
  OS_TYPE: 'os.type',

  /**
  * Human readable (not intended to be parsed) OS version information, like e.g. reported by `ver` or `lsb_release -a` commands.
  */
  OS_DESCRIPTION: 'os.description',

  /**
  * Human readable operating system name.
  */
  OS_NAME: 'os.name',

  /**
  * The version string of the operating system as defined in [Version Attributes](../../resource/semantic_conventions/README.md#version-attributes).
  */
  OS_VERSION: 'os.version',

  /**
  * Process identifier (PID).
  */
  PROCESS_PID: 'process.pid',

  /**
  * The name of the process executable. On Linux based systems, can be set to the `Name` in `proc/[pid]/status`. On Windows, can be set to the base name of `GetProcessImageFileNameW`.
  */
  PROCESS_EXECUTABLE_NAME: 'process.executable.name',

  /**
  * The full path to the process executable. On Linux based systems, can be set to the target of `proc/[pid]/exe`. On Windows, can be set to the result of `GetProcessImageFileNameW`.
  */
  PROCESS_EXECUTABLE_PATH: 'process.executable.path',

  /**
  * The command used to launch the process (i.e. the command name). On Linux based systems, can be set to the zeroth string in `proc/[pid]/cmdline`. On Windows, can be set to the first parameter extracted from `GetCommandLineW`.
  */
  PROCESS_COMMAND: 'process.command',

  /**
  * The full command used to launch the process as a single string representing the full command. On Windows, can be set to the result of `GetCommandLineW`. Do not set this if you have to assemble it just for monitoring; use `process.command_args` instead.
  */
  PROCESS_COMMAND_LINE: 'process.command_line',

  /**
  * All the command arguments (including the command/executable itself) as received by the process. On Linux-based systems (and some other Unixoid systems supporting procfs), can be set according to the list of null-delimited strings extracted from `proc/[pid]/cmdline`. For libc-based executables, this would be the full argv vector passed to `main`.
  */
  PROCESS_COMMAND_ARGS: 'process.command_args',

  /**
  * The username of the user that owns the process.
  */
  PROCESS_OWNER: 'process.owner',

  /**
  * The name of the runtime of this process. For compiled native binaries, this SHOULD be the name of the compiler.
  */
  PROCESS_RUNTIME_NAME: 'process.runtime.name',

  /**
  * The version of the runtime of this process, as returned by the runtime without modification.
  */
  PROCESS_RUNTIME_VERSION: 'process.runtime.version',

  /**
  * An additional description about the runtime of the process, for example a specific vendor customization of the runtime environment.
  */
  PROCESS_RUNTIME_DESCRIPTION: 'process.runtime.description',

  /**
  * Logical name of the service.
  *
  * Note: MUST be the same for all instances of horizontally scaled services. If the value was not specified, SDKs MUST fallback to `unknown_service:` concatenated with [`process.executable.name`](process.md#process), e.g. `unknown_service:bash`. If `process.executable.name` is not available, the value MUST be set to `unknown_service`.
  */
  SERVICE_NAME: 'service.name',

  /**
  * A namespace for `service.name`.
  *
  * Note: A string value having a meaning that helps to distinguish a group of services, for example the team name that owns a group of services. `service.name` is expected to be unique within the same namespace. If `service.namespace` is not specified in the Resource then `service.name` is expected to be unique for all services that have no explicit namespace defined (so the empty/unspecified namespace is simply one more valid namespace). Zero-length namespace string is assumed equal to unspecified namespace.
  */
  SERVICE_NAMESPACE: 'service.namespace',

  /**
  * The string ID of the service instance.
  *
  * Note: MUST be unique for each instance of the same `service.namespace,service.name` pair (in other words `service.namespace,service.name,service.instance.id` triplet MUST be globally unique). The ID helps to distinguish instances of the same service that exist at the same time (e.g. instances of a horizontally scaled service). It is preferable for the ID to be persistent and stay the same for the lifetime of the service instance, however it is acceptable that the ID is ephemeral and changes during important lifetime events for the service (e.g. service restarts). If the service has no inherent unique ID that can be used as the value of this attribute it is recommended to generate a random Version 1 or Version 4 RFC 4122 UUID (services aiming for reproducible UUIDs may also use Version 5, see RFC 4122 for more recommendations).
  */
  SERVICE_INSTANCE_ID: 'service.instance.id',

  /**
  * The version string of the service API or implementation.
  */
  SERVICE_VERSION: 'service.version',

  /**
  * The name of the telemetry SDK as defined above.
  */
  TELEMETRY_SDK_NAME: 'telemetry.sdk.name',

  /**
  * The language of the telemetry SDK.
  */
  TELEMETRY_SDK_LANGUAGE: 'telemetry.sdk.language',

  /**
  * The version string of the telemetry SDK.
  */
  TELEMETRY_SDK_VERSION: 'telemetry.sdk.version',

  /**
  * The version string of the auto instrumentation agent, if used.
  */
  TELEMETRY_AUTO_VERSION: 'telemetry.auto.version',

  /**
  * The name of the web engine.
  */
  WEBENGINE_NAME: 'webengine.name',

  /**
  * The version of the web engine.
  */
  WEBENGINE_VERSION: 'webengine.version',

  /**
  * Additional description of the web engine (e.g. detailed version and edition information).
  */
  WEBENGINE_DESCRIPTION: 'webengine.description'
}; // Enum definitions

exports.SemanticResourceAttributes = SemanticResourceAttributes;
var CloudProviderValues;
exports.CloudProviderValues = CloudProviderValues;

(function (CloudProviderValues) {
  /** Alibaba Cloud. */
  CloudProviderValues["ALIBABA_CLOUD"] = "alibaba_cloud";
  /** Amazon Web Services. */

  CloudProviderValues["AWS"] = "aws";
  /** Microsoft Azure. */

  CloudProviderValues["AZURE"] = "azure";
  /** Google Cloud Platform. */

  CloudProviderValues["GCP"] = "gcp";
})(CloudProviderValues || (exports.CloudProviderValues = CloudProviderValues = {}));

var CloudPlatformValues;
exports.CloudPlatformValues = CloudPlatformValues;

(function (CloudPlatformValues) {
  /** Alibaba Cloud Elastic Compute Service. */
  CloudPlatformValues["ALIBABA_CLOUD_ECS"] = "alibaba_cloud_ecs";
  /** Alibaba Cloud Function Compute. */

  CloudPlatformValues["ALIBABA_CLOUD_FC"] = "alibaba_cloud_fc";
  /** AWS Elastic Compute Cloud. */

  CloudPlatformValues["AWS_EC2"] = "aws_ec2";
  /** AWS Elastic Container Service. */

  CloudPlatformValues["AWS_ECS"] = "aws_ecs";
  /** AWS Elastic Kubernetes Service. */

  CloudPlatformValues["AWS_EKS"] = "aws_eks";
  /** AWS Lambda. */

  CloudPlatformValues["AWS_LAMBDA"] = "aws_lambda";
  /** AWS Elastic Beanstalk. */

  CloudPlatformValues["AWS_ELASTIC_BEANSTALK"] = "aws_elastic_beanstalk";
  /** Azure Virtual Machines. */

  CloudPlatformValues["AZURE_VM"] = "azure_vm";
  /** Azure Container Instances. */

  CloudPlatformValues["AZURE_CONTAINER_INSTANCES"] = "azure_container_instances";
  /** Azure Kubernetes Service. */

  CloudPlatformValues["AZURE_AKS"] = "azure_aks";
  /** Azure Functions. */

  CloudPlatformValues["AZURE_FUNCTIONS"] = "azure_functions";
  /** Azure App Service. */

  CloudPlatformValues["AZURE_APP_SERVICE"] = "azure_app_service";
  /** Google Cloud Compute Engine (GCE). */

  CloudPlatformValues["GCP_COMPUTE_ENGINE"] = "gcp_compute_engine";
  /** Google Cloud Run. */

  CloudPlatformValues["GCP_CLOUD_RUN"] = "gcp_cloud_run";
  /** Google Cloud Kubernetes Engine (GKE). */

  CloudPlatformValues["GCP_KUBERNETES_ENGINE"] = "gcp_kubernetes_engine";
  /** Google Cloud Functions (GCF). */

  CloudPlatformValues["GCP_CLOUD_FUNCTIONS"] = "gcp_cloud_functions";
  /** Google Cloud App Engine (GAE). */

  CloudPlatformValues["GCP_APP_ENGINE"] = "gcp_app_engine";
})(CloudPlatformValues || (exports.CloudPlatformValues = CloudPlatformValues = {}));

var AwsEcsLaunchtypeValues;
exports.AwsEcsLaunchtypeValues = AwsEcsLaunchtypeValues;

(function (AwsEcsLaunchtypeValues) {
  /** ec2. */
  AwsEcsLaunchtypeValues["EC2"] = "ec2";
  /** fargate. */

  AwsEcsLaunchtypeValues["FARGATE"] = "fargate";
})(AwsEcsLaunchtypeValues || (exports.AwsEcsLaunchtypeValues = AwsEcsLaunchtypeValues = {}));

var HostArchValues;
exports.HostArchValues = HostArchValues;

(function (HostArchValues) {
  /** AMD64. */
  HostArchValues["AMD64"] = "amd64";
  /** ARM32. */

  HostArchValues["ARM32"] = "arm32";
  /** ARM64. */

  HostArchValues["ARM64"] = "arm64";
  /** Itanium. */

  HostArchValues["IA64"] = "ia64";
  /** 32-bit PowerPC. */

  HostArchValues["PPC32"] = "ppc32";
  /** 64-bit PowerPC. */

  HostArchValues["PPC64"] = "ppc64";
  /** 32-bit x86. */

  HostArchValues["X86"] = "x86";
})(HostArchValues || (exports.HostArchValues = HostArchValues = {}));

var OsTypeValues;
exports.OsTypeValues = OsTypeValues;

(function (OsTypeValues) {
  /** Microsoft Windows. */
  OsTypeValues["WINDOWS"] = "windows";
  /** Linux. */

  OsTypeValues["LINUX"] = "linux";
  /** Apple Darwin. */

  OsTypeValues["DARWIN"] = "darwin";
  /** FreeBSD. */

  OsTypeValues["FREEBSD"] = "freebsd";
  /** NetBSD. */

  OsTypeValues["NETBSD"] = "netbsd";
  /** OpenBSD. */

  OsTypeValues["OPENBSD"] = "openbsd";
  /** DragonFly BSD. */

  OsTypeValues["DRAGONFLYBSD"] = "dragonflybsd";
  /** HP-UX (Hewlett Packard Unix). */

  OsTypeValues["HPUX"] = "hpux";
  /** AIX (Advanced Interactive eXecutive). */

  OsTypeValues["AIX"] = "aix";
  /** Oracle Solaris. */

  OsTypeValues["SOLARIS"] = "solaris";
  /** IBM z/OS. */

  OsTypeValues["Z_OS"] = "z_os";
})(OsTypeValues || (exports.OsTypeValues = OsTypeValues = {}));

var TelemetrySdkLanguageValues;
exports.TelemetrySdkLanguageValues = TelemetrySdkLanguageValues;

(function (TelemetrySdkLanguageValues) {
  /** cpp. */
  TelemetrySdkLanguageValues["CPP"] = "cpp";
  /** dotnet. */

  TelemetrySdkLanguageValues["DOTNET"] = "dotnet";
  /** erlang. */

  TelemetrySdkLanguageValues["ERLANG"] = "erlang";
  /** go. */

  TelemetrySdkLanguageValues["GO"] = "go";
  /** java. */

  TelemetrySdkLanguageValues["JAVA"] = "java";
  /** nodejs. */

  TelemetrySdkLanguageValues["NODEJS"] = "nodejs";
  /** php. */

  TelemetrySdkLanguageValues["PHP"] = "php";
  /** python. */

  TelemetrySdkLanguageValues["PYTHON"] = "python";
  /** ruby. */

  TelemetrySdkLanguageValues["RUBY"] = "ruby";
  /** webjs. */

  TelemetrySdkLanguageValues["WEBJS"] = "webjs";
})(TelemetrySdkLanguageValues || (exports.TelemetrySdkLanguageValues = TelemetrySdkLanguageValues = {}));
},{}],"node_modules/@opentelemetry/semantic-conventions/build/esm/resource/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _SemanticResourceAttributes = require("./SemanticResourceAttributes");

Object.keys(_SemanticResourceAttributes).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _SemanticResourceAttributes[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _SemanticResourceAttributes[key];
    }
  });
});
},{"./SemanticResourceAttributes":"node_modules/@opentelemetry/semantic-conventions/build/esm/resource/SemanticResourceAttributes.js"}],"node_modules/@opentelemetry/semantic-conventions/build/esm/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _trace = require("./trace");

Object.keys(_trace).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _trace[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _trace[key];
    }
  });
});

var _resource = require("./resource");

Object.keys(_resource).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _resource[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _resource[key];
    }
  });
});
},{"./trace":"node_modules/@opentelemetry/semantic-conventions/build/esm/trace/index.js","./resource":"node_modules/@opentelemetry/semantic-conventions/build/esm/resource/index.js"}],"node_modules/@opentelemetry/core/build/esm/platform/browser/sdk-info.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SDK_INFO = void 0;

var _version = require("../../version");

var _semanticConventions = require("@opentelemetry/semantic-conventions");

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var _a;

/** Constants describing the SDK in use */
var SDK_INFO = (_a = {}, _a[_semanticConventions.SemanticResourceAttributes.TELEMETRY_SDK_NAME] = 'opentelemetry', _a[_semanticConventions.SemanticResourceAttributes.PROCESS_RUNTIME_NAME] = 'browser', _a[_semanticConventions.SemanticResourceAttributes.TELEMETRY_SDK_LANGUAGE] = _semanticConventions.TelemetrySdkLanguageValues.WEBJS, _a[_semanticConventions.SemanticResourceAttributes.TELEMETRY_SDK_VERSION] = _version.VERSION, _a);
exports.SDK_INFO = SDK_INFO;
},{"../../version":"node_modules/@opentelemetry/core/build/esm/version.js","@opentelemetry/semantic-conventions":"node_modules/@opentelemetry/semantic-conventions/build/esm/index.js"}],"node_modules/@opentelemetry/core/build/esm/platform/browser/timer-util.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.unrefTimer = unrefTimer;

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function unrefTimer(_timer) {}
},{}],"node_modules/@opentelemetry/core/build/esm/platform/browser/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _environment = require("./environment");

Object.keys(_environment).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _environment[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _environment[key];
    }
  });
});

var _hexToBase = require("./hex-to-base64");

Object.keys(_hexToBase).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _hexToBase[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _hexToBase[key];
    }
  });
});

var _RandomIdGenerator = require("./RandomIdGenerator");

Object.keys(_RandomIdGenerator).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _RandomIdGenerator[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _RandomIdGenerator[key];
    }
  });
});

var _performance = require("./performance");

Object.keys(_performance).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _performance[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _performance[key];
    }
  });
});

var _sdkInfo = require("./sdk-info");

Object.keys(_sdkInfo).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _sdkInfo[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _sdkInfo[key];
    }
  });
});

var _timerUtil = require("./timer-util");

Object.keys(_timerUtil).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _timerUtil[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _timerUtil[key];
    }
  });
});
},{"./environment":"node_modules/@opentelemetry/core/build/esm/platform/browser/environment.js","./hex-to-base64":"node_modules/@opentelemetry/core/build/esm/platform/browser/hex-to-base64.js","./RandomIdGenerator":"node_modules/@opentelemetry/core/build/esm/platform/browser/RandomIdGenerator.js","./performance":"node_modules/@opentelemetry/core/build/esm/platform/browser/performance.js","./sdk-info":"node_modules/@opentelemetry/core/build/esm/platform/browser/sdk-info.js","./timer-util":"node_modules/@opentelemetry/core/build/esm/platform/browser/timer-util.js"}],"node_modules/@opentelemetry/core/build/esm/common/time.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.hrTime = hrTime;
exports.hrTimeDuration = hrTimeDuration;
exports.hrTimeToMicroseconds = hrTimeToMicroseconds;
exports.hrTimeToMilliseconds = hrTimeToMilliseconds;
exports.hrTimeToNanoseconds = hrTimeToNanoseconds;
exports.hrTimeToTimeStamp = hrTimeToTimeStamp;
exports.isTimeInput = isTimeInput;
exports.isTimeInputHrTime = isTimeInputHrTime;
exports.timeInputToHrTime = timeInputToHrTime;

var _platform = require("../platform");

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var NANOSECOND_DIGITS = 9;
var SECOND_TO_NANOSECONDS = Math.pow(10, NANOSECOND_DIGITS);
/**
 * Converts a number to HrTime
 * @param epochMillis
 */

function numberToHrtime(epochMillis) {
  var epochSeconds = epochMillis / 1000; // Decimals only.

  var seconds = Math.trunc(epochSeconds); // Round sub-nanosecond accuracy to nanosecond.

  var nanos = Number((epochSeconds - seconds).toFixed(NANOSECOND_DIGITS)) * SECOND_TO_NANOSECONDS;
  return [seconds, nanos];
}

function getTimeOrigin() {
  var timeOrigin = _platform.otperformance.timeOrigin;

  if (typeof timeOrigin !== 'number') {
    var perf = _platform.otperformance;
    timeOrigin = perf.timing && perf.timing.fetchStart;
  }

  return timeOrigin;
}
/**
 * Returns an hrtime calculated via performance component.
 * @param performanceNow
 */


function hrTime(performanceNow) {
  var timeOrigin = numberToHrtime(getTimeOrigin());
  var now = numberToHrtime(typeof performanceNow === 'number' ? performanceNow : _platform.otperformance.now());
  var seconds = timeOrigin[0] + now[0];
  var nanos = timeOrigin[1] + now[1]; // Nanoseconds

  if (nanos > SECOND_TO_NANOSECONDS) {
    nanos -= SECOND_TO_NANOSECONDS;
    seconds += 1;
  }

  return [seconds, nanos];
}
/**
 *
 * Converts a TimeInput to an HrTime, defaults to _hrtime().
 * @param time
 */


function timeInputToHrTime(time) {
  // process.hrtime
  if (isTimeInputHrTime(time)) {
    return time;
  } else if (typeof time === 'number') {
    // Must be a performance.now() if it's smaller than process start time.
    if (time < getTimeOrigin()) {
      return hrTime(time);
    } else {
      // epoch milliseconds or performance.timeOrigin
      return numberToHrtime(time);
    }
  } else if (time instanceof Date) {
    return numberToHrtime(time.getTime());
  } else {
    throw TypeError('Invalid input type');
  }
}
/**
 * Returns a duration of two hrTime.
 * @param startTime
 * @param endTime
 */


function hrTimeDuration(startTime, endTime) {
  var seconds = endTime[0] - startTime[0];
  var nanos = endTime[1] - startTime[1]; // overflow

  if (nanos < 0) {
    seconds -= 1; // negate

    nanos += SECOND_TO_NANOSECONDS;
  }

  return [seconds, nanos];
}
/**
 * Convert hrTime to timestamp, for example "2019-05-14T17:00:00.000123456Z"
 * @param time
 */


function hrTimeToTimeStamp(time) {
  var precision = NANOSECOND_DIGITS;
  var tmp = "" + '0'.repeat(precision) + time[1] + "Z";
  var nanoString = tmp.substr(tmp.length - precision - 1);
  var date = new Date(time[0] * 1000).toISOString();
  return date.replace('000Z', nanoString);
}
/**
 * Convert hrTime to nanoseconds.
 * @param time
 */


function hrTimeToNanoseconds(time) {
  return time[0] * SECOND_TO_NANOSECONDS + time[1];
}
/**
 * Convert hrTime to milliseconds.
 * @param time
 */


function hrTimeToMilliseconds(time) {
  return Math.round(time[0] * 1e3 + time[1] / 1e6);
}
/**
 * Convert hrTime to microseconds.
 * @param time
 */


function hrTimeToMicroseconds(time) {
  return Math.round(time[0] * 1e6 + time[1] / 1e3);
}
/**
 * check if time is HrTime
 * @param value
 */


function isTimeInputHrTime(value) {
  return Array.isArray(value) && value.length === 2 && typeof value[0] === 'number' && typeof value[1] === 'number';
}
/**
 * check if input value is a correct types.TimeInput
 * @param value
 */


function isTimeInput(value) {
  return isTimeInputHrTime(value) || typeof value === 'number' || value instanceof Date;
}
},{"../platform":"node_modules/@opentelemetry/core/build/esm/platform/browser/index.js"}],"node_modules/@opentelemetry/core/build/esm/common/types.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/@opentelemetry/core/build/esm/ExportResult.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ExportResultCode = void 0;

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var ExportResultCode;
exports.ExportResultCode = ExportResultCode;

(function (ExportResultCode) {
  ExportResultCode[ExportResultCode["SUCCESS"] = 0] = "SUCCESS";
  ExportResultCode[ExportResultCode["FAILED"] = 1] = "FAILED";
})(ExportResultCode || (exports.ExportResultCode = ExportResultCode = {}));
},{}],"node_modules/@opentelemetry/core/build/esm/propagation/composite.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CompositePropagator = void 0;

var _api = require("@opentelemetry/api");

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/** Combines multiple propagators into a single propagator. */
var CompositePropagator =
/** @class */
function () {
  /**
   * Construct a composite propagator from a list of propagators.
   *
   * @param [config] Configuration object for composite propagator
   */
  function CompositePropagator(config) {
    if (config === void 0) {
      config = {};
    }

    var _a;

    this._propagators = (_a = config.propagators) !== null && _a !== void 0 ? _a : [];
    this._fields = Array.from(new Set(this._propagators // older propagators may not have fields function, null check to be sure
    .map(function (p) {
      return typeof p.fields === 'function' ? p.fields() : [];
    }).reduce(function (x, y) {
      return x.concat(y);
    }, [])));
  }
  /**
   * Run each of the configured propagators with the given context and carrier.
   * Propagators are run in the order they are configured, so if multiple
   * propagators write the same carrier key, the propagator later in the list
   * will "win".
   *
   * @param context Context to inject
   * @param carrier Carrier into which context will be injected
   */


  CompositePropagator.prototype.inject = function (context, carrier, setter) {
    for (var _i = 0, _a = this._propagators; _i < _a.length; _i++) {
      var propagator = _a[_i];

      try {
        propagator.inject(context, carrier, setter);
      } catch (err) {
        _api.diag.warn("Failed to inject with " + propagator.constructor.name + ". Err: " + err.message);
      }
    }
  };
  /**
   * Run each of the configured propagators with the given context and carrier.
   * Propagators are run in the order they are configured, so if multiple
   * propagators write the same context key, the propagator later in the list
   * will "win".
   *
   * @param context Context to add values to
   * @param carrier Carrier from which to extract context
   */


  CompositePropagator.prototype.extract = function (context, carrier, getter) {
    return this._propagators.reduce(function (ctx, propagator) {
      try {
        return propagator.extract(ctx, carrier, getter);
      } catch (err) {
        _api.diag.warn("Failed to inject with " + propagator.constructor.name + ". Err: " + err.message);
      }

      return ctx;
    }, context);
  };

  CompositePropagator.prototype.fields = function () {
    // return a new array so our fields cannot be modified
    return this._fields.slice();
  };

  return CompositePropagator;
}();

exports.CompositePropagator = CompositePropagator;
},{"@opentelemetry/api":"node_modules/@opentelemetry/api/build/esm/index.js"}],"node_modules/@opentelemetry/core/build/esm/internal/validators.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.validateKey = validateKey;
exports.validateValue = validateValue;

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var VALID_KEY_CHAR_RANGE = '[_0-9a-z-*/]';
var VALID_KEY = "[a-z]" + VALID_KEY_CHAR_RANGE + "{0,255}";
var VALID_VENDOR_KEY = "[a-z0-9]" + VALID_KEY_CHAR_RANGE + "{0,240}@[a-z]" + VALID_KEY_CHAR_RANGE + "{0,13}";
var VALID_KEY_REGEX = new RegExp("^(?:" + VALID_KEY + "|" + VALID_VENDOR_KEY + ")$");
var VALID_VALUE_BASE_REGEX = /^[ -~]{0,255}[!-~]$/;
var INVALID_VALUE_COMMA_EQUAL_REGEX = /,|=/;
/**
 * Key is opaque string up to 256 characters printable. It MUST begin with a
 * lowercase letter, and can only contain lowercase letters a-z, digits 0-9,
 * underscores _, dashes -, asterisks *, and forward slashes /.
 * For multi-tenant vendor scenarios, an at sign (@) can be used to prefix the
 * vendor name. Vendors SHOULD set the tenant ID at the beginning of the key.
 * see https://www.w3.org/TR/trace-context/#key
 */

function validateKey(key) {
  return VALID_KEY_REGEX.test(key);
}
/**
 * Value is opaque string up to 256 characters printable ASCII RFC0020
 * characters (i.e., the range 0x20 to 0x7E) except comma , and =.
 */


function validateValue(value) {
  return VALID_VALUE_BASE_REGEX.test(value) && !INVALID_VALUE_COMMA_EQUAL_REGEX.test(value);
}
},{}],"node_modules/@opentelemetry/core/build/esm/trace/TraceState.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TraceState = void 0;

var _validators = require("../internal/validators");

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var MAX_TRACE_STATE_ITEMS = 32;
var MAX_TRACE_STATE_LEN = 512;
var LIST_MEMBERS_SEPARATOR = ',';
var LIST_MEMBER_KEY_VALUE_SPLITTER = '=';
/**
 * TraceState must be a class and not a simple object type because of the spec
 * requirement (https://www.w3.org/TR/trace-context/#tracestate-field).
 *
 * Here is the list of allowed mutations:
 * - New key-value pair should be added into the beginning of the list
 * - The value of any key can be updated. Modified keys MUST be moved to the
 * beginning of the list.
 */

var TraceState =
/** @class */
function () {
  function TraceState(rawTraceState) {
    this._internalState = new Map();
    if (rawTraceState) this._parse(rawTraceState);
  }

  TraceState.prototype.set = function (key, value) {
    // TODO: Benchmark the different approaches(map vs list) and
    // use the faster one.
    var traceState = this._clone();

    if (traceState._internalState.has(key)) {
      traceState._internalState.delete(key);
    }

    traceState._internalState.set(key, value);

    return traceState;
  };

  TraceState.prototype.unset = function (key) {
    var traceState = this._clone();

    traceState._internalState.delete(key);

    return traceState;
  };

  TraceState.prototype.get = function (key) {
    return this._internalState.get(key);
  };

  TraceState.prototype.serialize = function () {
    var _this = this;

    return this._keys().reduce(function (agg, key) {
      agg.push(key + LIST_MEMBER_KEY_VALUE_SPLITTER + _this.get(key));
      return agg;
    }, []).join(LIST_MEMBERS_SEPARATOR);
  };

  TraceState.prototype._parse = function (rawTraceState) {
    if (rawTraceState.length > MAX_TRACE_STATE_LEN) return;
    this._internalState = rawTraceState.split(LIST_MEMBERS_SEPARATOR).reverse() // Store in reverse so new keys (.set(...)) will be placed at the beginning
    .reduce(function (agg, part) {
      var listMember = part.trim(); // Optional Whitespace (OWS) handling

      var i = listMember.indexOf(LIST_MEMBER_KEY_VALUE_SPLITTER);

      if (i !== -1) {
        var key = listMember.slice(0, i);
        var value = listMember.slice(i + 1, part.length);

        if ((0, _validators.validateKey)(key) && (0, _validators.validateValue)(value)) {
          agg.set(key, value);
        } else {// TODO: Consider to add warning log
        }
      }

      return agg;
    }, new Map()); // Because of the reverse() requirement, trunc must be done after map is created

    if (this._internalState.size > MAX_TRACE_STATE_ITEMS) {
      this._internalState = new Map(Array.from(this._internalState.entries()).reverse() // Use reverse same as original tracestate parse chain
      .slice(0, MAX_TRACE_STATE_ITEMS));
    }
  };

  TraceState.prototype._keys = function () {
    return Array.from(this._internalState.keys()).reverse();
  };

  TraceState.prototype._clone = function () {
    var traceState = new TraceState();
    traceState._internalState = new Map(this._internalState);
    return traceState;
  };

  return TraceState;
}();

exports.TraceState = TraceState;
},{"../internal/validators":"node_modules/@opentelemetry/core/build/esm/internal/validators.js"}],"node_modules/@opentelemetry/core/build/esm/trace/W3CTraceContextPropagator.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.W3CTraceContextPropagator = exports.TRACE_STATE_HEADER = exports.TRACE_PARENT_HEADER = void 0;
exports.parseTraceParent = parseTraceParent;

var _api = require("@opentelemetry/api");

var _suppressTracing = require("./suppress-tracing");

var _TraceState = require("./TraceState");

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var TRACE_PARENT_HEADER = 'traceparent';
exports.TRACE_PARENT_HEADER = TRACE_PARENT_HEADER;
var TRACE_STATE_HEADER = 'tracestate';
exports.TRACE_STATE_HEADER = TRACE_STATE_HEADER;
var VERSION = '00';
var VERSION_PART = '(?!ff)[\\da-f]{2}';
var TRACE_ID_PART = '(?![0]{32})[\\da-f]{32}';
var PARENT_ID_PART = '(?![0]{16})[\\da-f]{16}';
var FLAGS_PART = '[\\da-f]{2}';
var TRACE_PARENT_REGEX = new RegExp("^\\s?(" + VERSION_PART + ")-(" + TRACE_ID_PART + ")-(" + PARENT_ID_PART + ")-(" + FLAGS_PART + ")(-.*)?\\s?$");
/**
 * Parses information from the [traceparent] span tag and converts it into {@link SpanContext}
 * @param traceParent - A meta property that comes from server.
 *     It should be dynamically generated server side to have the server's request trace Id,
 *     a parent span Id that was set on the server's request span,
 *     and the trace flags to indicate the server's sampling decision
 *     (01 = sampled, 00 = not sampled).
 *     for example: '{version}-{traceId}-{spanId}-{sampleDecision}'
 *     For more information see {@link https://www.w3.org/TR/trace-context/}
 */

function parseTraceParent(traceParent) {
  var match = TRACE_PARENT_REGEX.exec(traceParent);
  if (!match) return null; // According to the specification the implementation should be compatible
  // with future versions. If there are more parts, we only reject it if it's using version 00
  // See https://www.w3.org/TR/trace-context/#versioning-of-traceparent

  if (match[1] === '00' && match[5]) return null;
  return {
    traceId: match[2],
    spanId: match[3],
    traceFlags: parseInt(match[4], 16)
  };
}
/**
 * Propagates {@link SpanContext} through Trace Context format propagation.
 *
 * Based on the Trace Context specification:
 * https://www.w3.org/TR/trace-context/
 */


var W3CTraceContextPropagator =
/** @class */
function () {
  function W3CTraceContextPropagator() {}

  W3CTraceContextPropagator.prototype.inject = function (context, carrier, setter) {
    var spanContext = _api.trace.getSpanContext(context);

    if (!spanContext || (0, _suppressTracing.isTracingSuppressed)(context) || !(0, _api.isSpanContextValid)(spanContext)) return;
    var traceParent = VERSION + "-" + spanContext.traceId + "-" + spanContext.spanId + "-0" + Number(spanContext.traceFlags || _api.TraceFlags.NONE).toString(16);
    setter.set(carrier, TRACE_PARENT_HEADER, traceParent);

    if (spanContext.traceState) {
      setter.set(carrier, TRACE_STATE_HEADER, spanContext.traceState.serialize());
    }
  };

  W3CTraceContextPropagator.prototype.extract = function (context, carrier, getter) {
    var traceParentHeader = getter.get(carrier, TRACE_PARENT_HEADER);
    if (!traceParentHeader) return context;
    var traceParent = Array.isArray(traceParentHeader) ? traceParentHeader[0] : traceParentHeader;
    if (typeof traceParent !== 'string') return context;
    var spanContext = parseTraceParent(traceParent);
    if (!spanContext) return context;
    spanContext.isRemote = true;
    var traceStateHeader = getter.get(carrier, TRACE_STATE_HEADER);

    if (traceStateHeader) {
      // If more than one `tracestate` header is found, we merge them into a
      // single header.
      var state = Array.isArray(traceStateHeader) ? traceStateHeader.join(',') : traceStateHeader;
      spanContext.traceState = new _TraceState.TraceState(typeof state === 'string' ? state : undefined);
    }

    return _api.trace.setSpanContext(context, spanContext);
  };

  W3CTraceContextPropagator.prototype.fields = function () {
    return [TRACE_PARENT_HEADER, TRACE_STATE_HEADER];
  };

  return W3CTraceContextPropagator;
}();

exports.W3CTraceContextPropagator = W3CTraceContextPropagator;
},{"@opentelemetry/api":"node_modules/@opentelemetry/api/build/esm/index.js","./suppress-tracing":"node_modules/@opentelemetry/core/build/esm/trace/suppress-tracing.js","./TraceState":"node_modules/@opentelemetry/core/build/esm/trace/TraceState.js"}],"node_modules/@opentelemetry/core/build/esm/trace/IdGenerator.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/@opentelemetry/core/build/esm/trace/rpc-metadata.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RPCType = void 0;
exports.deleteRPCMetadata = deleteRPCMetadata;
exports.getRPCMetadata = getRPCMetadata;
exports.setRPCMetadata = setRPCMetadata;

var _api = require("@opentelemetry/api");

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var RPC_METADATA_KEY = (0, _api.createContextKey)('OpenTelemetry SDK Context Key RPC_METADATA');
var RPCType;
exports.RPCType = RPCType;

(function (RPCType) {
  RPCType["HTTP"] = "http";
})(RPCType || (exports.RPCType = RPCType = {}));

function setRPCMetadata(context, meta) {
  return context.setValue(RPC_METADATA_KEY, meta);
}

function deleteRPCMetadata(context) {
  return context.deleteValue(RPC_METADATA_KEY);
}

function getRPCMetadata(context) {
  return context.getValue(RPC_METADATA_KEY);
}
},{"@opentelemetry/api":"node_modules/@opentelemetry/api/build/esm/index.js"}],"node_modules/@opentelemetry/core/build/esm/trace/sampler/AlwaysOffSampler.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AlwaysOffSampler = void 0;

var _api = require("@opentelemetry/api");

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/** Sampler that samples no traces. */
var AlwaysOffSampler =
/** @class */
function () {
  function AlwaysOffSampler() {}

  AlwaysOffSampler.prototype.shouldSample = function () {
    return {
      decision: _api.SamplingDecision.NOT_RECORD
    };
  };

  AlwaysOffSampler.prototype.toString = function () {
    return 'AlwaysOffSampler';
  };

  return AlwaysOffSampler;
}();

exports.AlwaysOffSampler = AlwaysOffSampler;
},{"@opentelemetry/api":"node_modules/@opentelemetry/api/build/esm/index.js"}],"node_modules/@opentelemetry/core/build/esm/trace/sampler/AlwaysOnSampler.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AlwaysOnSampler = void 0;

var _api = require("@opentelemetry/api");

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/** Sampler that samples all traces. */
var AlwaysOnSampler =
/** @class */
function () {
  function AlwaysOnSampler() {}

  AlwaysOnSampler.prototype.shouldSample = function () {
    return {
      decision: _api.SamplingDecision.RECORD_AND_SAMPLED
    };
  };

  AlwaysOnSampler.prototype.toString = function () {
    return 'AlwaysOnSampler';
  };

  return AlwaysOnSampler;
}();

exports.AlwaysOnSampler = AlwaysOnSampler;
},{"@opentelemetry/api":"node_modules/@opentelemetry/api/build/esm/index.js"}],"node_modules/@opentelemetry/core/build/esm/trace/sampler/ParentBasedSampler.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ParentBasedSampler = void 0;

var _api = require("@opentelemetry/api");

var _globalErrorHandler = require("../../common/global-error-handler");

var _AlwaysOffSampler = require("./AlwaysOffSampler");

var _AlwaysOnSampler = require("./AlwaysOnSampler");

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * A composite sampler that either respects the parent span's sampling decision
 * or delegates to `delegateSampler` for root spans.
 */
var ParentBasedSampler =
/** @class */
function () {
  function ParentBasedSampler(config) {
    var _a, _b, _c, _d;

    this._root = config.root;

    if (!this._root) {
      (0, _globalErrorHandler.globalErrorHandler)(new Error('ParentBasedSampler must have a root sampler configured'));
      this._root = new _AlwaysOnSampler.AlwaysOnSampler();
    }

    this._remoteParentSampled = (_a = config.remoteParentSampled) !== null && _a !== void 0 ? _a : new _AlwaysOnSampler.AlwaysOnSampler();
    this._remoteParentNotSampled = (_b = config.remoteParentNotSampled) !== null && _b !== void 0 ? _b : new _AlwaysOffSampler.AlwaysOffSampler();
    this._localParentSampled = (_c = config.localParentSampled) !== null && _c !== void 0 ? _c : new _AlwaysOnSampler.AlwaysOnSampler();
    this._localParentNotSampled = (_d = config.localParentNotSampled) !== null && _d !== void 0 ? _d : new _AlwaysOffSampler.AlwaysOffSampler();
  }

  ParentBasedSampler.prototype.shouldSample = function (context, traceId, spanName, spanKind, attributes, links) {
    var parentContext = _api.trace.getSpanContext(context);

    if (!parentContext || !(0, _api.isSpanContextValid)(parentContext)) {
      return this._root.shouldSample(context, traceId, spanName, spanKind, attributes, links);
    }

    if (parentContext.isRemote) {
      if (parentContext.traceFlags & _api.TraceFlags.SAMPLED) {
        return this._remoteParentSampled.shouldSample(context, traceId, spanName, spanKind, attributes, links);
      }

      return this._remoteParentNotSampled.shouldSample(context, traceId, spanName, spanKind, attributes, links);
    }

    if (parentContext.traceFlags & _api.TraceFlags.SAMPLED) {
      return this._localParentSampled.shouldSample(context, traceId, spanName, spanKind, attributes, links);
    }

    return this._localParentNotSampled.shouldSample(context, traceId, spanName, spanKind, attributes, links);
  };

  ParentBasedSampler.prototype.toString = function () {
    return "ParentBased{root=" + this._root.toString() + ", remoteParentSampled=" + this._remoteParentSampled.toString() + ", remoteParentNotSampled=" + this._remoteParentNotSampled.toString() + ", localParentSampled=" + this._localParentSampled.toString() + ", localParentNotSampled=" + this._localParentNotSampled.toString() + "}";
  };

  return ParentBasedSampler;
}();

exports.ParentBasedSampler = ParentBasedSampler;
},{"@opentelemetry/api":"node_modules/@opentelemetry/api/build/esm/index.js","../../common/global-error-handler":"node_modules/@opentelemetry/core/build/esm/common/global-error-handler.js","./AlwaysOffSampler":"node_modules/@opentelemetry/core/build/esm/trace/sampler/AlwaysOffSampler.js","./AlwaysOnSampler":"node_modules/@opentelemetry/core/build/esm/trace/sampler/AlwaysOnSampler.js"}],"node_modules/@opentelemetry/core/build/esm/trace/sampler/TraceIdRatioBasedSampler.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TraceIdRatioBasedSampler = void 0;

var _api = require("@opentelemetry/api");

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/** Sampler that samples a given fraction of traces based of trace id deterministically. */
var TraceIdRatioBasedSampler =
/** @class */
function () {
  function TraceIdRatioBasedSampler(_ratio) {
    if (_ratio === void 0) {
      _ratio = 0;
    }

    this._ratio = _ratio;
    this._ratio = this._normalize(_ratio);
    this._upperBound = Math.floor(this._ratio * 0xffffffff);
  }

  TraceIdRatioBasedSampler.prototype.shouldSample = function (context, traceId) {
    return {
      decision: (0, _api.isValidTraceId)(traceId) && this._accumulate(traceId) < this._upperBound ? _api.SamplingDecision.RECORD_AND_SAMPLED : _api.SamplingDecision.NOT_RECORD
    };
  };

  TraceIdRatioBasedSampler.prototype.toString = function () {
    return "TraceIdRatioBased{" + this._ratio + "}";
  };

  TraceIdRatioBasedSampler.prototype._normalize = function (ratio) {
    if (typeof ratio !== 'number' || isNaN(ratio)) return 0;
    return ratio >= 1 ? 1 : ratio <= 0 ? 0 : ratio;
  };

  TraceIdRatioBasedSampler.prototype._accumulate = function (traceId) {
    var accumulation = 0;

    for (var i = 0; i < traceId.length / 8; i++) {
      var pos = i * 8;
      var part = parseInt(traceId.slice(pos, pos + 8), 16);
      accumulation = (accumulation ^ part) >>> 0;
    }

    return accumulation;
  };

  return TraceIdRatioBasedSampler;
}();

exports.TraceIdRatioBasedSampler = TraceIdRatioBasedSampler;
},{"@opentelemetry/api":"node_modules/@opentelemetry/api/build/esm/index.js"}],"node_modules/@opentelemetry/core/build/esm/utils/url.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isUrlIgnored = isUrlIgnored;
exports.urlMatches = urlMatches;

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function urlMatches(url, urlToMatch) {
  if (typeof urlToMatch === 'string') {
    return url === urlToMatch;
  } else {
    return urlToMatch.test(url);
  }
}
/**
 * Check if {@param url} should be ignored when comparing against {@param ignoredUrls}
 * @param url
 * @param ignoredUrls
 */


function isUrlIgnored(url, ignoredUrls) {
  if (!ignoredUrls) {
    return false;
  }

  for (var _i = 0, ignoredUrls_1 = ignoredUrls; _i < ignoredUrls_1.length; _i++) {
    var ignoreUrl = ignoredUrls_1[_i];

    if (urlMatches(url, ignoreUrl)) {
      return true;
    }
  }

  return false;
}
},{}],"node_modules/@opentelemetry/core/build/esm/utils/wrap.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isWrapped = isWrapped;

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Checks if certain function has been already wrapped
 * @param func
 */
function isWrapped(func) {
  return typeof func === 'function' && typeof func.__original === 'function' && typeof func.__unwrap === 'function' && func.__wrapped === true;
}
},{}],"node_modules/@opentelemetry/core/build/esm/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _exportNames = {
  baggageUtils: true
};
exports.baggageUtils = void 0;

var _W3CBaggagePropagator = require("./baggage/propagation/W3CBaggagePropagator");

Object.keys(_W3CBaggagePropagator).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _W3CBaggagePropagator[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _W3CBaggagePropagator[key];
    }
  });
});

var _attributes = require("./common/attributes");

Object.keys(_attributes).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _attributes[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _attributes[key];
    }
  });
});

var _globalErrorHandler = require("./common/global-error-handler");

Object.keys(_globalErrorHandler).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _globalErrorHandler[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _globalErrorHandler[key];
    }
  });
});

var _loggingErrorHandler = require("./common/logging-error-handler");

Object.keys(_loggingErrorHandler).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _loggingErrorHandler[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _loggingErrorHandler[key];
    }
  });
});

var _time = require("./common/time");

Object.keys(_time).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _time[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _time[key];
    }
  });
});

var _types = require("./common/types");

Object.keys(_types).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _types[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _types[key];
    }
  });
});

var _ExportResult = require("./ExportResult");

Object.keys(_ExportResult).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _ExportResult[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _ExportResult[key];
    }
  });
});

var _version = require("./version");

Object.keys(_version).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _version[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _version[key];
    }
  });
});

var baggageUtils_1 = _interopRequireWildcard(require("./baggage/utils"));

exports.baggageUtils = baggageUtils_1;

var _platform = require("./platform");

Object.keys(_platform).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _platform[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _platform[key];
    }
  });
});

var _composite = require("./propagation/composite");

Object.keys(_composite).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _composite[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _composite[key];
    }
  });
});

var _W3CTraceContextPropagator = require("./trace/W3CTraceContextPropagator");

Object.keys(_W3CTraceContextPropagator).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _W3CTraceContextPropagator[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _W3CTraceContextPropagator[key];
    }
  });
});

var _IdGenerator = require("./trace/IdGenerator");

Object.keys(_IdGenerator).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _IdGenerator[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _IdGenerator[key];
    }
  });
});

var _rpcMetadata = require("./trace/rpc-metadata");

Object.keys(_rpcMetadata).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _rpcMetadata[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _rpcMetadata[key];
    }
  });
});

var _AlwaysOffSampler = require("./trace/sampler/AlwaysOffSampler");

Object.keys(_AlwaysOffSampler).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _AlwaysOffSampler[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _AlwaysOffSampler[key];
    }
  });
});

var _AlwaysOnSampler = require("./trace/sampler/AlwaysOnSampler");

Object.keys(_AlwaysOnSampler).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _AlwaysOnSampler[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _AlwaysOnSampler[key];
    }
  });
});

var _ParentBasedSampler = require("./trace/sampler/ParentBasedSampler");

Object.keys(_ParentBasedSampler).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _ParentBasedSampler[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _ParentBasedSampler[key];
    }
  });
});

var _TraceIdRatioBasedSampler = require("./trace/sampler/TraceIdRatioBasedSampler");

Object.keys(_TraceIdRatioBasedSampler).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _TraceIdRatioBasedSampler[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _TraceIdRatioBasedSampler[key];
    }
  });
});

var _suppressTracing = require("./trace/suppress-tracing");

Object.keys(_suppressTracing).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _suppressTracing[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _suppressTracing[key];
    }
  });
});

var _TraceState = require("./trace/TraceState");

Object.keys(_TraceState).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _TraceState[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _TraceState[key];
    }
  });
});

var _environment = require("./utils/environment");

Object.keys(_environment).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _environment[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _environment[key];
    }
  });
});

var _sampling = require("./utils/sampling");

Object.keys(_sampling).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _sampling[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _sampling[key];
    }
  });
});

var _url = require("./utils/url");

Object.keys(_url).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _url[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _url[key];
    }
  });
});

var _wrap = require("./utils/wrap");

Object.keys(_wrap).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _wrap[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _wrap[key];
    }
  });
});

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
},{"./baggage/propagation/W3CBaggagePropagator":"node_modules/@opentelemetry/core/build/esm/baggage/propagation/W3CBaggagePropagator.js","./common/attributes":"node_modules/@opentelemetry/core/build/esm/common/attributes.js","./common/global-error-handler":"node_modules/@opentelemetry/core/build/esm/common/global-error-handler.js","./common/logging-error-handler":"node_modules/@opentelemetry/core/build/esm/common/logging-error-handler.js","./common/time":"node_modules/@opentelemetry/core/build/esm/common/time.js","./common/types":"node_modules/@opentelemetry/core/build/esm/common/types.js","./ExportResult":"node_modules/@opentelemetry/core/build/esm/ExportResult.js","./version":"node_modules/@opentelemetry/core/build/esm/version.js","./baggage/utils":"node_modules/@opentelemetry/core/build/esm/baggage/utils.js","./platform":"node_modules/@opentelemetry/core/build/esm/platform/browser/index.js","./propagation/composite":"node_modules/@opentelemetry/core/build/esm/propagation/composite.js","./trace/W3CTraceContextPropagator":"node_modules/@opentelemetry/core/build/esm/trace/W3CTraceContextPropagator.js","./trace/IdGenerator":"node_modules/@opentelemetry/core/build/esm/trace/IdGenerator.js","./trace/rpc-metadata":"node_modules/@opentelemetry/core/build/esm/trace/rpc-metadata.js","./trace/sampler/AlwaysOffSampler":"node_modules/@opentelemetry/core/build/esm/trace/sampler/AlwaysOffSampler.js","./trace/sampler/AlwaysOnSampler":"node_modules/@opentelemetry/core/build/esm/trace/sampler/AlwaysOnSampler.js","./trace/sampler/ParentBasedSampler":"node_modules/@opentelemetry/core/build/esm/trace/sampler/ParentBasedSampler.js","./trace/sampler/TraceIdRatioBasedSampler":"node_modules/@opentelemetry/core/build/esm/trace/sampler/TraceIdRatioBasedSampler.js","./trace/suppress-tracing":"node_modules/@opentelemetry/core/build/esm/trace/suppress-tracing.js","./trace/TraceState":"node_modules/@opentelemetry/core/build/esm/trace/TraceState.js","./utils/environment":"node_modules/@opentelemetry/core/build/esm/utils/environment.js","./utils/sampling":"node_modules/@opentelemetry/core/build/esm/utils/sampling.js","./utils/url":"node_modules/@opentelemetry/core/build/esm/utils/url.js","./utils/wrap":"node_modules/@opentelemetry/core/build/esm/utils/wrap.js"}],"node_modules/@opentelemetry/sdk-trace-base/build/esm/enums.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ExceptionEventName = void 0;

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Event name definitions
var ExceptionEventName = 'exception';
exports.ExceptionEventName = ExceptionEventName;
},{}],"node_modules/@opentelemetry/sdk-trace-base/build/esm/Span.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Span = void 0;

var api = _interopRequireWildcard(require("@opentelemetry/api"));

var _core = require("@opentelemetry/core");

var _semanticConventions = require("@opentelemetry/semantic-conventions");

var _enums = require("./enums");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * This class represents a span.
 */
var Span =
/** @class */
function () {
  /** Constructs a new Span instance. */
  function Span(parentTracer, context, spanName, spanContext, kind, parentSpanId, links, startTime) {
    if (links === void 0) {
      links = [];
    }

    if (startTime === void 0) {
      startTime = (0, _core.hrTime)();
    }

    this.attributes = {};
    this.links = [];
    this.events = [];
    this.status = {
      code: api.SpanStatusCode.UNSET
    };
    this.endTime = [0, 0];
    this._ended = false;
    this._duration = [-1, -1];
    this.name = spanName;
    this._spanContext = spanContext;
    this.parentSpanId = parentSpanId;
    this.kind = kind;
    this.links = links;
    this.startTime = (0, _core.timeInputToHrTime)(startTime);
    this.resource = parentTracer.resource;
    this.instrumentationLibrary = parentTracer.instrumentationLibrary;
    this._spanLimits = parentTracer.getSpanLimits();
    this._spanProcessor = parentTracer.getActiveSpanProcessor();

    this._spanProcessor.onStart(this, context);

    this._attributeValueLengthLimit = this._spanLimits.attributeValueLengthLimit || 0;
  }

  Span.prototype.spanContext = function () {
    return this._spanContext;
  };

  Span.prototype.setAttribute = function (key, value) {
    if (value == null || this._isSpanEnded()) return this;

    if (key.length === 0) {
      api.diag.warn("Invalid attribute key: " + key);
      return this;
    }

    if (!(0, _core.isAttributeValue)(value)) {
      api.diag.warn("Invalid attribute value set for key: " + key);
      return this;
    }

    if (Object.keys(this.attributes).length >= this._spanLimits.attributeCountLimit && !Object.prototype.hasOwnProperty.call(this.attributes, key)) {
      return this;
    }

    this.attributes[key] = this._truncateToSize(value);
    return this;
  };

  Span.prototype.setAttributes = function (attributes) {
    for (var _i = 0, _a = Object.entries(attributes); _i < _a.length; _i++) {
      var _b = _a[_i],
          k = _b[0],
          v = _b[1];
      this.setAttribute(k, v);
    }

    return this;
  };
  /**
   *
   * @param name Span Name
   * @param [attributesOrStartTime] Span attributes or start time
   *     if type is {@type TimeInput} and 3rd param is undefined
   * @param [startTime] Specified start time for the event
   */


  Span.prototype.addEvent = function (name, attributesOrStartTime, startTime) {
    if (this._isSpanEnded()) return this;

    if (this.events.length >= this._spanLimits.eventCountLimit) {
      api.diag.warn('Dropping extra events.');
      this.events.shift();
    }

    if ((0, _core.isTimeInput)(attributesOrStartTime)) {
      if (typeof startTime === 'undefined') {
        startTime = attributesOrStartTime;
      }

      attributesOrStartTime = undefined;
    }

    if (typeof startTime === 'undefined') {
      startTime = (0, _core.hrTime)();
    }

    this.events.push({
      name: name,
      attributes: attributesOrStartTime,
      time: (0, _core.timeInputToHrTime)(startTime)
    });
    return this;
  };

  Span.prototype.setStatus = function (status) {
    if (this._isSpanEnded()) return this;
    this.status = status;
    return this;
  };

  Span.prototype.updateName = function (name) {
    if (this._isSpanEnded()) return this;
    this.name = name;
    return this;
  };

  Span.prototype.end = function (endTime) {
    if (endTime === void 0) {
      endTime = (0, _core.hrTime)();
    }

    if (this._isSpanEnded()) {
      api.diag.error('You can only call end() on a span once.');
      return;
    }

    this._ended = true;
    this.endTime = (0, _core.timeInputToHrTime)(endTime);
    this._duration = (0, _core.hrTimeDuration)(this.startTime, this.endTime);

    if (this._duration[0] < 0) {
      api.diag.warn('Inconsistent start and end time, startTime > endTime', this.startTime, this.endTime);
    }

    this._spanProcessor.onEnd(this);
  };

  Span.prototype.isRecording = function () {
    return this._ended === false;
  };

  Span.prototype.recordException = function (exception, time) {
    if (time === void 0) {
      time = (0, _core.hrTime)();
    }

    var attributes = {};

    if (typeof exception === 'string') {
      attributes[_semanticConventions.SemanticAttributes.EXCEPTION_MESSAGE] = exception;
    } else if (exception) {
      if (exception.code) {
        attributes[_semanticConventions.SemanticAttributes.EXCEPTION_TYPE] = exception.code.toString();
      } else if (exception.name) {
        attributes[_semanticConventions.SemanticAttributes.EXCEPTION_TYPE] = exception.name;
      }

      if (exception.message) {
        attributes[_semanticConventions.SemanticAttributes.EXCEPTION_MESSAGE] = exception.message;
      }

      if (exception.stack) {
        attributes[_semanticConventions.SemanticAttributes.EXCEPTION_STACKTRACE] = exception.stack;
      }
    } // these are minimum requirements from spec


    if (attributes[_semanticConventions.SemanticAttributes.EXCEPTION_TYPE] || attributes[_semanticConventions.SemanticAttributes.EXCEPTION_MESSAGE]) {
      this.addEvent(_enums.ExceptionEventName, attributes, time);
    } else {
      api.diag.warn("Failed to record an exception " + exception);
    }
  };

  Object.defineProperty(Span.prototype, "duration", {
    get: function get() {
      return this._duration;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Span.prototype, "ended", {
    get: function get() {
      return this._ended;
    },
    enumerable: false,
    configurable: true
  });

  Span.prototype._isSpanEnded = function () {
    if (this._ended) {
      api.diag.warn("Can not execute the operation on ended Span {traceId: " + this._spanContext.traceId + ", spanId: " + this._spanContext.spanId + "}");
    }

    return this._ended;
  }; // Utility function to truncate given value within size
  // for value type of string, will truncate to given limit
  // for type of non-string, will return same value


  Span.prototype._truncateToLimitUtil = function (value, limit) {
    if (value.length <= limit) {
      return value;
    }

    return value.substr(0, limit);
  };
  /**
   * If the given attribute value is of type string and has more characters than given {@code attributeValueLengthLimit} then
   * return string with trucated to {@code attributeValueLengthLimit} characters
   *
   * If the given attribute value is array of strings then
   * return new array of strings with each element truncated to {@code attributeValueLengthLimit} characters
   *
   * Otherwise return same Attribute {@code value}
   *
   * @param value Attribute value
   * @returns truncated attribute value if required, otherwise same value
   */


  Span.prototype._truncateToSize = function (value) {
    var _this = this;

    var limit = this._attributeValueLengthLimit; // Check limit

    if (limit <= 0) {
      // Negative values are invalid, so do not truncate
      api.diag.warn("Attribute value limit must be positive, got " + limit);
      return value;
    } // String


    if (typeof value === 'string') {
      return this._truncateToLimitUtil(value, limit);
    } // Array of strings


    if (Array.isArray(value)) {
      return value.map(function (val) {
        return typeof val === 'string' ? _this._truncateToLimitUtil(val, limit) : val;
      });
    } // Other types, no need to apply value length limit


    return value;
  };

  return Span;
}();

exports.Span = Span;
},{"@opentelemetry/api":"node_modules/@opentelemetry/api/build/esm/index.js","@opentelemetry/core":"node_modules/@opentelemetry/core/build/esm/index.js","@opentelemetry/semantic-conventions":"node_modules/@opentelemetry/semantic-conventions/build/esm/index.js","./enums":"node_modules/@opentelemetry/sdk-trace-base/build/esm/enums.js"}],"node_modules/@opentelemetry/sdk-trace-base/build/esm/config.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DEFAULT_CONFIG = void 0;
exports.buildSamplerFromEnv = buildSamplerFromEnv;

var _api = require("@opentelemetry/api");

var _core = require("@opentelemetry/core");

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var env = (0, _core.getEnv)();
var FALLBACK_OTEL_TRACES_SAMPLER = _core.TracesSamplerValues.AlwaysOn;
var DEFAULT_RATIO = 1;
/**
 * Default configuration. For fields with primitive values, any user-provided
 * value will override the corresponding default value. For fields with
 * non-primitive values (like `spanLimits`), the user-provided value will be
 * used to extend the default value.
 */

var DEFAULT_CONFIG = {
  sampler: buildSamplerFromEnv(env),
  forceFlushTimeoutMillis: 30000,
  generalLimits: {
    attributeValueLengthLimit: (0, _core.getEnv)().OTEL_ATTRIBUTE_VALUE_LENGTH_LIMIT,
    attributeCountLimit: (0, _core.getEnv)().OTEL_ATTRIBUTE_COUNT_LIMIT
  },
  spanLimits: {
    attributeValueLengthLimit: (0, _core.getEnv)().OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT,
    attributeCountLimit: (0, _core.getEnv)().OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT,
    linkCountLimit: (0, _core.getEnv)().OTEL_SPAN_LINK_COUNT_LIMIT,
    eventCountLimit: (0, _core.getEnv)().OTEL_SPAN_EVENT_COUNT_LIMIT
  }
};
/**
 * Based on environment, builds a sampler, complies with specification.
 * @param environment optional, by default uses getEnv(), but allows passing a value to reuse parsed environment
 */

exports.DEFAULT_CONFIG = DEFAULT_CONFIG;

function buildSamplerFromEnv(environment) {
  if (environment === void 0) {
    environment = (0, _core.getEnv)();
  }

  switch (environment.OTEL_TRACES_SAMPLER) {
    case _core.TracesSamplerValues.AlwaysOn:
      return new _core.AlwaysOnSampler();

    case _core.TracesSamplerValues.AlwaysOff:
      return new _core.AlwaysOffSampler();

    case _core.TracesSamplerValues.ParentBasedAlwaysOn:
      return new _core.ParentBasedSampler({
        root: new _core.AlwaysOnSampler()
      });

    case _core.TracesSamplerValues.ParentBasedAlwaysOff:
      return new _core.ParentBasedSampler({
        root: new _core.AlwaysOffSampler()
      });

    case _core.TracesSamplerValues.TraceIdRatio:
      return new _core.TraceIdRatioBasedSampler(getSamplerProbabilityFromEnv(environment));

    case _core.TracesSamplerValues.ParentBasedTraceIdRatio:
      return new _core.ParentBasedSampler({
        root: new _core.TraceIdRatioBasedSampler(getSamplerProbabilityFromEnv(environment))
      });

    default:
      _api.diag.error("OTEL_TRACES_SAMPLER value \"" + environment.OTEL_TRACES_SAMPLER + " invalid, defaulting to " + FALLBACK_OTEL_TRACES_SAMPLER + "\".");

      return new _core.AlwaysOnSampler();
  }
}

function getSamplerProbabilityFromEnv(environment) {
  if (environment.OTEL_TRACES_SAMPLER_ARG === undefined || environment.OTEL_TRACES_SAMPLER_ARG === '') {
    _api.diag.error("OTEL_TRACES_SAMPLER_ARG is blank, defaulting to " + DEFAULT_RATIO + ".");

    return DEFAULT_RATIO;
  }

  var probability = Number(environment.OTEL_TRACES_SAMPLER_ARG);

  if (isNaN(probability)) {
    _api.diag.error("OTEL_TRACES_SAMPLER_ARG=" + environment.OTEL_TRACES_SAMPLER_ARG + " was given, but it is invalid, defaulting to " + DEFAULT_RATIO + ".");

    return DEFAULT_RATIO;
  }

  if (probability < 0 || probability > 1) {
    _api.diag.error("OTEL_TRACES_SAMPLER_ARG=" + environment.OTEL_TRACES_SAMPLER_ARG + " was given, but it is out of range ([0..1]), defaulting to " + DEFAULT_RATIO + ".");

    return DEFAULT_RATIO;
  }

  return probability;
}
},{"@opentelemetry/api":"node_modules/@opentelemetry/api/build/esm/index.js","@opentelemetry/core":"node_modules/@opentelemetry/core/build/esm/index.js"}],"node_modules/@opentelemetry/sdk-trace-base/build/esm/utility.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mergeConfig = mergeConfig;

var _core = require("@opentelemetry/core");

var _config = require("./config");

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Function to merge Default configuration (as specified in './config') with
 * user provided configurations.
 */
function mergeConfig(userConfig) {
  var perInstanceDefaults = {
    sampler: (0, _config.buildSamplerFromEnv)()
  };
  var target = Object.assign({}, _config.DEFAULT_CONFIG, perInstanceDefaults, userConfig);
  target.generalLimits = Object.assign({}, _config.DEFAULT_CONFIG.generalLimits, userConfig.generalLimits || {});
  target.spanLimits = Object.assign({}, _config.DEFAULT_CONFIG.spanLimits, userConfig.spanLimits || {});
  /**
   * When span attribute count limit is not defined, but general attribute count limit is defined
   * Then, span attribute count limit will be same as general one
   */

  if (target.spanLimits.attributeCountLimit === _core.DEFAULT_ATTRIBUTE_COUNT_LIMIT && target.generalLimits.attributeCountLimit !== _core.DEFAULT_ATTRIBUTE_COUNT_LIMIT) {
    target.spanLimits.attributeCountLimit = target.generalLimits.attributeCountLimit;
  }
  /**
   * When span attribute value length limit is not defined, but general attribute value length limit is defined
   * Then, span attribute value length limit will be same as general one
   */


  if (target.spanLimits.attributeValueLengthLimit === _core.DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT && target.generalLimits.attributeValueLengthLimit !== _core.DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT) {
    target.spanLimits.attributeValueLengthLimit = target.generalLimits.attributeValueLengthLimit;
  }

  return target;
}
},{"@opentelemetry/core":"node_modules/@opentelemetry/core/build/esm/index.js","./config":"node_modules/@opentelemetry/sdk-trace-base/build/esm/config.js"}],"node_modules/@opentelemetry/sdk-trace-base/build/esm/Tracer.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Tracer = void 0;

var api = _interopRequireWildcard(require("@opentelemetry/api"));

var _core = require("@opentelemetry/core");

var _Span = require("./Span");

var _utility = require("./utility");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * This class represents a basic tracer.
 */
var Tracer =
/** @class */
function () {
  /**
   * Constructs a new Tracer instance.
   */
  function Tracer(instrumentationLibrary, config, _tracerProvider) {
    this._tracerProvider = _tracerProvider;
    var localConfig = (0, _utility.mergeConfig)(config);
    this._sampler = localConfig.sampler;
    this._generalLimits = localConfig.generalLimits;
    this._spanLimits = localConfig.spanLimits;
    this._idGenerator = config.idGenerator || new _core.RandomIdGenerator();
    this.resource = _tracerProvider.resource;
    this.instrumentationLibrary = instrumentationLibrary;
  }
  /**
   * Starts a new Span or returns the default NoopSpan based on the sampling
   * decision.
   */


  Tracer.prototype.startSpan = function (name, options, context) {
    var _a, _b;

    if (options === void 0) {
      options = {};
    }

    if (context === void 0) {
      context = api.context.active();
    }

    if ((0, _core.isTracingSuppressed)(context)) {
      api.diag.debug('Instrumentation suppressed, returning Noop Span');
      return api.trace.wrapSpanContext(api.INVALID_SPAN_CONTEXT);
    }

    var parentContext = getParent(options, context);

    var spanId = this._idGenerator.generateSpanId();

    var traceId;
    var traceState;
    var parentSpanId;

    if (!parentContext || !api.trace.isSpanContextValid(parentContext)) {
      // New root span.
      traceId = this._idGenerator.generateTraceId();
    } else {
      // New child span.
      traceId = parentContext.traceId;
      traceState = parentContext.traceState;
      parentSpanId = parentContext.spanId;
    }

    var spanKind = (_a = options.kind) !== null && _a !== void 0 ? _a : api.SpanKind.INTERNAL;
    var links = (_b = options.links) !== null && _b !== void 0 ? _b : [];
    var attributes = (0, _core.sanitizeAttributes)(options.attributes); // make sampling decision

    var samplingResult = this._sampler.shouldSample(options.root ? api.trace.setSpanContext(context, api.INVALID_SPAN_CONTEXT) : context, traceId, name, spanKind, attributes, links);

    var traceFlags = samplingResult.decision === api.SamplingDecision.RECORD_AND_SAMPLED ? api.TraceFlags.SAMPLED : api.TraceFlags.NONE;
    var spanContext = {
      traceId: traceId,
      spanId: spanId,
      traceFlags: traceFlags,
      traceState: traceState
    };

    if (samplingResult.decision === api.SamplingDecision.NOT_RECORD) {
      api.diag.debug('Recording is off, propagating context in a non-recording span');
      return api.trace.wrapSpanContext(spanContext);
    }

    var span = new _Span.Span(this, context, name, spanContext, spanKind, parentSpanId, links, options.startTime); // Set default attributes

    span.setAttributes(Object.assign(attributes, samplingResult.attributes));
    return span;
  };

  Tracer.prototype.startActiveSpan = function (name, arg2, arg3, arg4) {
    var opts;
    var ctx;
    var fn;

    if (arguments.length < 2) {
      return;
    } else if (arguments.length === 2) {
      fn = arg2;
    } else if (arguments.length === 3) {
      opts = arg2;
      fn = arg3;
    } else {
      opts = arg2;
      ctx = arg3;
      fn = arg4;
    }

    var parentContext = ctx !== null && ctx !== void 0 ? ctx : api.context.active();
    var span = this.startSpan(name, opts, parentContext);
    var contextWithSpanSet = api.trace.setSpan(parentContext, span);
    return api.context.with(contextWithSpanSet, fn, undefined, span);
  };
  /** Returns the active {@link GeneralLimits}. */


  Tracer.prototype.getGeneralLimits = function () {
    return this._generalLimits;
  };
  /** Returns the active {@link SpanLimits}. */


  Tracer.prototype.getSpanLimits = function () {
    return this._spanLimits;
  };

  Tracer.prototype.getActiveSpanProcessor = function () {
    return this._tracerProvider.getActiveSpanProcessor();
  };

  return Tracer;
}();

exports.Tracer = Tracer;

/**
 * Get the parent to assign to a started span. If options.parent is null,
 * do not assign a parent.
 *
 * @param options span options
 * @param context context to check for parent
 */
function getParent(options, context) {
  if (options.root) return undefined;
  return api.trace.getSpanContext(context);
}
},{"@opentelemetry/api":"node_modules/@opentelemetry/api/build/esm/index.js","@opentelemetry/core":"node_modules/@opentelemetry/core/build/esm/index.js","./Span":"node_modules/@opentelemetry/sdk-trace-base/build/esm/Span.js","./utility":"node_modules/@opentelemetry/sdk-trace-base/build/esm/utility.js"}],"node_modules/@opentelemetry/resources/build/esm/platform/browser/default-service-name.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.defaultServiceName = defaultServiceName;

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function defaultServiceName() {
  return 'unknown_service';
}
},{}],"node_modules/@opentelemetry/resources/build/esm/platform/browser/detect-resources.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.detectResources = void 0;

var _Resource = require("../../Resource");

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __awaiter = void 0 && (void 0).__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};

var __generator = void 0 && (void 0).__generator || function (thisArg, body) {
  var _ = {
    label: 0,
    sent: function sent() {
      if (t[0] & 1) throw t[1];
      return t[1];
    },
    trys: [],
    ops: []
  },
      f,
      y,
      t,
      g;
  return g = {
    next: verb(0),
    "throw": verb(1),
    "return": verb(2)
  }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
    return this;
  }), g;

  function verb(n) {
    return function (v) {
      return step([n, v]);
    };
  }

  function step(op) {
    if (f) throw new TypeError("Generator is already executing.");

    while (_) {
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
        if (y = 0, t) op = [op[0] & 2, t.value];

        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;

          case 4:
            _.label++;
            return {
              value: op[1],
              done: false
            };

          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;

          case 7:
            op = _.ops.pop();

            _.trys.pop();

            continue;

          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }

            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }

            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }

            if (t && _.label < t[2]) {
              _.label = t[2];

              _.ops.push(op);

              break;
            }

            if (t[2]) _.ops.pop();

            _.trys.pop();

            continue;
        }

        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    }

    if (op[0] & 5) throw op[1];
    return {
      value: op[0] ? op[1] : void 0,
      done: true
    };
  }
};

/**
 * Detects resources for the browser platform, which is currently only the
 * telemetry SDK resource. More could be added in the future. This method
 * is async to match the signature of corresponding method for node.
 */
var detectResources = function detectResources() {
  return __awaiter(void 0, void 0, void 0, function () {
    return __generator(this, function (_a) {
      return [2
      /*return*/
      , _Resource.Resource.empty()];
    });
  });
};

exports.detectResources = detectResources;
},{"../../Resource":"node_modules/@opentelemetry/resources/build/esm/Resource.js"}],"node_modules/@opentelemetry/resources/build/esm/platform/browser/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _defaultServiceName = require("./default-service-name");

Object.keys(_defaultServiceName).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _defaultServiceName[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _defaultServiceName[key];
    }
  });
});

var _detectResources = require("./detect-resources");

Object.keys(_detectResources).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _detectResources[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _detectResources[key];
    }
  });
});
},{"./default-service-name":"node_modules/@opentelemetry/resources/build/esm/platform/browser/default-service-name.js","./detect-resources":"node_modules/@opentelemetry/resources/build/esm/platform/browser/detect-resources.js"}],"node_modules/@opentelemetry/resources/build/esm/Resource.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Resource = void 0;

var _semanticConventions = require("@opentelemetry/semantic-conventions");

var _core = require("@opentelemetry/core");

var _platform = require("./platform");

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * A Resource describes the entity for which a signals (metrics or trace) are
 * collected.
 */
var Resource =
/** @class */
function () {
  function Resource(
  /**
   * A dictionary of attributes with string keys and values that provide
   * information about the entity as numbers, strings or booleans
   * TODO: Consider to add check/validation on attributes.
   */
  attributes) {
    this.attributes = attributes;
  }
  /**
   * Returns an empty Resource
   */


  Resource.empty = function () {
    return Resource.EMPTY;
  };
  /**
   * Returns a Resource that indentifies the SDK in use.
   */


  Resource.default = function () {
    var _a;

    return new Resource((_a = {}, _a[_semanticConventions.SemanticResourceAttributes.SERVICE_NAME] = (0, _platform.defaultServiceName)(), _a[_semanticConventions.SemanticResourceAttributes.TELEMETRY_SDK_LANGUAGE] = _core.SDK_INFO[_semanticConventions.SemanticResourceAttributes.TELEMETRY_SDK_LANGUAGE], _a[_semanticConventions.SemanticResourceAttributes.TELEMETRY_SDK_NAME] = _core.SDK_INFO[_semanticConventions.SemanticResourceAttributes.TELEMETRY_SDK_NAME], _a[_semanticConventions.SemanticResourceAttributes.TELEMETRY_SDK_VERSION] = _core.SDK_INFO[_semanticConventions.SemanticResourceAttributes.TELEMETRY_SDK_VERSION], _a));
  };
  /**
   * Returns a new, merged {@link Resource} by merging the current Resource
   * with the other Resource. In case of a collision, other Resource takes
   * precedence.
   *
   * @param other the Resource that will be merged with this.
   * @returns the newly merged Resource.
   */


  Resource.prototype.merge = function (other) {
    if (!other || !Object.keys(other.attributes).length) return this; // SpanAttributes from resource overwrite attributes from other resource.

    var mergedAttributes = Object.assign({}, this.attributes, other.attributes);
    return new Resource(mergedAttributes);
  };

  Resource.EMPTY = new Resource({});
  return Resource;
}();

exports.Resource = Resource;
},{"@opentelemetry/semantic-conventions":"node_modules/@opentelemetry/semantic-conventions/build/esm/index.js","@opentelemetry/core":"node_modules/@opentelemetry/core/build/esm/index.js","./platform":"node_modules/@opentelemetry/resources/build/esm/platform/browser/index.js"}],"node_modules/@opentelemetry/resources/build/esm/types.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/@opentelemetry/resources/build/esm/config.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/@opentelemetry/resources/build/esm/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _Resource = require("./Resource");

Object.keys(_Resource).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _Resource[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _Resource[key];
    }
  });
});

var _platform = require("./platform");

Object.keys(_platform).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _platform[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _platform[key];
    }
  });
});

var _types = require("./types");

Object.keys(_types).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _types[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _types[key];
    }
  });
});

var _config = require("./config");

Object.keys(_config).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _config[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _config[key];
    }
  });
});
},{"./Resource":"node_modules/@opentelemetry/resources/build/esm/Resource.js","./platform":"node_modules/@opentelemetry/resources/build/esm/platform/browser/index.js","./types":"node_modules/@opentelemetry/resources/build/esm/types.js","./config":"node_modules/@opentelemetry/resources/build/esm/config.js"}],"node_modules/@opentelemetry/sdk-trace-base/build/esm/MultiSpanProcessor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MultiSpanProcessor = void 0;

var _core = require("@opentelemetry/core");

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Implementation of the {@link SpanProcessor} that simply forwards all
 * received events to a list of {@link SpanProcessor}s.
 */
var MultiSpanProcessor =
/** @class */
function () {
  function MultiSpanProcessor(_spanProcessors) {
    this._spanProcessors = _spanProcessors;
  }

  MultiSpanProcessor.prototype.forceFlush = function () {
    var promises = [];

    for (var _i = 0, _a = this._spanProcessors; _i < _a.length; _i++) {
      var spanProcessor = _a[_i];
      promises.push(spanProcessor.forceFlush());
    }

    return new Promise(function (resolve) {
      Promise.all(promises).then(function () {
        resolve();
      }).catch(function (error) {
        (0, _core.globalErrorHandler)(error || new Error('MultiSpanProcessor: forceFlush failed'));
        resolve();
      });
    });
  };

  MultiSpanProcessor.prototype.onStart = function (span, context) {
    for (var _i = 0, _a = this._spanProcessors; _i < _a.length; _i++) {
      var spanProcessor = _a[_i];
      spanProcessor.onStart(span, context);
    }
  };

  MultiSpanProcessor.prototype.onEnd = function (span) {
    for (var _i = 0, _a = this._spanProcessors; _i < _a.length; _i++) {
      var spanProcessor = _a[_i];
      spanProcessor.onEnd(span);
    }
  };

  MultiSpanProcessor.prototype.shutdown = function () {
    var promises = [];

    for (var _i = 0, _a = this._spanProcessors; _i < _a.length; _i++) {
      var spanProcessor = _a[_i];
      promises.push(spanProcessor.shutdown());
    }

    return new Promise(function (resolve, reject) {
      Promise.all(promises).then(function () {
        resolve();
      }, reject);
    });
  };

  return MultiSpanProcessor;
}();

exports.MultiSpanProcessor = MultiSpanProcessor;
},{"@opentelemetry/core":"node_modules/@opentelemetry/core/build/esm/index.js"}],"node_modules/@opentelemetry/sdk-trace-base/build/esm/export/NoopSpanProcessor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NoopSpanProcessor = void 0;

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/** No-op implementation of SpanProcessor */
var NoopSpanProcessor =
/** @class */
function () {
  function NoopSpanProcessor() {}

  NoopSpanProcessor.prototype.onStart = function (_span, _context) {};

  NoopSpanProcessor.prototype.onEnd = function (_span) {};

  NoopSpanProcessor.prototype.shutdown = function () {
    return Promise.resolve();
  };

  NoopSpanProcessor.prototype.forceFlush = function () {
    return Promise.resolve();
  };

  return NoopSpanProcessor;
}();

exports.NoopSpanProcessor = NoopSpanProcessor;
},{}],"node_modules/lodash.merge/index.js":[function(require,module,exports) {
var global = arguments[3];

/**
 * Lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */

/** Used as the size to enable large array optimizations. */
var LARGE_ARRAY_SIZE = 200;

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/** Used to detect hot functions by number of calls within a span of milliseconds. */
var HOT_COUNT = 800,
    HOT_SPAN = 16;

/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    asyncTag = '[object AsyncFunction]',
    boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    nullTag = '[object Null]',
    objectTag = '[object Object]',
    proxyTag = '[object Proxy]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    undefinedTag = '[object Undefined]',
    weakMapTag = '[object WeakMap]';

var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]',
    float32Tag = '[object Float32Array]',
    float64Tag = '[object Float64Array]',
    int8Tag = '[object Int8Array]',
    int16Tag = '[object Int16Array]',
    int32Tag = '[object Int32Array]',
    uint8Tag = '[object Uint8Array]',
    uint8ClampedTag = '[object Uint8ClampedArray]',
    uint16Tag = '[object Uint16Array]',
    uint32Tag = '[object Uint32Array]';

/**
 * Used to match `RegExp`
 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
 */
var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

/** Used to detect host constructors (Safari). */
var reIsHostCtor = /^\[object .+?Constructor\]$/;

/** Used to detect unsigned integer values. */
var reIsUint = /^(?:0|[1-9]\d*)$/;

/** Used to identify `toStringTag` values of typed arrays. */
var typedArrayTags = {};
typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
typedArrayTags[uint32Tag] = true;
typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
typedArrayTags[errorTag] = typedArrayTags[funcTag] =
typedArrayTags[mapTag] = typedArrayTags[numberTag] =
typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
typedArrayTags[setTag] = typedArrayTags[stringTag] =
typedArrayTags[weakMapTag] = false;

/** Detect free variable `global` from Node.js. */
var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

/** Detect free variable `self`. */
var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root = freeGlobal || freeSelf || Function('return this')();

/** Detect free variable `exports`. */
var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports = freeModule && freeModule.exports === freeExports;

/** Detect free variable `process` from Node.js. */
var freeProcess = moduleExports && freeGlobal.process;

/** Used to access faster Node.js helpers. */
var nodeUtil = (function() {
  try {
    // Use `util.types` for Node.js 10+.
    var types = freeModule && freeModule.require && freeModule.require('util').types;

    if (types) {
      return types;
    }

    // Legacy `process.binding('util')` for Node.js < 10.
    return freeProcess && freeProcess.binding && freeProcess.binding('util');
  } catch (e) {}
}());

/* Node.js helper references. */
var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

/**
 * A faster alternative to `Function#apply`, this function invokes `func`
 * with the `this` binding of `thisArg` and the arguments of `args`.
 *
 * @private
 * @param {Function} func The function to invoke.
 * @param {*} thisArg The `this` binding of `func`.
 * @param {Array} args The arguments to invoke `func` with.
 * @returns {*} Returns the result of `func`.
 */
function apply(func, thisArg, args) {
  switch (args.length) {
    case 0: return func.call(thisArg);
    case 1: return func.call(thisArg, args[0]);
    case 2: return func.call(thisArg, args[0], args[1]);
    case 3: return func.call(thisArg, args[0], args[1], args[2]);
  }
  return func.apply(thisArg, args);
}

/**
 * The base implementation of `_.times` without support for iteratee shorthands
 * or max array length checks.
 *
 * @private
 * @param {number} n The number of times to invoke `iteratee`.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the array of results.
 */
function baseTimes(n, iteratee) {
  var index = -1,
      result = Array(n);

  while (++index < n) {
    result[index] = iteratee(index);
  }
  return result;
}

/**
 * The base implementation of `_.unary` without support for storing metadata.
 *
 * @private
 * @param {Function} func The function to cap arguments for.
 * @returns {Function} Returns the new capped function.
 */
function baseUnary(func) {
  return function(value) {
    return func(value);
  };
}

/**
 * Gets the value at `key` of `object`.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */
function getValue(object, key) {
  return object == null ? undefined : object[key];
}

/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */
function overArg(func, transform) {
  return function(arg) {
    return func(transform(arg));
  };
}

/** Used for built-in method references. */
var arrayProto = Array.prototype,
    funcProto = Function.prototype,
    objectProto = Object.prototype;

/** Used to detect overreaching core-js shims. */
var coreJsData = root['__core-js_shared__'];

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/** Used to detect methods masquerading as native. */
var maskSrcKey = (function() {
  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
  return uid ? ('Symbol(src)_1.' + uid) : '';
}());

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto.toString;

/** Used to infer the `Object` constructor. */
var objectCtorString = funcToString.call(Object);

/** Used to detect if a method is native. */
var reIsNative = RegExp('^' +
  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
);

/** Built-in value references. */
var Buffer = moduleExports ? root.Buffer : undefined,
    Symbol = root.Symbol,
    Uint8Array = root.Uint8Array,
    allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined,
    getPrototype = overArg(Object.getPrototypeOf, Object),
    objectCreate = Object.create,
    propertyIsEnumerable = objectProto.propertyIsEnumerable,
    splice = arrayProto.splice,
    symToStringTag = Symbol ? Symbol.toStringTag : undefined;

var defineProperty = (function() {
  try {
    var func = getNative(Object, 'defineProperty');
    func({}, '', {});
    return func;
  } catch (e) {}
}());

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
    nativeMax = Math.max,
    nativeNow = Date.now;

/* Built-in method references that are verified to be native. */
var Map = getNative(root, 'Map'),
    nativeCreate = getNative(Object, 'create');

/**
 * The base implementation of `_.create` without support for assigning
 * properties to the created object.
 *
 * @private
 * @param {Object} proto The object to inherit from.
 * @returns {Object} Returns the new object.
 */
var baseCreate = (function() {
  function object() {}
  return function(proto) {
    if (!isObject(proto)) {
      return {};
    }
    if (objectCreate) {
      return objectCreate(proto);
    }
    object.prototype = proto;
    var result = new object;
    object.prototype = undefined;
    return result;
  };
}());

/**
 * Creates a hash object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Hash(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

/**
 * Removes all key-value entries from the hash.
 *
 * @private
 * @name clear
 * @memberOf Hash
 */
function hashClear() {
  this.__data__ = nativeCreate ? nativeCreate(null) : {};
  this.size = 0;
}

/**
 * Removes `key` and its value from the hash.
 *
 * @private
 * @name delete
 * @memberOf Hash
 * @param {Object} hash The hash to modify.
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function hashDelete(key) {
  var result = this.has(key) && delete this.__data__[key];
  this.size -= result ? 1 : 0;
  return result;
}

/**
 * Gets the hash value for `key`.
 *
 * @private
 * @name get
 * @memberOf Hash
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function hashGet(key) {
  var data = this.__data__;
  if (nativeCreate) {
    var result = data[key];
    return result === HASH_UNDEFINED ? undefined : result;
  }
  return hasOwnProperty.call(data, key) ? data[key] : undefined;
}

/**
 * Checks if a hash value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Hash
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function hashHas(key) {
  var data = this.__data__;
  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);
}

/**
 * Sets the hash `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Hash
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the hash instance.
 */
function hashSet(key, value) {
  var data = this.__data__;
  this.size += this.has(key) ? 0 : 1;
  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
  return this;
}

// Add methods to `Hash`.
Hash.prototype.clear = hashClear;
Hash.prototype['delete'] = hashDelete;
Hash.prototype.get = hashGet;
Hash.prototype.has = hashHas;
Hash.prototype.set = hashSet;

/**
 * Creates an list cache object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function ListCache(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

/**
 * Removes all key-value entries from the list cache.
 *
 * @private
 * @name clear
 * @memberOf ListCache
 */
function listCacheClear() {
  this.__data__ = [];
  this.size = 0;
}

/**
 * Removes `key` and its value from the list cache.
 *
 * @private
 * @name delete
 * @memberOf ListCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function listCacheDelete(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    return false;
  }
  var lastIndex = data.length - 1;
  if (index == lastIndex) {
    data.pop();
  } else {
    splice.call(data, index, 1);
  }
  --this.size;
  return true;
}

/**
 * Gets the list cache value for `key`.
 *
 * @private
 * @name get
 * @memberOf ListCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function listCacheGet(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  return index < 0 ? undefined : data[index][1];
}

/**
 * Checks if a list cache value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf ListCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function listCacheHas(key) {
  return assocIndexOf(this.__data__, key) > -1;
}

/**
 * Sets the list cache `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf ListCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the list cache instance.
 */
function listCacheSet(key, value) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    ++this.size;
    data.push([key, value]);
  } else {
    data[index][1] = value;
  }
  return this;
}

// Add methods to `ListCache`.
ListCache.prototype.clear = listCacheClear;
ListCache.prototype['delete'] = listCacheDelete;
ListCache.prototype.get = listCacheGet;
ListCache.prototype.has = listCacheHas;
ListCache.prototype.set = listCacheSet;

/**
 * Creates a map cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function MapCache(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

/**
 * Removes all key-value entries from the map.
 *
 * @private
 * @name clear
 * @memberOf MapCache
 */
function mapCacheClear() {
  this.size = 0;
  this.__data__ = {
    'hash': new Hash,
    'map': new (Map || ListCache),
    'string': new Hash
  };
}

/**
 * Removes `key` and its value from the map.
 *
 * @private
 * @name delete
 * @memberOf MapCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function mapCacheDelete(key) {
  var result = getMapData(this, key)['delete'](key);
  this.size -= result ? 1 : 0;
  return result;
}

/**
 * Gets the map value for `key`.
 *
 * @private
 * @name get
 * @memberOf MapCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function mapCacheGet(key) {
  return getMapData(this, key).get(key);
}

/**
 * Checks if a map value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf MapCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function mapCacheHas(key) {
  return getMapData(this, key).has(key);
}

/**
 * Sets the map `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf MapCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the map cache instance.
 */
function mapCacheSet(key, value) {
  var data = getMapData(this, key),
      size = data.size;

  data.set(key, value);
  this.size += data.size == size ? 0 : 1;
  return this;
}

// Add methods to `MapCache`.
MapCache.prototype.clear = mapCacheClear;
MapCache.prototype['delete'] = mapCacheDelete;
MapCache.prototype.get = mapCacheGet;
MapCache.prototype.has = mapCacheHas;
MapCache.prototype.set = mapCacheSet;

/**
 * Creates a stack cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Stack(entries) {
  var data = this.__data__ = new ListCache(entries);
  this.size = data.size;
}

/**
 * Removes all key-value entries from the stack.
 *
 * @private
 * @name clear
 * @memberOf Stack
 */
function stackClear() {
  this.__data__ = new ListCache;
  this.size = 0;
}

/**
 * Removes `key` and its value from the stack.
 *
 * @private
 * @name delete
 * @memberOf Stack
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function stackDelete(key) {
  var data = this.__data__,
      result = data['delete'](key);

  this.size = data.size;
  return result;
}

/**
 * Gets the stack value for `key`.
 *
 * @private
 * @name get
 * @memberOf Stack
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function stackGet(key) {
  return this.__data__.get(key);
}

/**
 * Checks if a stack value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Stack
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function stackHas(key) {
  return this.__data__.has(key);
}

/**
 * Sets the stack `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Stack
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the stack cache instance.
 */
function stackSet(key, value) {
  var data = this.__data__;
  if (data instanceof ListCache) {
    var pairs = data.__data__;
    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
      pairs.push([key, value]);
      this.size = ++data.size;
      return this;
    }
    data = this.__data__ = new MapCache(pairs);
  }
  data.set(key, value);
  this.size = data.size;
  return this;
}

// Add methods to `Stack`.
Stack.prototype.clear = stackClear;
Stack.prototype['delete'] = stackDelete;
Stack.prototype.get = stackGet;
Stack.prototype.has = stackHas;
Stack.prototype.set = stackSet;

/**
 * Creates an array of the enumerable property names of the array-like `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @param {boolean} inherited Specify returning inherited property names.
 * @returns {Array} Returns the array of property names.
 */
function arrayLikeKeys(value, inherited) {
  var isArr = isArray(value),
      isArg = !isArr && isArguments(value),
      isBuff = !isArr && !isArg && isBuffer(value),
      isType = !isArr && !isArg && !isBuff && isTypedArray(value),
      skipIndexes = isArr || isArg || isBuff || isType,
      result = skipIndexes ? baseTimes(value.length, String) : [],
      length = result.length;

  for (var key in value) {
    if ((inherited || hasOwnProperty.call(value, key)) &&
        !(skipIndexes && (
           // Safari 9 has enumerable `arguments.length` in strict mode.
           key == 'length' ||
           // Node.js 0.10 has enumerable non-index properties on buffers.
           (isBuff && (key == 'offset' || key == 'parent')) ||
           // PhantomJS 2 has enumerable non-index properties on typed arrays.
           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
           // Skip index properties.
           isIndex(key, length)
        ))) {
      result.push(key);
    }
  }
  return result;
}

/**
 * This function is like `assignValue` except that it doesn't assign
 * `undefined` values.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */
function assignMergeValue(object, key, value) {
  if ((value !== undefined && !eq(object[key], value)) ||
      (value === undefined && !(key in object))) {
    baseAssignValue(object, key, value);
  }
}

/**
 * Assigns `value` to `key` of `object` if the existing value is not equivalent
 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * for equality comparisons.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */
function assignValue(object, key, value) {
  var objValue = object[key];
  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
      (value === undefined && !(key in object))) {
    baseAssignValue(object, key, value);
  }
}

/**
 * Gets the index at which the `key` is found in `array` of key-value pairs.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} key The key to search for.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function assocIndexOf(array, key) {
  var length = array.length;
  while (length--) {
    if (eq(array[length][0], key)) {
      return length;
    }
  }
  return -1;
}

/**
 * The base implementation of `assignValue` and `assignMergeValue` without
 * value checks.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */
function baseAssignValue(object, key, value) {
  if (key == '__proto__' && defineProperty) {
    defineProperty(object, key, {
      'configurable': true,
      'enumerable': true,
      'value': value,
      'writable': true
    });
  } else {
    object[key] = value;
  }
}

/**
 * The base implementation of `baseForOwn` which iterates over `object`
 * properties returned by `keysFunc` and invokes `iteratee` for each property.
 * Iteratee functions may exit iteration early by explicitly returning `false`.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @returns {Object} Returns `object`.
 */
var baseFor = createBaseFor();

/**
 * The base implementation of `getTag` without fallbacks for buggy environments.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
function baseGetTag(value) {
  if (value == null) {
    return value === undefined ? undefinedTag : nullTag;
  }
  return (symToStringTag && symToStringTag in Object(value))
    ? getRawTag(value)
    : objectToString(value);
}

/**
 * The base implementation of `_.isArguments`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 */
function baseIsArguments(value) {
  return isObjectLike(value) && baseGetTag(value) == argsTag;
}

/**
 * The base implementation of `_.isNative` without bad shim checks.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function,
 *  else `false`.
 */
function baseIsNative(value) {
  if (!isObject(value) || isMasked(value)) {
    return false;
  }
  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
  return pattern.test(toSource(value));
}

/**
 * The base implementation of `_.isTypedArray` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 */
function baseIsTypedArray(value) {
  return isObjectLike(value) &&
    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
}

/**
 * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function baseKeysIn(object) {
  if (!isObject(object)) {
    return nativeKeysIn(object);
  }
  var isProto = isPrototype(object),
      result = [];

  for (var key in object) {
    if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
      result.push(key);
    }
  }
  return result;
}

/**
 * The base implementation of `_.merge` without support for multiple sources.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @param {number} srcIndex The index of `source`.
 * @param {Function} [customizer] The function to customize merged values.
 * @param {Object} [stack] Tracks traversed source values and their merged
 *  counterparts.
 */
function baseMerge(object, source, srcIndex, customizer, stack) {
  if (object === source) {
    return;
  }
  baseFor(source, function(srcValue, key) {
    stack || (stack = new Stack);
    if (isObject(srcValue)) {
      baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
    }
    else {
      var newValue = customizer
        ? customizer(safeGet(object, key), srcValue, (key + ''), object, source, stack)
        : undefined;

      if (newValue === undefined) {
        newValue = srcValue;
      }
      assignMergeValue(object, key, newValue);
    }
  }, keysIn);
}

/**
 * A specialized version of `baseMerge` for arrays and objects which performs
 * deep merges and tracks traversed objects enabling objects with circular
 * references to be merged.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @param {string} key The key of the value to merge.
 * @param {number} srcIndex The index of `source`.
 * @param {Function} mergeFunc The function to merge values.
 * @param {Function} [customizer] The function to customize assigned values.
 * @param {Object} [stack] Tracks traversed source values and their merged
 *  counterparts.
 */
function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
  var objValue = safeGet(object, key),
      srcValue = safeGet(source, key),
      stacked = stack.get(srcValue);

  if (stacked) {
    assignMergeValue(object, key, stacked);
    return;
  }
  var newValue = customizer
    ? customizer(objValue, srcValue, (key + ''), object, source, stack)
    : undefined;

  var isCommon = newValue === undefined;

  if (isCommon) {
    var isArr = isArray(srcValue),
        isBuff = !isArr && isBuffer(srcValue),
        isTyped = !isArr && !isBuff && isTypedArray(srcValue);

    newValue = srcValue;
    if (isArr || isBuff || isTyped) {
      if (isArray(objValue)) {
        newValue = objValue;
      }
      else if (isArrayLikeObject(objValue)) {
        newValue = copyArray(objValue);
      }
      else if (isBuff) {
        isCommon = false;
        newValue = cloneBuffer(srcValue, true);
      }
      else if (isTyped) {
        isCommon = false;
        newValue = cloneTypedArray(srcValue, true);
      }
      else {
        newValue = [];
      }
    }
    else if (isPlainObject(srcValue) || isArguments(srcValue)) {
      newValue = objValue;
      if (isArguments(objValue)) {
        newValue = toPlainObject(objValue);
      }
      else if (!isObject(objValue) || isFunction(objValue)) {
        newValue = initCloneObject(srcValue);
      }
    }
    else {
      isCommon = false;
    }
  }
  if (isCommon) {
    // Recursively merge objects and arrays (susceptible to call stack limits).
    stack.set(srcValue, newValue);
    mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
    stack['delete'](srcValue);
  }
  assignMergeValue(object, key, newValue);
}

/**
 * The base implementation of `_.rest` which doesn't validate or coerce arguments.
 *
 * @private
 * @param {Function} func The function to apply a rest parameter to.
 * @param {number} [start=func.length-1] The start position of the rest parameter.
 * @returns {Function} Returns the new function.
 */
function baseRest(func, start) {
  return setToString(overRest(func, start, identity), func + '');
}

/**
 * The base implementation of `setToString` without support for hot loop shorting.
 *
 * @private
 * @param {Function} func The function to modify.
 * @param {Function} string The `toString` result.
 * @returns {Function} Returns `func`.
 */
var baseSetToString = !defineProperty ? identity : function(func, string) {
  return defineProperty(func, 'toString', {
    'configurable': true,
    'enumerable': false,
    'value': constant(string),
    'writable': true
  });
};

/**
 * Creates a clone of  `buffer`.
 *
 * @private
 * @param {Buffer} buffer The buffer to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Buffer} Returns the cloned buffer.
 */
function cloneBuffer(buffer, isDeep) {
  if (isDeep) {
    return buffer.slice();
  }
  var length = buffer.length,
      result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

  buffer.copy(result);
  return result;
}

/**
 * Creates a clone of `arrayBuffer`.
 *
 * @private
 * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
 * @returns {ArrayBuffer} Returns the cloned array buffer.
 */
function cloneArrayBuffer(arrayBuffer) {
  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
  new Uint8Array(result).set(new Uint8Array(arrayBuffer));
  return result;
}

/**
 * Creates a clone of `typedArray`.
 *
 * @private
 * @param {Object} typedArray The typed array to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned typed array.
 */
function cloneTypedArray(typedArray, isDeep) {
  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
}

/**
 * Copies the values of `source` to `array`.
 *
 * @private
 * @param {Array} source The array to copy values from.
 * @param {Array} [array=[]] The array to copy values to.
 * @returns {Array} Returns `array`.
 */
function copyArray(source, array) {
  var index = -1,
      length = source.length;

  array || (array = Array(length));
  while (++index < length) {
    array[index] = source[index];
  }
  return array;
}

/**
 * Copies properties of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy properties from.
 * @param {Array} props The property identifiers to copy.
 * @param {Object} [object={}] The object to copy properties to.
 * @param {Function} [customizer] The function to customize copied values.
 * @returns {Object} Returns `object`.
 */
function copyObject(source, props, object, customizer) {
  var isNew = !object;
  object || (object = {});

  var index = -1,
      length = props.length;

  while (++index < length) {
    var key = props[index];

    var newValue = customizer
      ? customizer(object[key], source[key], key, object, source)
      : undefined;

    if (newValue === undefined) {
      newValue = source[key];
    }
    if (isNew) {
      baseAssignValue(object, key, newValue);
    } else {
      assignValue(object, key, newValue);
    }
  }
  return object;
}

/**
 * Creates a function like `_.assign`.
 *
 * @private
 * @param {Function} assigner The function to assign values.
 * @returns {Function} Returns the new assigner function.
 */
function createAssigner(assigner) {
  return baseRest(function(object, sources) {
    var index = -1,
        length = sources.length,
        customizer = length > 1 ? sources[length - 1] : undefined,
        guard = length > 2 ? sources[2] : undefined;

    customizer = (assigner.length > 3 && typeof customizer == 'function')
      ? (length--, customizer)
      : undefined;

    if (guard && isIterateeCall(sources[0], sources[1], guard)) {
      customizer = length < 3 ? undefined : customizer;
      length = 1;
    }
    object = Object(object);
    while (++index < length) {
      var source = sources[index];
      if (source) {
        assigner(object, source, index, customizer);
      }
    }
    return object;
  });
}

/**
 * Creates a base function for methods like `_.forIn` and `_.forOwn`.
 *
 * @private
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Function} Returns the new base function.
 */
function createBaseFor(fromRight) {
  return function(object, iteratee, keysFunc) {
    var index = -1,
        iterable = Object(object),
        props = keysFunc(object),
        length = props.length;

    while (length--) {
      var key = props[fromRight ? length : ++index];
      if (iteratee(iterable[key], key, iterable) === false) {
        break;
      }
    }
    return object;
  };
}

/**
 * Gets the data for `map`.
 *
 * @private
 * @param {Object} map The map to query.
 * @param {string} key The reference key.
 * @returns {*} Returns the map data.
 */
function getMapData(map, key) {
  var data = map.__data__;
  return isKeyable(key)
    ? data[typeof key == 'string' ? 'string' : 'hash']
    : data.map;
}

/**
 * Gets the native function at `key` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the method to get.
 * @returns {*} Returns the function if it's native, else `undefined`.
 */
function getNative(object, key) {
  var value = getValue(object, key);
  return baseIsNative(value) ? value : undefined;
}

/**
 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the raw `toStringTag`.
 */
function getRawTag(value) {
  var isOwn = hasOwnProperty.call(value, symToStringTag),
      tag = value[symToStringTag];

  try {
    value[symToStringTag] = undefined;
    var unmasked = true;
  } catch (e) {}

  var result = nativeObjectToString.call(value);
  if (unmasked) {
    if (isOwn) {
      value[symToStringTag] = tag;
    } else {
      delete value[symToStringTag];
    }
  }
  return result;
}

/**
 * Initializes an object clone.
 *
 * @private
 * @param {Object} object The object to clone.
 * @returns {Object} Returns the initialized clone.
 */
function initCloneObject(object) {
  return (typeof object.constructor == 'function' && !isPrototype(object))
    ? baseCreate(getPrototype(object))
    : {};
}

/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */
function isIndex(value, length) {
  var type = typeof value;
  length = length == null ? MAX_SAFE_INTEGER : length;

  return !!length &&
    (type == 'number' ||
      (type != 'symbol' && reIsUint.test(value))) &&
        (value > -1 && value % 1 == 0 && value < length);
}

/**
 * Checks if the given arguments are from an iteratee call.
 *
 * @private
 * @param {*} value The potential iteratee value argument.
 * @param {*} index The potential iteratee index or key argument.
 * @param {*} object The potential iteratee object argument.
 * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
 *  else `false`.
 */
function isIterateeCall(value, index, object) {
  if (!isObject(object)) {
    return false;
  }
  var type = typeof index;
  if (type == 'number'
        ? (isArrayLike(object) && isIndex(index, object.length))
        : (type == 'string' && index in object)
      ) {
    return eq(object[index], value);
  }
  return false;
}

/**
 * Checks if `value` is suitable for use as unique object key.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
 */
function isKeyable(value) {
  var type = typeof value;
  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
    ? (value !== '__proto__')
    : (value === null);
}

/**
 * Checks if `func` has its source masked.
 *
 * @private
 * @param {Function} func The function to check.
 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
 */
function isMasked(func) {
  return !!maskSrcKey && (maskSrcKey in func);
}

/**
 * Checks if `value` is likely a prototype object.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
 */
function isPrototype(value) {
  var Ctor = value && value.constructor,
      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

  return value === proto;
}

/**
 * This function is like
 * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * except that it includes inherited enumerable properties.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function nativeKeysIn(object) {
  var result = [];
  if (object != null) {
    for (var key in Object(object)) {
      result.push(key);
    }
  }
  return result;
}

/**
 * Converts `value` to a string using `Object.prototype.toString`.
 *
 * @private
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 */
function objectToString(value) {
  return nativeObjectToString.call(value);
}

/**
 * A specialized version of `baseRest` which transforms the rest array.
 *
 * @private
 * @param {Function} func The function to apply a rest parameter to.
 * @param {number} [start=func.length-1] The start position of the rest parameter.
 * @param {Function} transform The rest array transform.
 * @returns {Function} Returns the new function.
 */
function overRest(func, start, transform) {
  start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
  return function() {
    var args = arguments,
        index = -1,
        length = nativeMax(args.length - start, 0),
        array = Array(length);

    while (++index < length) {
      array[index] = args[start + index];
    }
    index = -1;
    var otherArgs = Array(start + 1);
    while (++index < start) {
      otherArgs[index] = args[index];
    }
    otherArgs[start] = transform(array);
    return apply(func, this, otherArgs);
  };
}

/**
 * Gets the value at `key`, unless `key` is "__proto__" or "constructor".
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */
function safeGet(object, key) {
  if (key === 'constructor' && typeof object[key] === 'function') {
    return;
  }

  if (key == '__proto__') {
    return;
  }

  return object[key];
}

/**
 * Sets the `toString` method of `func` to return `string`.
 *
 * @private
 * @param {Function} func The function to modify.
 * @param {Function} string The `toString` result.
 * @returns {Function} Returns `func`.
 */
var setToString = shortOut(baseSetToString);

/**
 * Creates a function that'll short out and invoke `identity` instead
 * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
 * milliseconds.
 *
 * @private
 * @param {Function} func The function to restrict.
 * @returns {Function} Returns the new shortable function.
 */
function shortOut(func) {
  var count = 0,
      lastCalled = 0;

  return function() {
    var stamp = nativeNow(),
        remaining = HOT_SPAN - (stamp - lastCalled);

    lastCalled = stamp;
    if (remaining > 0) {
      if (++count >= HOT_COUNT) {
        return arguments[0];
      }
    } else {
      count = 0;
    }
    return func.apply(undefined, arguments);
  };
}

/**
 * Converts `func` to its source code.
 *
 * @private
 * @param {Function} func The function to convert.
 * @returns {string} Returns the source code.
 */
function toSource(func) {
  if (func != null) {
    try {
      return funcToString.call(func);
    } catch (e) {}
    try {
      return (func + '');
    } catch (e) {}
  }
  return '';
}

/**
 * Performs a
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * comparison between two values to determine if they are equivalent.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.eq(object, object);
 * // => true
 *
 * _.eq(object, other);
 * // => false
 *
 * _.eq('a', 'a');
 * // => true
 *
 * _.eq('a', Object('a'));
 * // => false
 *
 * _.eq(NaN, NaN);
 * // => true
 */
function eq(value, other) {
  return value === other || (value !== value && other !== other);
}

/**
 * Checks if `value` is likely an `arguments` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 *  else `false`.
 * @example
 *
 * _.isArguments(function() { return arguments; }());
 * // => true
 *
 * _.isArguments([1, 2, 3]);
 * // => false
 */
var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
    !propertyIsEnumerable.call(value, 'callee');
};

/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */
var isArray = Array.isArray;

/**
 * Checks if `value` is array-like. A value is considered array-like if it's
 * not a function and has a `value.length` that's an integer greater than or
 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
 * @example
 *
 * _.isArrayLike([1, 2, 3]);
 * // => true
 *
 * _.isArrayLike(document.body.children);
 * // => true
 *
 * _.isArrayLike('abc');
 * // => true
 *
 * _.isArrayLike(_.noop);
 * // => false
 */
function isArrayLike(value) {
  return value != null && isLength(value.length) && !isFunction(value);
}

/**
 * This method is like `_.isArrayLike` except that it also checks if `value`
 * is an object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array-like object,
 *  else `false`.
 * @example
 *
 * _.isArrayLikeObject([1, 2, 3]);
 * // => true
 *
 * _.isArrayLikeObject(document.body.children);
 * // => true
 *
 * _.isArrayLikeObject('abc');
 * // => false
 *
 * _.isArrayLikeObject(_.noop);
 * // => false
 */
function isArrayLikeObject(value) {
  return isObjectLike(value) && isArrayLike(value);
}

/**
 * Checks if `value` is a buffer.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
 * @example
 *
 * _.isBuffer(new Buffer(2));
 * // => true
 *
 * _.isBuffer(new Uint8Array(2));
 * // => false
 */
var isBuffer = nativeIsBuffer || stubFalse;

/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */
function isFunction(value) {
  if (!isObject(value)) {
    return false;
  }
  // The use of `Object#toString` avoids issues with the `typeof` operator
  // in Safari 9 which returns 'object' for typed arrays and other constructors.
  var tag = baseGetTag(value);
  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
}

/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This method is loosely based on
 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 *
 * _.isLength(3);
 * // => true
 *
 * _.isLength(Number.MIN_VALUE);
 * // => false
 *
 * _.isLength(Infinity);
 * // => false
 *
 * _.isLength('3');
 * // => false
 */
function isLength(value) {
  return typeof value == 'number' &&
    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
}

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
  var type = typeof value;
  return value != null && (type == 'object' || type == 'function');
}

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return value != null && typeof value == 'object';
}

/**
 * Checks if `value` is a plain object, that is, an object created by the
 * `Object` constructor or one with a `[[Prototype]]` of `null`.
 *
 * @static
 * @memberOf _
 * @since 0.8.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 * }
 *
 * _.isPlainObject(new Foo);
 * // => false
 *
 * _.isPlainObject([1, 2, 3]);
 * // => false
 *
 * _.isPlainObject({ 'x': 0, 'y': 0 });
 * // => true
 *
 * _.isPlainObject(Object.create(null));
 * // => true
 */
function isPlainObject(value) {
  if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
    return false;
  }
  var proto = getPrototype(value);
  if (proto === null) {
    return true;
  }
  var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
  return typeof Ctor == 'function' && Ctor instanceof Ctor &&
    funcToString.call(Ctor) == objectCtorString;
}

/**
 * Checks if `value` is classified as a typed array.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 * @example
 *
 * _.isTypedArray(new Uint8Array);
 * // => true
 *
 * _.isTypedArray([]);
 * // => false
 */
var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

/**
 * Converts `value` to a plain object flattening inherited enumerable string
 * keyed properties of `value` to own properties of the plain object.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {Object} Returns the converted plain object.
 * @example
 *
 * function Foo() {
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.assign({ 'a': 1 }, new Foo);
 * // => { 'a': 1, 'b': 2 }
 *
 * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
 * // => { 'a': 1, 'b': 2, 'c': 3 }
 */
function toPlainObject(value) {
  return copyObject(value, keysIn(value));
}

/**
 * Creates an array of the own and inherited enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keysIn(new Foo);
 * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
 */
function keysIn(object) {
  return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
}

/**
 * This method is like `_.assign` except that it recursively merges own and
 * inherited enumerable string keyed properties of source objects into the
 * destination object. Source properties that resolve to `undefined` are
 * skipped if a destination value exists. Array and plain object properties
 * are merged recursively. Other objects and value types are overridden by
 * assignment. Source objects are applied from left to right. Subsequent
 * sources overwrite property assignments of previous sources.
 *
 * **Note:** This method mutates `object`.
 *
 * @static
 * @memberOf _
 * @since 0.5.0
 * @category Object
 * @param {Object} object The destination object.
 * @param {...Object} [sources] The source objects.
 * @returns {Object} Returns `object`.
 * @example
 *
 * var object = {
 *   'a': [{ 'b': 2 }, { 'd': 4 }]
 * };
 *
 * var other = {
 *   'a': [{ 'c': 3 }, { 'e': 5 }]
 * };
 *
 * _.merge(object, other);
 * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
 */
var merge = createAssigner(function(object, source, srcIndex) {
  baseMerge(object, source, srcIndex);
});

/**
 * Creates a function that returns `value`.
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Util
 * @param {*} value The value to return from the new function.
 * @returns {Function} Returns the new constant function.
 * @example
 *
 * var objects = _.times(2, _.constant({ 'a': 1 }));
 *
 * console.log(objects);
 * // => [{ 'a': 1 }, { 'a': 1 }]
 *
 * console.log(objects[0] === objects[1]);
 * // => true
 */
function constant(value) {
  return function() {
    return value;
  };
}

/**
 * This method returns the first argument it receives.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Util
 * @param {*} value Any value.
 * @returns {*} Returns `value`.
 * @example
 *
 * var object = { 'a': 1 };
 *
 * console.log(_.identity(object) === object);
 * // => true
 */
function identity(value) {
  return value;
}

/**
 * This method returns `false`.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {boolean} Returns `false`.
 * @example
 *
 * _.times(2, _.stubFalse);
 * // => [false, false]
 */
function stubFalse() {
  return false;
}

module.exports = merge;

},{}],"node_modules/@opentelemetry/sdk-trace-base/build/esm/export/BatchSpanProcessorBase.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BatchSpanProcessorBase = void 0;

var _api = require("@opentelemetry/api");

var _core = require("@opentelemetry/core");

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Implementation of the {@link SpanProcessor} that batches spans exported by
 * the SDK then pushes them to the exporter pipeline.
 */
var BatchSpanProcessorBase =
/** @class */
function () {
  function BatchSpanProcessorBase(_exporter, config) {
    this._exporter = _exporter;
    this._finishedSpans = [];
    this._isShutdown = false;
    this._shuttingDownPromise = Promise.resolve();
    var env = (0, _core.getEnv)();
    this._maxExportBatchSize = typeof (config === null || config === void 0 ? void 0 : config.maxExportBatchSize) === 'number' ? config.maxExportBatchSize : env.OTEL_BSP_MAX_EXPORT_BATCH_SIZE;
    this._maxQueueSize = typeof (config === null || config === void 0 ? void 0 : config.maxQueueSize) === 'number' ? config.maxQueueSize : env.OTEL_BSP_MAX_QUEUE_SIZE;
    this._scheduledDelayMillis = typeof (config === null || config === void 0 ? void 0 : config.scheduledDelayMillis) === 'number' ? config.scheduledDelayMillis : env.OTEL_BSP_SCHEDULE_DELAY;
    this._exportTimeoutMillis = typeof (config === null || config === void 0 ? void 0 : config.exportTimeoutMillis) === 'number' ? config.exportTimeoutMillis : env.OTEL_BSP_EXPORT_TIMEOUT;
  }

  BatchSpanProcessorBase.prototype.forceFlush = function () {
    if (this._isShutdown) {
      return this._shuttingDownPromise;
    }

    return this._flushAll();
  }; // does nothing.


  BatchSpanProcessorBase.prototype.onStart = function (_span) {};

  BatchSpanProcessorBase.prototype.onEnd = function (span) {
    if (this._isShutdown) {
      return;
    }

    if ((span.spanContext().traceFlags & _api.TraceFlags.SAMPLED) === 0) {
      return;
    }

    this._addToBuffer(span);
  };

  BatchSpanProcessorBase.prototype.shutdown = function () {
    var _this = this;

    if (this._isShutdown) {
      return this._shuttingDownPromise;
    }

    this._isShutdown = true;
    this._shuttingDownPromise = new Promise(function (resolve, reject) {
      Promise.resolve().then(function () {
        return _this.onShutdown();
      }).then(function () {
        return _this._flushAll();
      }).then(function () {
        return _this._exporter.shutdown();
      }).then(resolve).catch(function (e) {
        reject(e);
      });
    });
    return this._shuttingDownPromise;
  };
  /** Add a span in the buffer. */


  BatchSpanProcessorBase.prototype._addToBuffer = function (span) {
    if (this._finishedSpans.length >= this._maxQueueSize) {
      // limit reached, drop span
      return;
    }

    this._finishedSpans.push(span);

    this._maybeStartTimer();
  };
  /**
   * Send all spans to the exporter respecting the batch size limit
   * This function is used only on forceFlush or shutdown,
   * for all other cases _flush should be used
   * */


  BatchSpanProcessorBase.prototype._flushAll = function () {
    var _this = this;

    return new Promise(function (resolve, reject) {
      var promises = []; // calculate number of batches

      var count = Math.ceil(_this._finishedSpans.length / _this._maxExportBatchSize);

      for (var i = 0, j = count; i < j; i++) {
        promises.push(_this._flushOneBatch());
      }

      Promise.all(promises).then(function () {
        resolve();
      }).catch(reject);
    });
  };

  BatchSpanProcessorBase.prototype._flushOneBatch = function () {
    var _this = this;

    this._clearTimer();

    if (this._finishedSpans.length === 0) {
      return Promise.resolve();
    }

    return new Promise(function (resolve, reject) {
      var timer = setTimeout(function () {
        // don't wait anymore for export, this way the next batch can start
        reject(new Error('Timeout'));
      }, _this._exportTimeoutMillis); // prevent downstream exporter calls from generating spans

      _api.context.with((0, _core.suppressTracing)(_api.context.active()), function () {
        // Reset the finished spans buffer here because the next invocations of the _flush method
        // could pass the same finished spans to the exporter if the buffer is cleared
        // outside of the execution of this callback.
        _this._exporter.export(_this._finishedSpans.splice(0, _this._maxExportBatchSize), function (result) {
          var _a;

          clearTimeout(timer);

          if (result.code === _core.ExportResultCode.SUCCESS) {
            resolve();
          } else {
            reject((_a = result.error) !== null && _a !== void 0 ? _a : new Error('BatchSpanProcessor: span export failed'));
          }
        });
      });
    });
  };

  BatchSpanProcessorBase.prototype._maybeStartTimer = function () {
    var _this = this;

    if (this._timer !== undefined) return;
    this._timer = setTimeout(function () {
      _this._flushOneBatch().then(function () {
        if (_this._finishedSpans.length > 0) {
          _this._clearTimer();

          _this._maybeStartTimer();
        }
      }).catch(function (e) {
        (0, _core.globalErrorHandler)(e);
      });
    }, this._scheduledDelayMillis);
    (0, _core.unrefTimer)(this._timer);
  };

  BatchSpanProcessorBase.prototype._clearTimer = function () {
    if (this._timer !== undefined) {
      clearTimeout(this._timer);
      this._timer = undefined;
    }
  };

  return BatchSpanProcessorBase;
}();

exports.BatchSpanProcessorBase = BatchSpanProcessorBase;
},{"@opentelemetry/api":"node_modules/@opentelemetry/api/build/esm/index.js","@opentelemetry/core":"node_modules/@opentelemetry/core/build/esm/index.js"}],"node_modules/@opentelemetry/sdk-trace-base/build/esm/platform/browser/export/BatchSpanProcessor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BatchSpanProcessor = void 0;

var _BatchSpanProcessorBase = require("../../../export/BatchSpanProcessorBase");

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __extends = void 0 && (void 0).__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) {
        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
      }
    };

    return _extendStatics(d, b);
  };

  return function (d, b) {
    if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");

    _extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var BatchSpanProcessor =
/** @class */
function (_super) {
  __extends(BatchSpanProcessor, _super);

  function BatchSpanProcessor(_exporter, config) {
    var _this = _super.call(this, _exporter, config) || this;

    _this.onInit(config);

    return _this;
  }

  BatchSpanProcessor.prototype.onInit = function (config) {
    var _this = this;

    if ((config === null || config === void 0 ? void 0 : config.disableAutoFlushOnDocumentHide) !== true && document != null) {
      this._visibilityChangeListener = function () {
        if (document.visibilityState === 'hidden') {
          void _this.forceFlush();
        }
      };

      this._pageHideListener = function () {
        void _this.forceFlush();
      };

      document.addEventListener('visibilitychange', this._visibilityChangeListener); // use 'pagehide' event as a fallback for Safari; see https://bugs.webkit.org/show_bug.cgi?id=116769

      document.addEventListener('pagehide', this._pageHideListener);
    }
  };

  BatchSpanProcessor.prototype.onShutdown = function () {
    if (this._visibilityChangeListener) {
      document.removeEventListener('visibilitychange', this._visibilityChangeListener);
    }

    if (this._pageHideListener) {
      document.removeEventListener('pagehide', this._pageHideListener);
    }
  };

  return BatchSpanProcessor;
}(_BatchSpanProcessorBase.BatchSpanProcessorBase);

exports.BatchSpanProcessor = BatchSpanProcessor;
},{"../../../export/BatchSpanProcessorBase":"node_modules/@opentelemetry/sdk-trace-base/build/esm/export/BatchSpanProcessorBase.js"}],"node_modules/@opentelemetry/sdk-trace-base/build/esm/platform/browser/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _BatchSpanProcessor = require("./export/BatchSpanProcessor");

Object.keys(_BatchSpanProcessor).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _BatchSpanProcessor[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _BatchSpanProcessor[key];
    }
  });
});
},{"./export/BatchSpanProcessor":"node_modules/@opentelemetry/sdk-trace-base/build/esm/platform/browser/export/BatchSpanProcessor.js"}],"node_modules/@opentelemetry/sdk-trace-base/build/esm/BasicTracerProvider.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ForceFlushState = exports.BasicTracerProvider = void 0;

var _api = require("@opentelemetry/api");

var _core = require("@opentelemetry/core");

var _resources = require("@opentelemetry/resources");

var _ = require(".");

var _config = require("./config");

var _MultiSpanProcessor = require("./MultiSpanProcessor");

var _NoopSpanProcessor = require("./export/NoopSpanProcessor");

var _platform = require("./platform");

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// eslint-disable-next-line @typescript-eslint/no-var-requires
var merge = require('lodash.merge');

var ForceFlushState;
exports.ForceFlushState = ForceFlushState;

(function (ForceFlushState) {
  ForceFlushState[ForceFlushState["resolved"] = 0] = "resolved";
  ForceFlushState[ForceFlushState["timeout"] = 1] = "timeout";
  ForceFlushState[ForceFlushState["error"] = 2] = "error";
  ForceFlushState[ForceFlushState["unresolved"] = 3] = "unresolved";
})(ForceFlushState || (exports.ForceFlushState = ForceFlushState = {}));
/**
 * This class represents a basic tracer provider which platform libraries can extend
 */


var BasicTracerProvider =
/** @class */
function () {
  function BasicTracerProvider(config) {
    if (config === void 0) {
      config = {};
    }

    var _a;

    this._registeredSpanProcessors = [];
    this._tracers = new Map();
    var mergedConfig = merge({}, _config.DEFAULT_CONFIG, config);
    this.resource = (_a = mergedConfig.resource) !== null && _a !== void 0 ? _a : _resources.Resource.empty();
    this.resource = _resources.Resource.default().merge(this.resource);
    this._config = Object.assign({}, mergedConfig, {
      resource: this.resource
    });

    var defaultExporter = this._buildExporterFromEnv();

    if (defaultExporter !== undefined) {
      var batchProcessor = new _platform.BatchSpanProcessor(defaultExporter);
      this.activeSpanProcessor = batchProcessor;
    } else {
      this.activeSpanProcessor = new _NoopSpanProcessor.NoopSpanProcessor();
    }
  }

  BasicTracerProvider.prototype.getTracer = function (name, version) {
    var key = name + "@" + (version || '');

    if (!this._tracers.has(key)) {
      this._tracers.set(key, new _.Tracer({
        name: name,
        version: version
      }, this._config, this));
    } // eslint-disable-next-line @typescript-eslint/no-non-null-assertion


    return this._tracers.get(key);
  };
  /**
   * Adds a new {@link SpanProcessor} to this tracer.
   * @param spanProcessor the new SpanProcessor to be added.
   */


  BasicTracerProvider.prototype.addSpanProcessor = function (spanProcessor) {
    if (this._registeredSpanProcessors.length === 0) {
      // since we might have enabled by default a batchProcessor, we disable it
      // before adding the new one
      this.activeSpanProcessor.shutdown().catch(function (err) {
        return _api.diag.error('Error while trying to shutdown current span processor', err);
      });
    }

    this._registeredSpanProcessors.push(spanProcessor);

    this.activeSpanProcessor = new _MultiSpanProcessor.MultiSpanProcessor(this._registeredSpanProcessors);
  };

  BasicTracerProvider.prototype.getActiveSpanProcessor = function () {
    return this.activeSpanProcessor;
  };
  /**
   * Register this TracerProvider for use with the OpenTelemetry API.
   * Undefined values may be replaced with defaults, and
   * null values will be skipped.
   *
   * @param config Configuration object for SDK registration
   */


  BasicTracerProvider.prototype.register = function (config) {
    if (config === void 0) {
      config = {};
    }

    _api.trace.setGlobalTracerProvider(this);

    if (config.propagator === undefined) {
      config.propagator = this._buildPropagatorFromEnv();
    }

    if (config.contextManager) {
      _api.context.setGlobalContextManager(config.contextManager);
    }

    if (config.propagator) {
      _api.propagation.setGlobalPropagator(config.propagator);
    }
  };

  BasicTracerProvider.prototype.forceFlush = function () {
    var timeout = this._config.forceFlushTimeoutMillis;

    var promises = this._registeredSpanProcessors.map(function (spanProcessor) {
      return new Promise(function (resolve) {
        var state;
        var timeoutInterval = setTimeout(function () {
          resolve(new Error("Span processor did not completed within timeout period of " + timeout + " ms"));
          state = ForceFlushState.timeout;
        }, timeout);
        spanProcessor.forceFlush().then(function () {
          clearTimeout(timeoutInterval);

          if (state !== ForceFlushState.timeout) {
            state = ForceFlushState.resolved;
            resolve(state);
          }
        }).catch(function (error) {
          clearTimeout(timeoutInterval);
          state = ForceFlushState.error;
          resolve(error);
        });
      });
    });

    return new Promise(function (resolve, reject) {
      Promise.all(promises).then(function (results) {
        var errors = results.filter(function (result) {
          return result !== ForceFlushState.resolved;
        });

        if (errors.length > 0) {
          reject(errors);
        } else {
          resolve();
        }
      }).catch(function (error) {
        return reject([error]);
      });
    });
  };

  BasicTracerProvider.prototype.shutdown = function () {
    return this.activeSpanProcessor.shutdown();
  };

  BasicTracerProvider.prototype._getPropagator = function (name) {
    var _a;

    return (_a = BasicTracerProvider._registeredPropagators.get(name)) === null || _a === void 0 ? void 0 : _a();
  };

  BasicTracerProvider.prototype._getSpanExporter = function (name) {
    var _a;

    return (_a = BasicTracerProvider._registeredExporters.get(name)) === null || _a === void 0 ? void 0 : _a();
  };

  BasicTracerProvider.prototype._buildPropagatorFromEnv = function () {
    var _this = this; // per spec, propagators from env must be deduplicated


    var uniquePropagatorNames = Array.from(new Set((0, _core.getEnv)().OTEL_PROPAGATORS));
    var propagators = uniquePropagatorNames.map(function (name) {
      var propagator = _this._getPropagator(name);

      if (!propagator) {
        _api.diag.warn("Propagator \"" + name + "\" requested through environment variable is unavailable.");
      }

      return propagator;
    });
    var validPropagators = propagators.reduce(function (list, item) {
      if (item) {
        list.push(item);
      }

      return list;
    }, []);

    if (validPropagators.length === 0) {
      return;
    } else if (uniquePropagatorNames.length === 1) {
      return validPropagators[0];
    } else {
      return new _core.CompositePropagator({
        propagators: validPropagators
      });
    }
  };

  BasicTracerProvider.prototype._buildExporterFromEnv = function () {
    var exporterName = (0, _core.getEnv)().OTEL_TRACES_EXPORTER;
    if (exporterName === 'none') return;

    var exporter = this._getSpanExporter(exporterName);

    if (!exporter) {
      _api.diag.error("Exporter \"" + exporterName + "\" requested through environment variable is unavailable.");
    }

    return exporter;
  };

  BasicTracerProvider._registeredPropagators = new Map([['tracecontext', function () {
    return new _core.W3CTraceContextPropagator();
  }], ['baggage', function () {
    return new _core.W3CBaggagePropagator();
  }]]);
  BasicTracerProvider._registeredExporters = new Map();
  return BasicTracerProvider;
}();

exports.BasicTracerProvider = BasicTracerProvider;
},{"@opentelemetry/api":"node_modules/@opentelemetry/api/build/esm/index.js","@opentelemetry/core":"node_modules/@opentelemetry/core/build/esm/index.js","@opentelemetry/resources":"node_modules/@opentelemetry/resources/build/esm/index.js",".":"node_modules/@opentelemetry/sdk-trace-base/build/esm/index.js","./config":"node_modules/@opentelemetry/sdk-trace-base/build/esm/config.js","./MultiSpanProcessor":"node_modules/@opentelemetry/sdk-trace-base/build/esm/MultiSpanProcessor.js","./export/NoopSpanProcessor":"node_modules/@opentelemetry/sdk-trace-base/build/esm/export/NoopSpanProcessor.js","lodash.merge":"node_modules/lodash.merge/index.js","./platform":"node_modules/@opentelemetry/sdk-trace-base/build/esm/platform/browser/index.js"}],"node_modules/@opentelemetry/sdk-trace-base/build/esm/export/ConsoleSpanExporter.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ConsoleSpanExporter = void 0;

var _core = require("@opentelemetry/core");

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * This is implementation of {@link SpanExporter} that prints spans to the
 * console. This class can be used for diagnostic purposes.
 */

/* eslint-disable no-console */
var ConsoleSpanExporter =
/** @class */
function () {
  function ConsoleSpanExporter() {}
  /**
   * Export spans.
   * @param spans
   * @param resultCallback
   */


  ConsoleSpanExporter.prototype.export = function (spans, resultCallback) {
    return this._sendSpans(spans, resultCallback);
  };
  /**
   * Shutdown the exporter.
   */


  ConsoleSpanExporter.prototype.shutdown = function () {
    this._sendSpans([]);

    return Promise.resolve();
  };
  /**
   * converts span info into more readable format
   * @param span
   */


  ConsoleSpanExporter.prototype._exportInfo = function (span) {
    return {
      traceId: span.spanContext().traceId,
      parentId: span.parentSpanId,
      name: span.name,
      id: span.spanContext().spanId,
      kind: span.kind,
      timestamp: (0, _core.hrTimeToMicroseconds)(span.startTime),
      duration: (0, _core.hrTimeToMicroseconds)(span.duration),
      attributes: span.attributes,
      status: span.status,
      events: span.events
    };
  };
  /**
   * Showing spans in console
   * @param spans
   * @param done
   */


  ConsoleSpanExporter.prototype._sendSpans = function (spans, done) {
    for (var _i = 0, spans_1 = spans; _i < spans_1.length; _i++) {
      var span = spans_1[_i];
      console.log(this._exportInfo(span));
    }

    if (done) {
      return done({
        code: _core.ExportResultCode.SUCCESS
      });
    }
  };

  return ConsoleSpanExporter;
}();

exports.ConsoleSpanExporter = ConsoleSpanExporter;
},{"@opentelemetry/core":"node_modules/@opentelemetry/core/build/esm/index.js"}],"node_modules/@opentelemetry/sdk-trace-base/build/esm/export/InMemorySpanExporter.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.InMemorySpanExporter = void 0;

var _core = require("@opentelemetry/core");

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * This class can be used for testing purposes. It stores the exported spans
 * in a list in memory that can be retrieved using the `getFinishedSpans()`
 * method.
 */
var InMemorySpanExporter =
/** @class */
function () {
  function InMemorySpanExporter() {
    this._finishedSpans = [];
    /**
     * Indicates if the exporter has been "shutdown."
     * When false, exported spans will not be stored in-memory.
     */

    this._stopped = false;
  }

  InMemorySpanExporter.prototype.export = function (spans, resultCallback) {
    var _a;

    if (this._stopped) return resultCallback({
      code: _core.ExportResultCode.FAILED,
      error: new Error('Exporter has been stopped')
    });

    (_a = this._finishedSpans).push.apply(_a, spans);

    setTimeout(function () {
      return resultCallback({
        code: _core.ExportResultCode.SUCCESS
      });
    }, 0);
  };

  InMemorySpanExporter.prototype.shutdown = function () {
    this._stopped = true;
    this._finishedSpans = [];
    return Promise.resolve();
  };

  InMemorySpanExporter.prototype.reset = function () {
    this._finishedSpans = [];
  };

  InMemorySpanExporter.prototype.getFinishedSpans = function () {
    return this._finishedSpans;
  };

  return InMemorySpanExporter;
}();

exports.InMemorySpanExporter = InMemorySpanExporter;
},{"@opentelemetry/core":"node_modules/@opentelemetry/core/build/esm/index.js"}],"node_modules/@opentelemetry/sdk-trace-base/build/esm/export/ReadableSpan.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/@opentelemetry/sdk-trace-base/build/esm/export/SimpleSpanProcessor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SimpleSpanProcessor = void 0;

var _api = require("@opentelemetry/api");

var _core = require("@opentelemetry/core");

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * An implementation of the {@link SpanProcessor} that converts the {@link Span}
 * to {@link ReadableSpan} and passes it to the configured exporter.
 *
 * Only spans that are sampled are converted.
 */
var SimpleSpanProcessor =
/** @class */
function () {
  function SimpleSpanProcessor(_exporter) {
    this._exporter = _exporter;
    this._isShutdown = false;
    this._shuttingDownPromise = Promise.resolve();
  }

  SimpleSpanProcessor.prototype.forceFlush = function () {
    // do nothing as all spans are being exported without waiting
    return Promise.resolve();
  }; // does nothing.


  SimpleSpanProcessor.prototype.onStart = function (_span) {};

  SimpleSpanProcessor.prototype.onEnd = function (span) {
    var _this = this;

    if (this._isShutdown) {
      return;
    }

    if ((span.spanContext().traceFlags & _api.TraceFlags.SAMPLED) === 0) {
      return;
    } // prevent downstream exporter calls from generating spans


    _api.context.with((0, _core.suppressTracing)(_api.context.active()), function () {
      _this._exporter.export([span], function (result) {
        var _a;

        if (result.code !== _core.ExportResultCode.SUCCESS) {
          (0, _core.globalErrorHandler)((_a = result.error) !== null && _a !== void 0 ? _a : new Error("SimpleSpanProcessor: span export failed (status " + result + ")"));
        }
      });
    });
  };

  SimpleSpanProcessor.prototype.shutdown = function () {
    var _this = this;

    if (this._isShutdown) {
      return this._shuttingDownPromise;
    }

    this._isShutdown = true;
    this._shuttingDownPromise = new Promise(function (resolve, reject) {
      Promise.resolve().then(function () {
        return _this._exporter.shutdown();
      }).then(resolve).catch(function (e) {
        reject(e);
      });
    });
    return this._shuttingDownPromise;
  };

  return SimpleSpanProcessor;
}();

exports.SimpleSpanProcessor = SimpleSpanProcessor;
},{"@opentelemetry/api":"node_modules/@opentelemetry/api/build/esm/index.js","@opentelemetry/core":"node_modules/@opentelemetry/core/build/esm/index.js"}],"node_modules/@opentelemetry/sdk-trace-base/build/esm/export/SpanExporter.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/@opentelemetry/sdk-trace-base/build/esm/SpanProcessor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/@opentelemetry/sdk-trace-base/build/esm/TimedEvent.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/@opentelemetry/sdk-trace-base/build/esm/types.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/@opentelemetry/sdk-trace-base/build/esm/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _Tracer = require("./Tracer");

Object.keys(_Tracer).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _Tracer[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _Tracer[key];
    }
  });
});

var _BasicTracerProvider = require("./BasicTracerProvider");

Object.keys(_BasicTracerProvider).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _BasicTracerProvider[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _BasicTracerProvider[key];
    }
  });
});

var _platform = require("./platform");

Object.keys(_platform).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _platform[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _platform[key];
    }
  });
});

var _ConsoleSpanExporter = require("./export/ConsoleSpanExporter");

Object.keys(_ConsoleSpanExporter).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _ConsoleSpanExporter[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _ConsoleSpanExporter[key];
    }
  });
});

var _InMemorySpanExporter = require("./export/InMemorySpanExporter");

Object.keys(_InMemorySpanExporter).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _InMemorySpanExporter[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _InMemorySpanExporter[key];
    }
  });
});

var _ReadableSpan = require("./export/ReadableSpan");

Object.keys(_ReadableSpan).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _ReadableSpan[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _ReadableSpan[key];
    }
  });
});

var _SimpleSpanProcessor = require("./export/SimpleSpanProcessor");

Object.keys(_SimpleSpanProcessor).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _SimpleSpanProcessor[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _SimpleSpanProcessor[key];
    }
  });
});

var _SpanExporter = require("./export/SpanExporter");

Object.keys(_SpanExporter).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _SpanExporter[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _SpanExporter[key];
    }
  });
});

var _NoopSpanProcessor = require("./export/NoopSpanProcessor");

Object.keys(_NoopSpanProcessor).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _NoopSpanProcessor[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _NoopSpanProcessor[key];
    }
  });
});

var _Span = require("./Span");

Object.keys(_Span).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _Span[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _Span[key];
    }
  });
});

var _SpanProcessor = require("./SpanProcessor");

Object.keys(_SpanProcessor).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _SpanProcessor[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _SpanProcessor[key];
    }
  });
});

var _TimedEvent = require("./TimedEvent");

Object.keys(_TimedEvent).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _TimedEvent[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _TimedEvent[key];
    }
  });
});

var _types = require("./types");

Object.keys(_types).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _types[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _types[key];
    }
  });
});
},{"./Tracer":"node_modules/@opentelemetry/sdk-trace-base/build/esm/Tracer.js","./BasicTracerProvider":"node_modules/@opentelemetry/sdk-trace-base/build/esm/BasicTracerProvider.js","./platform":"node_modules/@opentelemetry/sdk-trace-base/build/esm/platform/browser/index.js","./export/ConsoleSpanExporter":"node_modules/@opentelemetry/sdk-trace-base/build/esm/export/ConsoleSpanExporter.js","./export/InMemorySpanExporter":"node_modules/@opentelemetry/sdk-trace-base/build/esm/export/InMemorySpanExporter.js","./export/ReadableSpan":"node_modules/@opentelemetry/sdk-trace-base/build/esm/export/ReadableSpan.js","./export/SimpleSpanProcessor":"node_modules/@opentelemetry/sdk-trace-base/build/esm/export/SimpleSpanProcessor.js","./export/SpanExporter":"node_modules/@opentelemetry/sdk-trace-base/build/esm/export/SpanExporter.js","./export/NoopSpanProcessor":"node_modules/@opentelemetry/sdk-trace-base/build/esm/export/NoopSpanProcessor.js","./Span":"node_modules/@opentelemetry/sdk-trace-base/build/esm/Span.js","./SpanProcessor":"node_modules/@opentelemetry/sdk-trace-base/build/esm/SpanProcessor.js","./TimedEvent":"node_modules/@opentelemetry/sdk-trace-base/build/esm/TimedEvent.js","./types":"node_modules/@opentelemetry/sdk-trace-base/build/esm/types.js"}],"node_modules/@opentelemetry/sdk-trace-web/build/esm/StackContextManager.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.StackContextManager = void 0;

var _api = require("@opentelemetry/api");

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __spreadArray = void 0 && (void 0).__spreadArray || function (to, from) {
  for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) {
    to[j] = from[i];
  }

  return to;
};

/**
 * Stack Context Manager for managing the state in web
 * it doesn't fully support the async calls though
 */
var StackContextManager =
/** @class */
function () {
  function StackContextManager() {
    /**
     * whether the context manager is enabled or not
     */
    this._enabled = false;
    /**
     * Keeps the reference to current context
     */

    this._currentContext = _api.ROOT_CONTEXT;
  }
  /**
   *
   * @param context
   * @param target Function to be executed within the context
   */


  StackContextManager.prototype._bindFunction = function (context, target) {
    if (context === void 0) {
      context = _api.ROOT_CONTEXT;
    }

    var manager = this;

    var contextWrapper = function contextWrapper() {
      var _this = this;

      var args = [];

      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }

      return manager.with(context, function () {
        return target.apply(_this, args);
      });
    };

    Object.defineProperty(contextWrapper, 'length', {
      enumerable: false,
      configurable: true,
      writable: false,
      value: target.length
    });
    return contextWrapper;
  };
  /**
   * Returns the active context
   */


  StackContextManager.prototype.active = function () {
    return this._currentContext;
  };
  /**
   * Binds a the certain context or the active one to the target function and then returns the target
   * @param context A context (span) to be bind to target
   * @param target a function or event emitter. When target or one of its callbacks is called,
   *  the provided context will be used as the active context for the duration of the call.
   */


  StackContextManager.prototype.bind = function (context, target) {
    // if no specific context to propagate is given, we use the current one
    if (context === undefined) {
      context = this.active();
    }

    if (typeof target === 'function') {
      return this._bindFunction(context, target);
    }

    return target;
  };
  /**
   * Disable the context manager (clears the current context)
   */


  StackContextManager.prototype.disable = function () {
    this._currentContext = _api.ROOT_CONTEXT;
    this._enabled = false;
    return this;
  };
  /**
   * Enables the context manager and creates a default(root) context
   */


  StackContextManager.prototype.enable = function () {
    if (this._enabled) {
      return this;
    }

    this._enabled = true;
    this._currentContext = _api.ROOT_CONTEXT;
    return this;
  };
  /**
   * Calls the callback function [fn] with the provided [context]. If [context] is undefined then it will use the window.
   * The context will be set as active
   * @param context
   * @param fn Callback function
   * @param thisArg optional receiver to be used for calling fn
   * @param args optional arguments forwarded to fn
   */


  StackContextManager.prototype.with = function (context, fn, thisArg) {
    var args = [];

    for (var _i = 3; _i < arguments.length; _i++) {
      args[_i - 3] = arguments[_i];
    }

    var previousContext = this._currentContext;
    this._currentContext = context || _api.ROOT_CONTEXT;

    try {
      return fn.call.apply(fn, __spreadArray([thisArg], args));
    } finally {
      this._currentContext = previousContext;
    }
  };

  return StackContextManager;
}();

exports.StackContextManager = StackContextManager;
},{"@opentelemetry/api":"node_modules/@opentelemetry/api/build/esm/index.js"}],"node_modules/@opentelemetry/sdk-trace-web/build/esm/WebTracerProvider.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.WebTracerProvider = void 0;

var _sdkTraceBase = require("@opentelemetry/sdk-trace-base");

var _StackContextManager = require("./StackContextManager");

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __extends = void 0 && (void 0).__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) {
        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
      }
    };

    return _extendStatics(d, b);
  };

  return function (d, b) {
    if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");

    _extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

/**
 * This class represents a web tracer with {@link StackContextManager}
 */
var WebTracerProvider =
/** @class */
function (_super) {
  __extends(WebTracerProvider, _super);
  /**
   * Constructs a new Tracer instance.
   * @param config Web Tracer config
   */


  function WebTracerProvider(config) {
    if (config === void 0) {
      config = {};
    }

    var _this = _super.call(this, config) || this;

    if (config.contextManager) {
      throw 'contextManager should be defined in register method not in' + ' constructor';
    }

    if (config.propagator) {
      throw 'propagator should be defined in register method not in constructor';
    }

    return _this;
  }
  /**
   * Register this TracerProvider for use with the OpenTelemetry API.
   * Undefined values may be replaced with defaults, and
   * null values will be skipped.
   *
   * @param config Configuration object for SDK registration
   */


  WebTracerProvider.prototype.register = function (config) {
    if (config === void 0) {
      config = {};
    }

    if (config.contextManager === undefined) {
      config.contextManager = new _StackContextManager.StackContextManager();
    }

    if (config.contextManager) {
      config.contextManager.enable();
    }

    _super.prototype.register.call(this, config);
  };

  return WebTracerProvider;
}(_sdkTraceBase.BasicTracerProvider);

exports.WebTracerProvider = WebTracerProvider;
},{"@opentelemetry/sdk-trace-base":"node_modules/@opentelemetry/sdk-trace-base/build/esm/index.js","./StackContextManager":"node_modules/@opentelemetry/sdk-trace-web/build/esm/StackContextManager.js"}],"node_modules/@opentelemetry/sdk-trace-web/build/esm/enums/PerformanceTimingNames.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PerformanceTimingNames = void 0;

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var PerformanceTimingNames;
exports.PerformanceTimingNames = PerformanceTimingNames;

(function (PerformanceTimingNames) {
  PerformanceTimingNames["CONNECT_END"] = "connectEnd";
  PerformanceTimingNames["CONNECT_START"] = "connectStart";
  PerformanceTimingNames["DECODED_BODY_SIZE"] = "decodedBodySize";
  PerformanceTimingNames["DOM_COMPLETE"] = "domComplete";
  PerformanceTimingNames["DOM_CONTENT_LOADED_EVENT_END"] = "domContentLoadedEventEnd";
  PerformanceTimingNames["DOM_CONTENT_LOADED_EVENT_START"] = "domContentLoadedEventStart";
  PerformanceTimingNames["DOM_INTERACTIVE"] = "domInteractive";
  PerformanceTimingNames["DOMAIN_LOOKUP_END"] = "domainLookupEnd";
  PerformanceTimingNames["DOMAIN_LOOKUP_START"] = "domainLookupStart";
  PerformanceTimingNames["ENCODED_BODY_SIZE"] = "encodedBodySize";
  PerformanceTimingNames["FETCH_START"] = "fetchStart";
  PerformanceTimingNames["LOAD_EVENT_END"] = "loadEventEnd";
  PerformanceTimingNames["LOAD_EVENT_START"] = "loadEventStart";
  PerformanceTimingNames["NAVIGATION_START"] = "navigationStart";
  PerformanceTimingNames["REDIRECT_END"] = "redirectEnd";
  PerformanceTimingNames["REDIRECT_START"] = "redirectStart";
  PerformanceTimingNames["REQUEST_START"] = "requestStart";
  PerformanceTimingNames["RESPONSE_END"] = "responseEnd";
  PerformanceTimingNames["RESPONSE_START"] = "responseStart";
  PerformanceTimingNames["SECURE_CONNECTION_START"] = "secureConnectionStart";
  PerformanceTimingNames["UNLOAD_EVENT_END"] = "unloadEventEnd";
  PerformanceTimingNames["UNLOAD_EVENT_START"] = "unloadEventStart";
})(PerformanceTimingNames || (exports.PerformanceTimingNames = PerformanceTimingNames = {}));
},{}],"node_modules/@opentelemetry/sdk-trace-web/build/esm/types.js":[function(require,module,exports) {
"use strict";

var _PerformanceTimingNames = require("./enums/PerformanceTimingNames");
},{"./enums/PerformanceTimingNames":"node_modules/@opentelemetry/sdk-trace-web/build/esm/enums/PerformanceTimingNames.js"}],"node_modules/@opentelemetry/sdk-trace-web/build/esm/utils.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.addSpanNetworkEvent = addSpanNetworkEvent;
exports.addSpanNetworkEvents = addSpanNetworkEvents;
exports.getElementXPath = getElementXPath;
exports.getResource = getResource;
exports.getUrlNormalizingAnchor = getUrlNormalizingAnchor;
exports.hasKey = hasKey;
exports.parseUrl = parseUrl;
exports.shouldPropagateTraceHeaders = shouldPropagateTraceHeaders;
exports.sortResources = sortResources;

var _PerformanceTimingNames = require("./enums/PerformanceTimingNames");

var _core = require("@opentelemetry/core");

var _semanticConventions = require("@opentelemetry/semantic-conventions");

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Used to normalize relative URLs
var a;

function getUrlNormalizingAnchor() {
  if (!a) {
    a = document.createElement('a');
  }

  return a;
}
/**
 * Helper function to be able to use enum as typed key in type and in interface when using forEach
 * @param obj
 * @param key
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any


function hasKey(obj, key) {
  return key in obj;
}
/**
 * Helper function for starting an event on span based on {@link PerformanceEntries}
 * @param span
 * @param performanceName name of performance entry for time start
 * @param entries
 */


function addSpanNetworkEvent(span, performanceName, entries) {
  if (hasKey(entries, performanceName) && typeof entries[performanceName] === 'number') {
    span.addEvent(performanceName, entries[performanceName]);
    return span;
  }

  return undefined;
}
/**
 * Helper function for adding network events
 * @param span
 * @param resource
 */


function addSpanNetworkEvents(span, resource) {
  addSpanNetworkEvent(span, _PerformanceTimingNames.PerformanceTimingNames.FETCH_START, resource);
  addSpanNetworkEvent(span, _PerformanceTimingNames.PerformanceTimingNames.DOMAIN_LOOKUP_START, resource);
  addSpanNetworkEvent(span, _PerformanceTimingNames.PerformanceTimingNames.DOMAIN_LOOKUP_END, resource);
  addSpanNetworkEvent(span, _PerformanceTimingNames.PerformanceTimingNames.CONNECT_START, resource);
  addSpanNetworkEvent(span, _PerformanceTimingNames.PerformanceTimingNames.SECURE_CONNECTION_START, resource);
  addSpanNetworkEvent(span, _PerformanceTimingNames.PerformanceTimingNames.CONNECT_END, resource);
  addSpanNetworkEvent(span, _PerformanceTimingNames.PerformanceTimingNames.REQUEST_START, resource);
  addSpanNetworkEvent(span, _PerformanceTimingNames.PerformanceTimingNames.RESPONSE_START, resource);
  addSpanNetworkEvent(span, _PerformanceTimingNames.PerformanceTimingNames.RESPONSE_END, resource);
  var encodedLength = resource[_PerformanceTimingNames.PerformanceTimingNames.ENCODED_BODY_SIZE];

  if (encodedLength !== undefined) {
    span.setAttribute(_semanticConventions.SemanticAttributes.HTTP_RESPONSE_CONTENT_LENGTH, encodedLength);
  }

  var decodedLength = resource[_PerformanceTimingNames.PerformanceTimingNames.DECODED_BODY_SIZE]; // Spec: Not set if transport encoding not used (in which case encoded and decoded sizes match)

  if (decodedLength !== undefined && encodedLength !== decodedLength) {
    span.setAttribute(_semanticConventions.SemanticAttributes.HTTP_RESPONSE_CONTENT_LENGTH_UNCOMPRESSED, decodedLength);
  }
}
/**
 * sort resources by startTime
 * @param filteredResources
 */


function sortResources(filteredResources) {
  return filteredResources.slice().sort(function (a, b) {
    var valueA = a[_PerformanceTimingNames.PerformanceTimingNames.FETCH_START];
    var valueB = b[_PerformanceTimingNames.PerformanceTimingNames.FETCH_START];

    if (valueA > valueB) {
      return 1;
    } else if (valueA < valueB) {
      return -1;
    }

    return 0;
  });
}
/**
 * Get closest performance resource ignoring the resources that have been
 * already used.
 * @param spanUrl
 * @param startTimeHR
 * @param endTimeHR
 * @param resources
 * @param ignoredResources
 * @param initiatorType
 */


function getResource(spanUrl, startTimeHR, endTimeHR, resources, ignoredResources, initiatorType) {
  if (ignoredResources === void 0) {
    ignoredResources = new WeakSet();
  } // de-relativize the URL before usage (does no harm to absolute URLs)


  var urlNormalizingAnchor = getUrlNormalizingAnchor();
  urlNormalizingAnchor.href = spanUrl;
  spanUrl = urlNormalizingAnchor.href;
  var filteredResources = filterResourcesForSpan(spanUrl, startTimeHR, endTimeHR, resources, ignoredResources, initiatorType);

  if (filteredResources.length === 0) {
    return {
      mainRequest: undefined
    };
  }

  if (filteredResources.length === 1) {
    return {
      mainRequest: filteredResources[0]
    };
  }

  var sorted = sortResources(filteredResources);
  var parsedSpanUrl = parseUrl(spanUrl);

  if (parsedSpanUrl.origin !== window.location.origin && sorted.length > 1) {
    var corsPreFlightRequest = sorted[0];
    var mainRequest = findMainRequest(sorted, corsPreFlightRequest[_PerformanceTimingNames.PerformanceTimingNames.RESPONSE_END], endTimeHR);
    var responseEnd = corsPreFlightRequest[_PerformanceTimingNames.PerformanceTimingNames.RESPONSE_END];
    var fetchStart = mainRequest[_PerformanceTimingNames.PerformanceTimingNames.FETCH_START]; // no corsPreFlightRequest

    if (fetchStart < responseEnd) {
      mainRequest = corsPreFlightRequest;
      corsPreFlightRequest = undefined;
    }

    return {
      corsPreFlightRequest: corsPreFlightRequest,
      mainRequest: mainRequest
    };
  } else {
    return {
      mainRequest: filteredResources[0]
    };
  }
}
/**
 * Will find the main request skipping the cors pre flight requests
 * @param resources
 * @param corsPreFlightRequestEndTime
 * @param spanEndTimeHR
 */


function findMainRequest(resources, corsPreFlightRequestEndTime, spanEndTimeHR) {
  var spanEndTime = (0, _core.hrTimeToNanoseconds)(spanEndTimeHR);
  var minTime = (0, _core.hrTimeToNanoseconds)((0, _core.timeInputToHrTime)(corsPreFlightRequestEndTime));
  var mainRequest = resources[1];
  var bestGap;
  var length = resources.length;

  for (var i = 1; i < length; i++) {
    var resource = resources[i];
    var resourceStartTime = (0, _core.hrTimeToNanoseconds)((0, _core.timeInputToHrTime)(resource[_PerformanceTimingNames.PerformanceTimingNames.FETCH_START]));
    var resourceEndTime = (0, _core.hrTimeToNanoseconds)((0, _core.timeInputToHrTime)(resource[_PerformanceTimingNames.PerformanceTimingNames.RESPONSE_END]));
    var currentGap = spanEndTime - resourceEndTime;

    if (resourceStartTime >= minTime && (!bestGap || currentGap < bestGap)) {
      bestGap = currentGap;
      mainRequest = resource;
    }
  }

  return mainRequest;
}
/**
 * Filter all resources that has started and finished according to span start time and end time.
 *     It will return the closest resource to a start time
 * @param spanUrl
 * @param startTimeHR
 * @param endTimeHR
 * @param resources
 * @param ignoredResources
 */


function filterResourcesForSpan(spanUrl, startTimeHR, endTimeHR, resources, ignoredResources, initiatorType) {
  var startTime = (0, _core.hrTimeToNanoseconds)(startTimeHR);
  var endTime = (0, _core.hrTimeToNanoseconds)(endTimeHR);
  var filteredResources = resources.filter(function (resource) {
    var resourceStartTime = (0, _core.hrTimeToNanoseconds)((0, _core.timeInputToHrTime)(resource[_PerformanceTimingNames.PerformanceTimingNames.FETCH_START]));
    var resourceEndTime = (0, _core.hrTimeToNanoseconds)((0, _core.timeInputToHrTime)(resource[_PerformanceTimingNames.PerformanceTimingNames.RESPONSE_END]));
    return resource.initiatorType.toLowerCase() === (initiatorType || 'xmlhttprequest') && resource.name === spanUrl && resourceStartTime >= startTime && resourceEndTime <= endTime;
  });

  if (filteredResources.length > 0) {
    filteredResources = filteredResources.filter(function (resource) {
      return !ignoredResources.has(resource);
    });
  }

  return filteredResources;
}
/**
 * Parses url using anchor element
 * @param url
 */


function parseUrl(url) {
  var a = document.createElement('a');
  a.href = url;
  return a;
}
/**
 * Get element XPath
 * @param target - target element
 * @param optimised - when id attribute of element is present the xpath can be
 * simplified to contain id
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any


function getElementXPath(target, optimised) {
  if (target.nodeType === Node.DOCUMENT_NODE) {
    return '/';
  }

  var targetValue = getNodeValue(target, optimised);

  if (optimised && targetValue.indexOf('@id') > 0) {
    return targetValue;
  }

  var xpath = '';

  if (target.parentNode) {
    xpath += getElementXPath(target.parentNode, false);
  }

  xpath += targetValue;
  return xpath;
}
/**
 * get node index within the siblings
 * @param target
 */


function getNodeIndex(target) {
  if (!target.parentNode) {
    return 0;
  }

  var allowedTypes = [target.nodeType];

  if (target.nodeType === Node.CDATA_SECTION_NODE) {
    allowedTypes.push(Node.TEXT_NODE);
  }

  var elements = Array.from(target.parentNode.childNodes);
  elements = elements.filter(function (element) {
    var localName = element.localName;
    return allowedTypes.indexOf(element.nodeType) >= 0 && localName === target.localName;
  });

  if (elements.length >= 1) {
    return elements.indexOf(target) + 1; // xpath starts from 1
  } // if there are no other similar child xpath doesn't need index


  return 0;
}
/**
 * get node value for xpath
 * @param target
 * @param optimised
 */


function getNodeValue(target, optimised) {
  var nodeType = target.nodeType;
  var index = getNodeIndex(target);
  var nodeValue = '';

  if (nodeType === Node.ELEMENT_NODE) {
    var id = target.getAttribute('id');

    if (optimised && id) {
      return "//*[@id=\"" + id + "\"]";
    }

    nodeValue = target.localName;
  } else if (nodeType === Node.TEXT_NODE || nodeType === Node.CDATA_SECTION_NODE) {
    nodeValue = 'text()';
  } else if (nodeType === Node.COMMENT_NODE) {
    nodeValue = 'comment()';
  } else {
    return '';
  } // if index is 1 it can be omitted in xpath


  if (nodeValue && index > 1) {
    return "/" + nodeValue + "[" + index + "]";
  }

  return "/" + nodeValue;
}
/**
 * Checks if trace headers should be propagated
 * @param spanUrl
 * @private
 */


function shouldPropagateTraceHeaders(spanUrl, propagateTraceHeaderCorsUrls) {
  var propagateTraceHeaderUrls = propagateTraceHeaderCorsUrls || [];

  if (typeof propagateTraceHeaderUrls === 'string' || propagateTraceHeaderUrls instanceof RegExp) {
    propagateTraceHeaderUrls = [propagateTraceHeaderUrls];
  }

  var parsedSpanUrl = parseUrl(spanUrl);

  if (parsedSpanUrl.origin === window.location.origin) {
    return true;
  } else {
    return propagateTraceHeaderUrls.some(function (propagateTraceHeaderUrl) {
      return (0, _core.urlMatches)(spanUrl, propagateTraceHeaderUrl);
    });
  }
}
},{"./enums/PerformanceTimingNames":"node_modules/@opentelemetry/sdk-trace-web/build/esm/enums/PerformanceTimingNames.js","@opentelemetry/core":"node_modules/@opentelemetry/core/build/esm/index.js","@opentelemetry/semantic-conventions":"node_modules/@opentelemetry/semantic-conventions/build/esm/index.js"}],"node_modules/@opentelemetry/sdk-trace-web/build/esm/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _WebTracerProvider = require("./WebTracerProvider");

Object.keys(_WebTracerProvider).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _WebTracerProvider[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _WebTracerProvider[key];
    }
  });
});

var _StackContextManager = require("./StackContextManager");

Object.keys(_StackContextManager).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _StackContextManager[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _StackContextManager[key];
    }
  });
});

var _PerformanceTimingNames = require("./enums/PerformanceTimingNames");

Object.keys(_PerformanceTimingNames).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _PerformanceTimingNames[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _PerformanceTimingNames[key];
    }
  });
});

var _types = require("./types");

Object.keys(_types).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _types[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _types[key];
    }
  });
});

var _utils = require("./utils");

Object.keys(_utils).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _utils[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _utils[key];
    }
  });
});
},{"./WebTracerProvider":"node_modules/@opentelemetry/sdk-trace-web/build/esm/WebTracerProvider.js","./StackContextManager":"node_modules/@opentelemetry/sdk-trace-web/build/esm/StackContextManager.js","./enums/PerformanceTimingNames":"node_modules/@opentelemetry/sdk-trace-web/build/esm/enums/PerformanceTimingNames.js","./types":"node_modules/@opentelemetry/sdk-trace-web/build/esm/types.js","./utils":"node_modules/@opentelemetry/sdk-trace-web/build/esm/utils.js"}],"node_modules/@opentelemetry/instrumentation-fetch/build/esm/enums/AttributeNames.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AttributeNames = void 0;

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/trace/semantic_conventions/http.md
 */
var AttributeNames;
exports.AttributeNames = AttributeNames;

(function (AttributeNames) {
  AttributeNames["COMPONENT"] = "component";
  AttributeNames["HTTP_ERROR_NAME"] = "http.error_name";
  AttributeNames["HTTP_STATUS_TEXT"] = "http.status_text";
})(AttributeNames || (exports.AttributeNames = AttributeNames = {}));
},{}],"node_modules/@opentelemetry/instrumentation-fetch/build/esm/version.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.VERSION = void 0;

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// this is autogenerated file, see scripts/version-update.js
var VERSION = '0.26.0';
exports.VERSION = VERSION;
},{}],"node_modules/@opentelemetry/instrumentation-fetch/build/esm/fetch.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FetchInstrumentation = void 0;

var api = _interopRequireWildcard(require("@opentelemetry/api"));

var _instrumentation = require("@opentelemetry/instrumentation");

var core = _interopRequireWildcard(require("@opentelemetry/core"));

var web = _interopRequireWildcard(require("@opentelemetry/sdk-trace-web"));

var _AttributeNames = require("./enums/AttributeNames");

var _semanticConventions = require("@opentelemetry/semantic-conventions");

var _version = require("./version");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __extends = void 0 && (void 0).__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) {
        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
      }
    };

    return _extendStatics(d, b);
  };

  return function (d, b) {
    if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");

    _extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

// how long to wait for observer to collect information about resources
// this is needed as event "load" is called before observer
// hard to say how long it should really wait, seems like 300ms is
// safe enough
var OBSERVER_WAIT_TIME_MS = 300;
/**
 * This class represents a fetch plugin for auto instrumentation
 */

var FetchInstrumentation =
/** @class */
function (_super) {
  __extends(FetchInstrumentation, _super);

  function FetchInstrumentation(config) {
    if (config === void 0) {
      config = {};
    }

    var _this = _super.call(this, '@opentelemetry/instrumentation-fetch', _version.VERSION, Object.assign({}, config)) || this;

    _this.component = 'fetch';
    _this.version = _version.VERSION;
    _this.moduleName = _this.component;
    _this._usedResources = new WeakSet();
    _this._tasksCount = 0;
    return _this;
  }

  FetchInstrumentation.prototype.init = function () {};

  FetchInstrumentation.prototype._getConfig = function () {
    return this._config;
  };
  /**
   * Add cors pre flight child span
   * @param span
   * @param corsPreFlightRequest
   */


  FetchInstrumentation.prototype._addChildSpan = function (span, corsPreFlightRequest) {
    var childSpan = this.tracer.startSpan('CORS Preflight', {
      startTime: corsPreFlightRequest[web.PerformanceTimingNames.FETCH_START]
    }, api.trace.setSpan(api.context.active(), span));
    web.addSpanNetworkEvents(childSpan, corsPreFlightRequest);
    childSpan.end(corsPreFlightRequest[web.PerformanceTimingNames.RESPONSE_END]);
  };
  /**
   * Adds more attributes to span just before ending it
   * @param span
   * @param response
   */


  FetchInstrumentation.prototype._addFinalSpanAttributes = function (span, response) {
    var parsedUrl = web.parseUrl(response.url);
    span.setAttribute(_semanticConventions.SemanticAttributes.HTTP_STATUS_CODE, response.status);

    if (response.statusText != null) {
      span.setAttribute(_AttributeNames.AttributeNames.HTTP_STATUS_TEXT, response.statusText);
    }

    span.setAttribute(_semanticConventions.SemanticAttributes.HTTP_HOST, parsedUrl.host);
    span.setAttribute(_semanticConventions.SemanticAttributes.HTTP_SCHEME, parsedUrl.protocol.replace(':', ''));
    span.setAttribute(_semanticConventions.SemanticAttributes.HTTP_USER_AGENT, navigator.userAgent);
  };
  /**
   * Add headers
   * @param options
   * @param spanUrl
   */


  FetchInstrumentation.prototype._addHeaders = function (options, spanUrl) {
    if (!web.shouldPropagateTraceHeaders(spanUrl, this._getConfig().propagateTraceHeaderCorsUrls)) {
      var headers = {};
      api.propagation.inject(api.context.active(), headers);

      if (Object.keys(headers).length > 0) {
        this._diag.debug('headers inject skipped due to CORS policy');
      }

      return;
    }

    if (options instanceof Request) {
      api.propagation.inject(api.context.active(), options.headers, {
        set: function set(h, k, v) {
          return h.set(k, typeof v === 'string' ? v : String(v));
        }
      });
    } else if (options.headers instanceof Headers) {
      api.propagation.inject(api.context.active(), options.headers, {
        set: function set(h, k, v) {
          return h.set(k, typeof v === 'string' ? v : String(v));
        }
      });
    } else {
      var headers = {};
      api.propagation.inject(api.context.active(), headers);
      options.headers = Object.assign({}, headers, options.headers || {});
    }
  };
  /**
   * Clears the resource timings and all resources assigned with spans
   *     when {@link FetchPluginConfig.clearTimingResources} is
   *     set to true (default false)
   * @private
   */


  FetchInstrumentation.prototype._clearResources = function () {
    if (this._tasksCount === 0 && this._getConfig().clearTimingResources) {
      performance.clearResourceTimings();
      this._usedResources = new WeakSet();
    }
  };
  /**
   * Creates a new span
   * @param url
   * @param options
   */


  FetchInstrumentation.prototype._createSpan = function (url, options) {
    var _a;

    if (options === void 0) {
      options = {};
    }

    if (core.isUrlIgnored(url, this._getConfig().ignoreUrls)) {
      this._diag.debug('ignoring span as url matches ignored url');

      return;
    }

    var method = (options.method || 'GET').toUpperCase();
    var spanName = "HTTP " + method;
    return this.tracer.startSpan(spanName, {
      kind: api.SpanKind.CLIENT,
      attributes: (_a = {}, _a[_AttributeNames.AttributeNames.COMPONENT] = this.moduleName, _a[_semanticConventions.SemanticAttributes.HTTP_METHOD] = method, _a[_semanticConventions.SemanticAttributes.HTTP_URL] = url, _a)
    });
  };
  /**
   * Finds appropriate resource and add network events to the span
   * @param span
   * @param resourcesObserver
   * @param endTime
   */


  FetchInstrumentation.prototype._findResourceAndAddNetworkEvents = function (span, resourcesObserver, endTime) {
    var resources = resourcesObserver.entries;

    if (!resources.length) {
      if (!performance.getEntriesByType) {
        return;
      } // fallback - either Observer is not available or it took longer
      // then OBSERVER_WAIT_TIME_MS and observer didn't collect enough
      // information


      resources = performance.getEntriesByType('resource');
    }

    var resource = web.getResource(resourcesObserver.spanUrl, resourcesObserver.startTime, endTime, resources, this._usedResources, 'fetch');

    if (resource.mainRequest) {
      var mainRequest = resource.mainRequest;

      this._markResourceAsUsed(mainRequest);

      var corsPreFlightRequest = resource.corsPreFlightRequest;

      if (corsPreFlightRequest) {
        this._addChildSpan(span, corsPreFlightRequest);

        this._markResourceAsUsed(corsPreFlightRequest);
      }

      web.addSpanNetworkEvents(span, mainRequest);
    }
  };
  /**
   * Marks certain [resource]{@link PerformanceResourceTiming} when information
   * from this is used to add events to span.
   * This is done to avoid reusing the same resource again for next span
   * @param resource
   */


  FetchInstrumentation.prototype._markResourceAsUsed = function (resource) {
    this._usedResources.add(resource);
  };
  /**
   * Finish span, add attributes, network events etc.
   * @param span
   * @param spanData
   * @param response
   */


  FetchInstrumentation.prototype._endSpan = function (span, spanData, response) {
    var _this = this;

    var endTime = core.hrTime();

    this._addFinalSpanAttributes(span, response);

    setTimeout(function () {
      var _a;

      (_a = spanData.observer) === null || _a === void 0 ? void 0 : _a.disconnect();

      _this._findResourceAndAddNetworkEvents(span, spanData, endTime);

      _this._tasksCount--;

      _this._clearResources();

      span.end(endTime);
    }, OBSERVER_WAIT_TIME_MS);
  };
  /**
   * Patches the constructor of fetch
   */


  FetchInstrumentation.prototype._patchConstructor = function () {
    var _this = this;

    return function (original) {
      var plugin = _this;
      return function patchConstructor() {
        var _this = this;

        var args = [];

        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
        }

        var url = args[0] instanceof Request ? args[0].url : args[0];
        var options = args[0] instanceof Request ? args[0] : args[1] || {};

        var createdSpan = plugin._createSpan(url, options);

        if (!createdSpan) {
          return original.apply(this, args);
        }

        var spanData = plugin._prepareSpanData(url);

        function endSpanOnError(span, error) {
          plugin._applyAttributesAfterFetch(span, options, error);

          plugin._endSpan(span, spanData, {
            status: error.status || 0,
            statusText: error.message,
            url: url
          });
        }

        function endSpanOnSuccess(span, response) {
          plugin._applyAttributesAfterFetch(span, options, response);

          if (response.status >= 200 && response.status < 400) {
            plugin._endSpan(span, spanData, response);
          } else {
            plugin._endSpan(span, spanData, {
              status: response.status,
              statusText: response.statusText,
              url: url
            });
          }
        }

        function onSuccess(span, resolve, response) {
          try {
            var resClone = response.clone();
            var body = resClone.body;

            if (body) {
              var reader_1 = body.getReader();

              var read_1 = function read_1() {
                reader_1.read().then(function (_a) {
                  var done = _a.done;

                  if (done) {
                    endSpanOnSuccess(span, response);
                  } else {
                    read_1();
                  }
                }, function (error) {
                  endSpanOnError(span, error);
                });
              };

              read_1();
            } else {
              // some older browsers don't have .body implemented
              endSpanOnSuccess(span, response);
            }
          } finally {
            resolve(response);
          }
        }

        function onError(span, reject, error) {
          try {
            endSpanOnError(span, error);
          } finally {
            reject(error);
          }
        }

        return new Promise(function (resolve, reject) {
          return api.context.with(api.trace.setSpan(api.context.active(), createdSpan), function () {
            plugin._addHeaders(options, url);

            plugin._tasksCount++;
            return original.apply(_this, options instanceof Request ? [options] : [url, options]).then(onSuccess.bind(_this, createdSpan, resolve), onError.bind(_this, createdSpan, reject));
          });
        });
      };
    };
  };

  FetchInstrumentation.prototype._applyAttributesAfterFetch = function (span, request, result) {
    var _this = this;

    var applyCustomAttributesOnSpan = this._getConfig().applyCustomAttributesOnSpan;

    if (applyCustomAttributesOnSpan) {
      (0, _instrumentation.safeExecuteInTheMiddle)(function () {
        return applyCustomAttributesOnSpan(span, request, result);
      }, function (error) {
        if (!error) {
          return;
        }

        _this._diag.error('applyCustomAttributesOnSpan', error);
      }, true);
    }
  };
  /**
   * Prepares a span data - needed later for matching appropriate network
   *     resources
   * @param spanUrl
   */


  FetchInstrumentation.prototype._prepareSpanData = function (spanUrl) {
    var startTime = core.hrTime();
    var entries = [];

    if (typeof window.PerformanceObserver === 'undefined') {
      return {
        entries: entries,
        startTime: startTime,
        spanUrl: spanUrl
      };
    }

    var observer = new PerformanceObserver(function (list) {
      var perfObsEntries = list.getEntries();
      var urlNormalizingAnchor = web.getUrlNormalizingAnchor();
      urlNormalizingAnchor.href = spanUrl;
      perfObsEntries.forEach(function (entry) {
        if (entry.initiatorType === 'fetch' && entry.name === urlNormalizingAnchor.href) {
          entries.push(entry);
        }
      });
    });
    observer.observe({
      entryTypes: ['resource']
    });
    return {
      entries: entries,
      observer: observer,
      startTime: startTime,
      spanUrl: spanUrl
    };
  };
  /**
   * implements enable function
   */


  FetchInstrumentation.prototype.enable = function () {
    if ((0, _instrumentation.isWrapped)(window.fetch)) {
      this._unwrap(window, 'fetch');

      this._diag.debug('removing previous patch for constructor');
    }

    this._wrap(window, 'fetch', this._patchConstructor());
  };
  /**
   * implements unpatch function
   */


  FetchInstrumentation.prototype.disable = function () {
    this._unwrap(window, 'fetch');

    this._usedResources = new WeakSet();
  };

  return FetchInstrumentation;
}(_instrumentation.InstrumentationBase);

exports.FetchInstrumentation = FetchInstrumentation;
},{"@opentelemetry/api":"node_modules/@opentelemetry/api/build/esm/index.js","@opentelemetry/instrumentation":"node_modules/@opentelemetry/instrumentation/build/esm/index.js","@opentelemetry/core":"node_modules/@opentelemetry/core/build/esm/index.js","@opentelemetry/sdk-trace-web":"node_modules/@opentelemetry/sdk-trace-web/build/esm/index.js","./enums/AttributeNames":"node_modules/@opentelemetry/instrumentation-fetch/build/esm/enums/AttributeNames.js","@opentelemetry/semantic-conventions":"node_modules/@opentelemetry/semantic-conventions/build/esm/index.js","./version":"node_modules/@opentelemetry/instrumentation-fetch/build/esm/version.js"}],"node_modules/@opentelemetry/instrumentation-fetch/build/esm/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _fetch = require("./fetch");

Object.keys(_fetch).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _fetch[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _fetch[key];
    }
  });
});
},{"./fetch":"node_modules/@opentelemetry/instrumentation-fetch/build/esm/fetch.js"}],"output/OpenTelemetry.InstrumentationFetch/foreign.js":[function(require,module,exports) {
"use strict";

var _require = require('@opentelemetry/instrumentation-fetch'),
    FetchInstrumentation = _require.FetchInstrumentation;

exports.fetchInstrumentation = function () {
  return new FetchInstrumentation();
};
},{"@opentelemetry/instrumentation-fetch":"node_modules/@opentelemetry/instrumentation-fetch/build/esm/index.js"}],"output/OpenTelemetry.InstrumentationFetch/index.js":[function(require,module,exports) {
// Generated by purs version 0.14.5
"use strict";

var $foreign = require("./foreign.js");

module.exports = {
  fetchInstrumentation: $foreign.fetchInstrumentation
};
},{"./foreign.js":"output/OpenTelemetry.InstrumentationFetch/foreign.js"}],"output/OpenTelemetry.SDKTraceBase/foreign.js":[function(require,module,exports) {
"use strict";

var _require = require("@opentelemetry/sdk-trace-base"),
    BasicTracerProvider = _require.BasicTracerProvider,
    ConsoleSpanExporter = _require.ConsoleSpanExporter,
    SimpleSpanProcessor = _require.SimpleSpanProcessor;

exports.registerBasicTracerProvider = function () {
  new BasicTracerProvider().register();
};

exports.consoleExporter = function () {
  return new ConsoleSpanExporter();
};

exports.wrapSimpleSpanProcessor = function (exporter) {
  return new SimpleSpanProcessor(exporter);
};
},{"@opentelemetry/sdk-trace-base":"node_modules/@opentelemetry/sdk-trace-base/build/esm/index.js"}],"output/OpenTelemetry.SDKTraceBase/index.js":[function(require,module,exports) {
// Generated by purs version 0.14.5
"use strict";

var $foreign = require("./foreign.js");

module.exports = {
  registerBasicTracerProvider: $foreign.registerBasicTracerProvider,
  wrapSimpleSpanProcessor: $foreign.wrapSimpleSpanProcessor,
  consoleExporter: $foreign.consoleExporter
};
},{"./foreign.js":"output/OpenTelemetry.SDKTraceBase/foreign.js"}],"output/OpenTelemetry.SDKTraceWeb/foreign.js":[function(require,module,exports) {
"use strict";

var _require = require("@opentelemetry/sdk-trace-web"),
    WebTracerProvider = _require.WebTracerProvider;

exports.webTracerProvider = function () {
  return new WebTracerProvider();
};

exports.addSpanProcessor = function (webTracerProvider) {
  return function (spanProcessor) {
    return function () {
      webTracerProvider.addSpanProcessor(spanProcessor);
    };
  };
};

exports.getTracer = function (webTracerProvider) {
  return function (text) {
    return function () {
      return webTracerProvider.getTracer(text);
    };
  };
};

exports.registerContextManager = function (webTracerProvider) {
  return function (contextManager) {
    return function () {
      return webTracerProvider.register({
        contextManager: contextManager
      });
    };
  };
};
},{"@opentelemetry/sdk-trace-web":"node_modules/@opentelemetry/sdk-trace-web/build/esm/index.js"}],"output/OpenTelemetry.SDKTraceWeb/index.js":[function(require,module,exports) {
// Generated by purs version 0.14.5
"use strict";

var $foreign = require("./foreign.js");

module.exports = {
  webTracerProvider: $foreign.webTracerProvider,
  addSpanProcessor: $foreign.addSpanProcessor,
  getTracer: $foreign.getTracer,
  registerContextManager: $foreign.registerContextManager
};
},{"./foreign.js":"output/OpenTelemetry.SDKTraceWeb/foreign.js"}],"node_modules/@opentelemetry/context-zone-peer-dep/build/esm/util.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isListenerObject = isListenerObject;

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * check if an object has addEventListener and removeEventListener functions then it will return true
 * @param obj
 */
function isListenerObject(obj) {
  if (obj === void 0) {
    obj = {};
  }

  return typeof obj.addEventListener === 'function' && typeof obj.removeEventListener === 'function';
}
},{}],"node_modules/@opentelemetry/context-zone-peer-dep/build/esm/ZoneContextManager.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ZoneContextManager = void 0;

var _api = require("@opentelemetry/api");

var _util = require("./util");

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* Key name to be used to save a context reference in Zone */
var ZONE_CONTEXT_KEY = 'OT_ZONE_CONTEXT';
/**
 * ZoneContextManager
 * This module provides an easy functionality for tracing action between asynchronous operations in web.
 * It was not possible with standard [StackContextManager]{@link https://github.com/open-telemetry/opentelemetry-js/blob/main/packages/opentelemetry-sdk-trace-web/src/StackContextManager.ts}.
 * It heavily depends on [zone.js]{@link https://www.npmjs.com/package/zone.js}.
 * It stores the information about context in zone. Each Context will have always new Zone;
 * It also supports binding a certain Span to a target that has "addEventListener" and "removeEventListener".
 * When this happens a new zone is being created and the provided Span is being assigned to this zone.
 */

var ZoneContextManager =
/** @class */
function () {
  function ZoneContextManager() {
    /**
     * whether the context manager is enabled or not
     */
    this._enabled = false;
    /**
     * Helps to create a unique name for the zones - part of zone name
     */

    this._zoneCounter = 0;
  }
  /**
   * Returns the active context from certain zone name
   * @param activeZone
   */


  ZoneContextManager.prototype._activeContextFromZone = function (activeZone) {
    return activeZone && activeZone.get(ZONE_CONTEXT_KEY) || _api.ROOT_CONTEXT;
  };
  /**
   * @param context A context (span) to be executed within target function
   * @param target Function to be executed within the context
   */
  // eslint-disable-next-line @typescript-eslint/ban-types


  ZoneContextManager.prototype._bindFunction = function (context, target) {
    var manager = this;

    var contextWrapper = function contextWrapper() {
      var _this = this;

      var args = [];

      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }

      return manager.with(context, function () {
        return target.apply(_this, args);
      });
    };

    Object.defineProperty(contextWrapper, 'length', {
      enumerable: false,
      configurable: true,
      writable: false,
      value: target.length
    });
    return contextWrapper;
  };
  /**
   * @param context A context (span) to be bind to target
   * @param obj target object on which the listeners will be patched
   */


  ZoneContextManager.prototype._bindListener = function (context, obj) {
    var target = obj;

    if (target.__ot_listeners !== undefined) {
      return obj;
    }

    target.__ot_listeners = {};

    if (typeof target.addEventListener === 'function') {
      target.addEventListener = this._patchAddEventListener(target, target.addEventListener, context);
    }

    if (typeof target.removeEventListener === 'function') {
      target.removeEventListener = this._patchRemoveEventListener(target, target.removeEventListener);
    }

    return obj;
  };
  /**
   * Creates a new unique zone name
   */


  ZoneContextManager.prototype._createZoneName = function () {
    this._zoneCounter++;
    var random = Math.random();
    return this._zoneCounter + "-" + random;
  };
  /**
   * Creates a new zone
   * @param zoneName zone name
   * @param context A context (span) to be bind with Zone
   */


  ZoneContextManager.prototype._createZone = function (zoneName, context) {
    var _a;

    return Zone.current.fork({
      name: zoneName,
      properties: (_a = {}, _a[ZONE_CONTEXT_KEY] = context, _a)
    });
  };
  /**
   * Returns the active zone
   */


  ZoneContextManager.prototype._getActiveZone = function () {
    return Zone.current;
  };
  /**
   * Patches addEventListener method
   * @param target any target that has "addEventListener" method
   * @param original reference to the patched method
   * @param [context] context to be bind to the listener
   */


  ZoneContextManager.prototype._patchAddEventListener = function (target, original, context) {
    var contextManager = this;
    return function (event, listener, opts) {
      if (target.__ot_listeners === undefined) {
        target.__ot_listeners = {};
      }

      var listeners = target.__ot_listeners[event];

      if (listeners === undefined) {
        listeners = new WeakMap();
        target.__ot_listeners[event] = listeners;
      }

      var patchedListener = contextManager.bind(context, listener); // store a weak reference of the user listener to ours

      listeners.set(listener, patchedListener);
      return original.call(this, event, patchedListener, opts);
    };
  };
  /**
   * Patches removeEventListener method
   * @param target any target that has "removeEventListener" method
   * @param original reference to the patched method
   */


  ZoneContextManager.prototype._patchRemoveEventListener = function (target, original) {
    return function (event, listener) {
      if (target.__ot_listeners === undefined || target.__ot_listeners[event] === undefined) {
        return original.call(this, event, listener);
      }

      var events = target.__ot_listeners[event];
      var patchedListener = events.get(listener);
      events.delete(listener);
      return original.call(this, event, patchedListener || listener);
    };
  };
  /**
   * Returns the active context
   */


  ZoneContextManager.prototype.active = function () {
    if (!this._enabled) {
      return _api.ROOT_CONTEXT;
    }

    var activeZone = this._getActiveZone();

    var active = this._activeContextFromZone(activeZone);

    if (active) {
      return active;
    }

    return _api.ROOT_CONTEXT;
  };
  /**
   * Binds a the certain context or the active one to the target function and then returns the target
   * @param context A context (span) to be bind to target
   * @param target a function or event emitter. When target or one of its callbacks is called,
   *  the provided context will be used as the active context for the duration of the call.
   */


  ZoneContextManager.prototype.bind = function (context, target) {
    // if no specific context to propagate is given, we use the current one
    if (context === undefined) {
      context = this.active();
    }

    if (typeof target === 'function') {
      return this._bindFunction(context, target);
    } else if ((0, _util.isListenerObject)(target)) {
      this._bindListener(context, target);
    }

    return target;
  };
  /**
   * Disable the context manager (clears all the contexts)
   */


  ZoneContextManager.prototype.disable = function () {
    this._enabled = false;
    return this;
  };
  /**
   * Enables the context manager and creates a default(root) context
   */


  ZoneContextManager.prototype.enable = function () {
    this._enabled = true;
    return this;
  };
  /**
   * Calls the callback function [fn] with the provided [context].
   *     If [context] is undefined then it will use the active context.
   *     The context will be set as active
   * @param context A context (span) to be called with provided callback
   * @param fn Callback function
   * @param thisArg optional receiver to be used for calling fn
   * @param args optional arguments forwarded to fn
   */


  ZoneContextManager.prototype.with = function (context, fn, thisArg) {
    var args = [];

    for (var _i = 3; _i < arguments.length; _i++) {
      args[_i - 3] = arguments[_i];
    }

    var zoneName = this._createZoneName();

    var newZone = this._createZone(zoneName, context);

    return newZone.run(fn, thisArg, args);
  };

  return ZoneContextManager;
}();

exports.ZoneContextManager = ZoneContextManager;
},{"@opentelemetry/api":"node_modules/@opentelemetry/api/build/esm/index.js","./util":"node_modules/@opentelemetry/context-zone-peer-dep/build/esm/util.js"}],"node_modules/@opentelemetry/context-zone-peer-dep/build/esm/types.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/@opentelemetry/context-zone-peer-dep/build/esm/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _ZoneContextManager = require("./ZoneContextManager");

Object.keys(_ZoneContextManager).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _ZoneContextManager[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _ZoneContextManager[key];
    }
  });
});

var _types = require("./types");

Object.keys(_types).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _types[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _types[key];
    }
  });
});
},{"./ZoneContextManager":"node_modules/@opentelemetry/context-zone-peer-dep/build/esm/ZoneContextManager.js","./types":"node_modules/@opentelemetry/context-zone-peer-dep/build/esm/types.js"}],"node_modules/zone.js/fesm2015/zone.js":[function(require,module,exports) {

'use strict';
/**
 * @license Angular v12.0.0-next.0
 * (c) 2010-2020 Google LLC. https://angular.io/
 * License: MIT
 */
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
const Zone$1 = (function (global) {
    const performance = global['performance'];
    function mark(name) {
        performance && performance['mark'] && performance['mark'](name);
    }
    function performanceMeasure(name, label) {
        performance && performance['measure'] && performance['measure'](name, label);
    }
    mark('Zone');
    // Initialize before it's accessed below.
    // __Zone_symbol_prefix global can be used to override the default zone
    // symbol prefix with a custom one if needed.
    const symbolPrefix = global['__Zone_symbol_prefix'] || '__zone_symbol__';
    function __symbol__(name) {
        return symbolPrefix + name;
    }
    const checkDuplicate = global[__symbol__('forceDuplicateZoneCheck')] === true;
    if (global['Zone']) {
        // if global['Zone'] already exists (maybe zone.js was already loaded or
        // some other lib also registered a global object named Zone), we may need
        // to throw an error, but sometimes user may not want this error.
        // For example,
        // we have two web pages, page1 includes zone.js, page2 doesn't.
        // and the 1st time user load page1 and page2, everything work fine,
        // but when user load page2 again, error occurs because global['Zone'] already exists.
        // so we add a flag to let user choose whether to throw this error or not.
        // By default, if existing Zone is from zone.js, we will not throw the error.
        if (checkDuplicate || typeof global['Zone'].__symbol__ !== 'function') {
            throw new Error('Zone already loaded.');
        }
        else {
            return global['Zone'];
        }
    }
    class Zone {
        constructor(parent, zoneSpec) {
            this._parent = parent;
            this._name = zoneSpec ? zoneSpec.name || 'unnamed' : '<root>';
            this._properties = zoneSpec && zoneSpec.properties || {};
            this._zoneDelegate =
                new ZoneDelegate(this, this._parent && this._parent._zoneDelegate, zoneSpec);
        }
        static assertZonePatched() {
            if (global['Promise'] !== patches['ZoneAwarePromise']) {
                throw new Error('Zone.js has detected that ZoneAwarePromise `(window|global).Promise` ' +
                    'has been overwritten.\n' +
                    'Most likely cause is that a Promise polyfill has been loaded ' +
                    'after Zone.js (Polyfilling Promise api is not necessary when zone.js is loaded. ' +
                    'If you must load one, do so before loading zone.js.)');
            }
        }
        static get root() {
            let zone = Zone.current;
            while (zone.parent) {
                zone = zone.parent;
            }
            return zone;
        }
        static get current() {
            return _currentZoneFrame.zone;
        }
        static get currentTask() {
            return _currentTask;
        }
        // tslint:disable-next-line:require-internal-with-underscore
        static __load_patch(name, fn, ignoreDuplicate = false) {
            if (patches.hasOwnProperty(name)) {
                // `checkDuplicate` option is defined from global variable
                // so it works for all modules.
                // `ignoreDuplicate` can work for the specified module
                if (!ignoreDuplicate && checkDuplicate) {
                    throw Error('Already loaded patch: ' + name);
                }
            }
            else if (!global['__Zone_disable_' + name]) {
                const perfName = 'Zone:' + name;
                mark(perfName);
                patches[name] = fn(global, Zone, _api);
                performanceMeasure(perfName, perfName);
            }
        }
        get parent() {
            return this._parent;
        }
        get name() {
            return this._name;
        }
        get(key) {
            const zone = this.getZoneWith(key);
            if (zone)
                return zone._properties[key];
        }
        getZoneWith(key) {
            let current = this;
            while (current) {
                if (current._properties.hasOwnProperty(key)) {
                    return current;
                }
                current = current._parent;
            }
            return null;
        }
        fork(zoneSpec) {
            if (!zoneSpec)
                throw new Error('ZoneSpec required!');
            return this._zoneDelegate.fork(this, zoneSpec);
        }
        wrap(callback, source) {
            if (typeof callback !== 'function') {
                throw new Error('Expecting function got: ' + callback);
            }
            const _callback = this._zoneDelegate.intercept(this, callback, source);
            const zone = this;
            return function () {
                return zone.runGuarded(_callback, this, arguments, source);
            };
        }
        run(callback, applyThis, applyArgs, source) {
            _currentZoneFrame = { parent: _currentZoneFrame, zone: this };
            try {
                return this._zoneDelegate.invoke(this, callback, applyThis, applyArgs, source);
            }
            finally {
                _currentZoneFrame = _currentZoneFrame.parent;
            }
        }
        runGuarded(callback, applyThis = null, applyArgs, source) {
            _currentZoneFrame = { parent: _currentZoneFrame, zone: this };
            try {
                try {
                    return this._zoneDelegate.invoke(this, callback, applyThis, applyArgs, source);
                }
                catch (error) {
                    if (this._zoneDelegate.handleError(this, error)) {
                        throw error;
                    }
                }
            }
            finally {
                _currentZoneFrame = _currentZoneFrame.parent;
            }
        }
        runTask(task, applyThis, applyArgs) {
            if (task.zone != this) {
                throw new Error('A task can only be run in the zone of creation! (Creation: ' +
                    (task.zone || NO_ZONE).name + '; Execution: ' + this.name + ')');
            }
            // https://github.com/angular/zone.js/issues/778, sometimes eventTask
            // will run in notScheduled(canceled) state, we should not try to
            // run such kind of task but just return
            if (task.state === notScheduled && (task.type === eventTask || task.type === macroTask)) {
                return;
            }
            const reEntryGuard = task.state != running;
            reEntryGuard && task._transitionTo(running, scheduled);
            task.runCount++;
            const previousTask = _currentTask;
            _currentTask = task;
            _currentZoneFrame = { parent: _currentZoneFrame, zone: this };
            try {
                if (task.type == macroTask && task.data && !task.data.isPeriodic) {
                    task.cancelFn = undefined;
                }
                try {
                    return this._zoneDelegate.invokeTask(this, task, applyThis, applyArgs);
                }
                catch (error) {
                    if (this._zoneDelegate.handleError(this, error)) {
                        throw error;
                    }
                }
            }
            finally {
                // if the task's state is notScheduled or unknown, then it has already been cancelled
                // we should not reset the state to scheduled
                if (task.state !== notScheduled && task.state !== unknown) {
                    if (task.type == eventTask || (task.data && task.data.isPeriodic)) {
                        reEntryGuard && task._transitionTo(scheduled, running);
                    }
                    else {
                        task.runCount = 0;
                        this._updateTaskCount(task, -1);
                        reEntryGuard &&
                            task._transitionTo(notScheduled, running, notScheduled);
                    }
                }
                _currentZoneFrame = _currentZoneFrame.parent;
                _currentTask = previousTask;
            }
        }
        scheduleTask(task) {
            if (task.zone && task.zone !== this) {
                // check if the task was rescheduled, the newZone
                // should not be the children of the original zone
                let newZone = this;
                while (newZone) {
                    if (newZone === task.zone) {
                        throw Error(`can not reschedule task to ${this.name} which is descendants of the original zone ${task.zone.name}`);
                    }
                    newZone = newZone.parent;
                }
            }
            task._transitionTo(scheduling, notScheduled);
            const zoneDelegates = [];
            task._zoneDelegates = zoneDelegates;
            task._zone = this;
            try {
                task = this._zoneDelegate.scheduleTask(this, task);
            }
            catch (err) {
                // should set task's state to unknown when scheduleTask throw error
                // because the err may from reschedule, so the fromState maybe notScheduled
                task._transitionTo(unknown, scheduling, notScheduled);
                // TODO: @JiaLiPassion, should we check the result from handleError?
                this._zoneDelegate.handleError(this, err);
                throw err;
            }
            if (task._zoneDelegates === zoneDelegates) {
                // we have to check because internally the delegate can reschedule the task.
                this._updateTaskCount(task, 1);
            }
            if (task.state == scheduling) {
                task._transitionTo(scheduled, scheduling);
            }
            return task;
        }
        scheduleMicroTask(source, callback, data, customSchedule) {
            return this.scheduleTask(new ZoneTask(microTask, source, callback, data, customSchedule, undefined));
        }
        scheduleMacroTask(source, callback, data, customSchedule, customCancel) {
            return this.scheduleTask(new ZoneTask(macroTask, source, callback, data, customSchedule, customCancel));
        }
        scheduleEventTask(source, callback, data, customSchedule, customCancel) {
            return this.scheduleTask(new ZoneTask(eventTask, source, callback, data, customSchedule, customCancel));
        }
        cancelTask(task) {
            if (task.zone != this)
                throw new Error('A task can only be cancelled in the zone of creation! (Creation: ' +
                    (task.zone || NO_ZONE).name + '; Execution: ' + this.name + ')');
            task._transitionTo(canceling, scheduled, running);
            try {
                this._zoneDelegate.cancelTask(this, task);
            }
            catch (err) {
                // if error occurs when cancelTask, transit the state to unknown
                task._transitionTo(unknown, canceling);
                this._zoneDelegate.handleError(this, err);
                throw err;
            }
            this._updateTaskCount(task, -1);
            task._transitionTo(notScheduled, canceling);
            task.runCount = 0;
            return task;
        }
        _updateTaskCount(task, count) {
            const zoneDelegates = task._zoneDelegates;
            if (count == -1) {
                task._zoneDelegates = null;
            }
            for (let i = 0; i < zoneDelegates.length; i++) {
                zoneDelegates[i]._updateTaskCount(task.type, count);
            }
        }
    }
    // tslint:disable-next-line:require-internal-with-underscore
    Zone.__symbol__ = __symbol__;
    const DELEGATE_ZS = {
        name: '',
        onHasTask: (delegate, _, target, hasTaskState) => delegate.hasTask(target, hasTaskState),
        onScheduleTask: (delegate, _, target, task) => delegate.scheduleTask(target, task),
        onInvokeTask: (delegate, _, target, task, applyThis, applyArgs) => delegate.invokeTask(target, task, applyThis, applyArgs),
        onCancelTask: (delegate, _, target, task) => delegate.cancelTask(target, task)
    };
    class ZoneDelegate {
        constructor(zone, parentDelegate, zoneSpec) {
            this._taskCounts = { 'microTask': 0, 'macroTask': 0, 'eventTask': 0 };
            this.zone = zone;
            this._parentDelegate = parentDelegate;
            this._forkZS = zoneSpec && (zoneSpec && zoneSpec.onFork ? zoneSpec : parentDelegate._forkZS);
            this._forkDlgt = zoneSpec && (zoneSpec.onFork ? parentDelegate : parentDelegate._forkDlgt);
            this._forkCurrZone =
                zoneSpec && (zoneSpec.onFork ? this.zone : parentDelegate._forkCurrZone);
            this._interceptZS =
                zoneSpec && (zoneSpec.onIntercept ? zoneSpec : parentDelegate._interceptZS);
            this._interceptDlgt =
                zoneSpec && (zoneSpec.onIntercept ? parentDelegate : parentDelegate._interceptDlgt);
            this._interceptCurrZone =
                zoneSpec && (zoneSpec.onIntercept ? this.zone : parentDelegate._interceptCurrZone);
            this._invokeZS = zoneSpec && (zoneSpec.onInvoke ? zoneSpec : parentDelegate._invokeZS);
            this._invokeDlgt =
                zoneSpec && (zoneSpec.onInvoke ? parentDelegate : parentDelegate._invokeDlgt);
            this._invokeCurrZone =
                zoneSpec && (zoneSpec.onInvoke ? this.zone : parentDelegate._invokeCurrZone);
            this._handleErrorZS =
                zoneSpec && (zoneSpec.onHandleError ? zoneSpec : parentDelegate._handleErrorZS);
            this._handleErrorDlgt =
                zoneSpec && (zoneSpec.onHandleError ? parentDelegate : parentDelegate._handleErrorDlgt);
            this._handleErrorCurrZone =
                zoneSpec && (zoneSpec.onHandleError ? this.zone : parentDelegate._handleErrorCurrZone);
            this._scheduleTaskZS =
                zoneSpec && (zoneSpec.onScheduleTask ? zoneSpec : parentDelegate._scheduleTaskZS);
            this._scheduleTaskDlgt = zoneSpec &&
                (zoneSpec.onScheduleTask ? parentDelegate : parentDelegate._scheduleTaskDlgt);
            this._scheduleTaskCurrZone =
                zoneSpec && (zoneSpec.onScheduleTask ? this.zone : parentDelegate._scheduleTaskCurrZone);
            this._invokeTaskZS =
                zoneSpec && (zoneSpec.onInvokeTask ? zoneSpec : parentDelegate._invokeTaskZS);
            this._invokeTaskDlgt =
                zoneSpec && (zoneSpec.onInvokeTask ? parentDelegate : parentDelegate._invokeTaskDlgt);
            this._invokeTaskCurrZone =
                zoneSpec && (zoneSpec.onInvokeTask ? this.zone : parentDelegate._invokeTaskCurrZone);
            this._cancelTaskZS =
                zoneSpec && (zoneSpec.onCancelTask ? zoneSpec : parentDelegate._cancelTaskZS);
            this._cancelTaskDlgt =
                zoneSpec && (zoneSpec.onCancelTask ? parentDelegate : parentDelegate._cancelTaskDlgt);
            this._cancelTaskCurrZone =
                zoneSpec && (zoneSpec.onCancelTask ? this.zone : parentDelegate._cancelTaskCurrZone);
            this._hasTaskZS = null;
            this._hasTaskDlgt = null;
            this._hasTaskDlgtOwner = null;
            this._hasTaskCurrZone = null;
            const zoneSpecHasTask = zoneSpec && zoneSpec.onHasTask;
            const parentHasTask = parentDelegate && parentDelegate._hasTaskZS;
            if (zoneSpecHasTask || parentHasTask) {
                // If we need to report hasTask, than this ZS needs to do ref counting on tasks. In such
                // a case all task related interceptors must go through this ZD. We can't short circuit it.
                this._hasTaskZS = zoneSpecHasTask ? zoneSpec : DELEGATE_ZS;
                this._hasTaskDlgt = parentDelegate;
                this._hasTaskDlgtOwner = this;
                this._hasTaskCurrZone = zone;
                if (!zoneSpec.onScheduleTask) {
                    this._scheduleTaskZS = DELEGATE_ZS;
                    this._scheduleTaskDlgt = parentDelegate;
                    this._scheduleTaskCurrZone = this.zone;
                }
                if (!zoneSpec.onInvokeTask) {
                    this._invokeTaskZS = DELEGATE_ZS;
                    this._invokeTaskDlgt = parentDelegate;
                    this._invokeTaskCurrZone = this.zone;
                }
                if (!zoneSpec.onCancelTask) {
                    this._cancelTaskZS = DELEGATE_ZS;
                    this._cancelTaskDlgt = parentDelegate;
                    this._cancelTaskCurrZone = this.zone;
                }
            }
        }
        fork(targetZone, zoneSpec) {
            return this._forkZS ? this._forkZS.onFork(this._forkDlgt, this.zone, targetZone, zoneSpec) :
                new Zone(targetZone, zoneSpec);
        }
        intercept(targetZone, callback, source) {
            return this._interceptZS ?
                this._interceptZS.onIntercept(this._interceptDlgt, this._interceptCurrZone, targetZone, callback, source) :
                callback;
        }
        invoke(targetZone, callback, applyThis, applyArgs, source) {
            return this._invokeZS ? this._invokeZS.onInvoke(this._invokeDlgt, this._invokeCurrZone, targetZone, callback, applyThis, applyArgs, source) :
                callback.apply(applyThis, applyArgs);
        }
        handleError(targetZone, error) {
            return this._handleErrorZS ?
                this._handleErrorZS.onHandleError(this._handleErrorDlgt, this._handleErrorCurrZone, targetZone, error) :
                true;
        }
        scheduleTask(targetZone, task) {
            let returnTask = task;
            if (this._scheduleTaskZS) {
                if (this._hasTaskZS) {
                    returnTask._zoneDelegates.push(this._hasTaskDlgtOwner);
                }
                // clang-format off
                returnTask = this._scheduleTaskZS.onScheduleTask(this._scheduleTaskDlgt, this._scheduleTaskCurrZone, targetZone, task);
                // clang-format on
                if (!returnTask)
                    returnTask = task;
            }
            else {
                if (task.scheduleFn) {
                    task.scheduleFn(task);
                }
                else if (task.type == microTask) {
                    scheduleMicroTask(task);
                }
                else {
                    throw new Error('Task is missing scheduleFn.');
                }
            }
            return returnTask;
        }
        invokeTask(targetZone, task, applyThis, applyArgs) {
            return this._invokeTaskZS ? this._invokeTaskZS.onInvokeTask(this._invokeTaskDlgt, this._invokeTaskCurrZone, targetZone, task, applyThis, applyArgs) :
                task.callback.apply(applyThis, applyArgs);
        }
        cancelTask(targetZone, task) {
            let value;
            if (this._cancelTaskZS) {
                value = this._cancelTaskZS.onCancelTask(this._cancelTaskDlgt, this._cancelTaskCurrZone, targetZone, task);
            }
            else {
                if (!task.cancelFn) {
                    throw Error('Task is not cancelable');
                }
                value = task.cancelFn(task);
            }
            return value;
        }
        hasTask(targetZone, isEmpty) {
            // hasTask should not throw error so other ZoneDelegate
            // can still trigger hasTask callback
            try {
                this._hasTaskZS &&
                    this._hasTaskZS.onHasTask(this._hasTaskDlgt, this._hasTaskCurrZone, targetZone, isEmpty);
            }
            catch (err) {
                this.handleError(targetZone, err);
            }
        }
        // tslint:disable-next-line:require-internal-with-underscore
        _updateTaskCount(type, count) {
            const counts = this._taskCounts;
            const prev = counts[type];
            const next = counts[type] = prev + count;
            if (next < 0) {
                throw new Error('More tasks executed then were scheduled.');
            }
            if (prev == 0 || next == 0) {
                const isEmpty = {
                    microTask: counts['microTask'] > 0,
                    macroTask: counts['macroTask'] > 0,
                    eventTask: counts['eventTask'] > 0,
                    change: type
                };
                this.hasTask(this.zone, isEmpty);
            }
        }
    }
    class ZoneTask {
        constructor(type, source, callback, options, scheduleFn, cancelFn) {
            // tslint:disable-next-line:require-internal-with-underscore
            this._zone = null;
            this.runCount = 0;
            // tslint:disable-next-line:require-internal-with-underscore
            this._zoneDelegates = null;
            // tslint:disable-next-line:require-internal-with-underscore
            this._state = 'notScheduled';
            this.type = type;
            this.source = source;
            this.data = options;
            this.scheduleFn = scheduleFn;
            this.cancelFn = cancelFn;
            if (!callback) {
                throw new Error('callback is not defined');
            }
            this.callback = callback;
            const self = this;
            // TODO: @JiaLiPassion options should have interface
            if (type === eventTask && options && options.useG) {
                this.invoke = ZoneTask.invokeTask;
            }
            else {
                this.invoke = function () {
                    return ZoneTask.invokeTask.call(global, self, this, arguments);
                };
            }
        }
        static invokeTask(task, target, args) {
            if (!task) {
                task = this;
            }
            _numberOfNestedTaskFrames++;
            try {
                task.runCount++;
                return task.zone.runTask(task, target, args);
            }
            finally {
                if (_numberOfNestedTaskFrames == 1) {
                    drainMicroTaskQueue();
                }
                _numberOfNestedTaskFrames--;
            }
        }
        get zone() {
            return this._zone;
        }
        get state() {
            return this._state;
        }
        cancelScheduleRequest() {
            this._transitionTo(notScheduled, scheduling);
        }
        // tslint:disable-next-line:require-internal-with-underscore
        _transitionTo(toState, fromState1, fromState2) {
            if (this._state === fromState1 || this._state === fromState2) {
                this._state = toState;
                if (toState == notScheduled) {
                    this._zoneDelegates = null;
                }
            }
            else {
                throw new Error(`${this.type} '${this.source}': can not transition to '${toState}', expecting state '${fromState1}'${fromState2 ? ' or \'' + fromState2 + '\'' : ''}, was '${this._state}'.`);
            }
        }
        toString() {
            if (this.data && typeof this.data.handleId !== 'undefined') {
                return this.data.handleId.toString();
            }
            else {
                return Object.prototype.toString.call(this);
            }
        }
        // add toJSON method to prevent cyclic error when
        // call JSON.stringify(zoneTask)
        toJSON() {
            return {
                type: this.type,
                state: this.state,
                source: this.source,
                zone: this.zone.name,
                runCount: this.runCount
            };
        }
    }
    //////////////////////////////////////////////////////
    //////////////////////////////////////////////////////
    ///  MICROTASK QUEUE
    //////////////////////////////////////////////////////
    //////////////////////////////////////////////////////
    const symbolSetTimeout = __symbol__('setTimeout');
    const symbolPromise = __symbol__('Promise');
    const symbolThen = __symbol__('then');
    let _microTaskQueue = [];
    let _isDrainingMicrotaskQueue = false;
    let nativeMicroTaskQueuePromise;
    function scheduleMicroTask(task) {
        // if we are not running in any task, and there has not been anything scheduled
        // we must bootstrap the initial task creation by manually scheduling the drain
        if (_numberOfNestedTaskFrames === 0 && _microTaskQueue.length === 0) {
            // We are not running in Task, so we need to kickstart the microtask queue.
            if (!nativeMicroTaskQueuePromise) {
                if (global[symbolPromise]) {
                    nativeMicroTaskQueuePromise = global[symbolPromise].resolve(0);
                }
            }
            if (nativeMicroTaskQueuePromise) {
                let nativeThen = nativeMicroTaskQueuePromise[symbolThen];
                if (!nativeThen) {
                    // native Promise is not patchable, we need to use `then` directly
                    // issue 1078
                    nativeThen = nativeMicroTaskQueuePromise['then'];
                }
                nativeThen.call(nativeMicroTaskQueuePromise, drainMicroTaskQueue);
            }
            else {
                global[symbolSetTimeout](drainMicroTaskQueue, 0);
            }
        }
        task && _microTaskQueue.push(task);
    }
    function drainMicroTaskQueue() {
        if (!_isDrainingMicrotaskQueue) {
            _isDrainingMicrotaskQueue = true;
            while (_microTaskQueue.length) {
                const queue = _microTaskQueue;
                _microTaskQueue = [];
                for (let i = 0; i < queue.length; i++) {
                    const task = queue[i];
                    try {
                        task.zone.runTask(task, null, null);
                    }
                    catch (error) {
                        _api.onUnhandledError(error);
                    }
                }
            }
            _api.microtaskDrainDone();
            _isDrainingMicrotaskQueue = false;
        }
    }
    //////////////////////////////////////////////////////
    //////////////////////////////////////////////////////
    ///  BOOTSTRAP
    //////////////////////////////////////////////////////
    //////////////////////////////////////////////////////
    const NO_ZONE = { name: 'NO ZONE' };
    const notScheduled = 'notScheduled', scheduling = 'scheduling', scheduled = 'scheduled', running = 'running', canceling = 'canceling', unknown = 'unknown';
    const microTask = 'microTask', macroTask = 'macroTask', eventTask = 'eventTask';
    const patches = {};
    const _api = {
        symbol: __symbol__,
        currentZoneFrame: () => _currentZoneFrame,
        onUnhandledError: noop,
        microtaskDrainDone: noop,
        scheduleMicroTask: scheduleMicroTask,
        showUncaughtError: () => !Zone[__symbol__('ignoreConsoleErrorUncaughtError')],
        patchEventTarget: () => [],
        patchOnProperties: noop,
        patchMethod: () => noop,
        bindArguments: () => [],
        patchThen: () => noop,
        patchMacroTask: () => noop,
        patchEventPrototype: () => noop,
        isIEOrEdge: () => false,
        getGlobalObjects: () => undefined,
        ObjectDefineProperty: () => noop,
        ObjectGetOwnPropertyDescriptor: () => undefined,
        ObjectCreate: () => undefined,
        ArraySlice: () => [],
        patchClass: () => noop,
        wrapWithCurrentZone: () => noop,
        filterProperties: () => [],
        attachOriginToPatched: () => noop,
        _redefineProperty: () => noop,
        patchCallbacks: () => noop
    };
    let _currentZoneFrame = { parent: null, zone: new Zone(null, null) };
    let _currentTask = null;
    let _numberOfNestedTaskFrames = 0;
    function noop() { }
    performanceMeasure('Zone', 'Zone');
    return global['Zone'] = Zone;
})(typeof window !== 'undefined' && window || typeof self !== 'undefined' && self || global);

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Suppress closure compiler errors about unknown 'Zone' variable
 * @fileoverview
 * @suppress {undefinedVars,globalThis,missingRequire}
 */
/// <reference types="node"/>
// issue #989, to reduce bundle size, use short name
/** Object.getOwnPropertyDescriptor */
const ObjectGetOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
/** Object.defineProperty */
const ObjectDefineProperty = Object.defineProperty;
/** Object.getPrototypeOf */
const ObjectGetPrototypeOf = Object.getPrototypeOf;
/** Object.create */
const ObjectCreate = Object.create;
/** Array.prototype.slice */
const ArraySlice = Array.prototype.slice;
/** addEventListener string const */
const ADD_EVENT_LISTENER_STR = 'addEventListener';
/** removeEventListener string const */
const REMOVE_EVENT_LISTENER_STR = 'removeEventListener';
/** zoneSymbol addEventListener */
const ZONE_SYMBOL_ADD_EVENT_LISTENER = Zone.__symbol__(ADD_EVENT_LISTENER_STR);
/** zoneSymbol removeEventListener */
const ZONE_SYMBOL_REMOVE_EVENT_LISTENER = Zone.__symbol__(REMOVE_EVENT_LISTENER_STR);
/** true string const */
const TRUE_STR = 'true';
/** false string const */
const FALSE_STR = 'false';
/** Zone symbol prefix string const. */
const ZONE_SYMBOL_PREFIX = Zone.__symbol__('');
function wrapWithCurrentZone(callback, source) {
    return Zone.current.wrap(callback, source);
}
function scheduleMacroTaskWithCurrentZone(source, callback, data, customSchedule, customCancel) {
    return Zone.current.scheduleMacroTask(source, callback, data, customSchedule, customCancel);
}
const zoneSymbol = Zone.__symbol__;
const isWindowExists = typeof window !== 'undefined';
const internalWindow = isWindowExists ? window : undefined;
const _global = isWindowExists && internalWindow || typeof self === 'object' && self || global;
const REMOVE_ATTRIBUTE = 'removeAttribute';
const NULL_ON_PROP_VALUE = [null];
function bindArguments(args, source) {
    for (let i = args.length - 1; i >= 0; i--) {
        if (typeof args[i] === 'function') {
            args[i] = wrapWithCurrentZone(args[i], source + '_' + i);
        }
    }
    return args;
}
function patchPrototype(prototype, fnNames) {
    const source = prototype.constructor['name'];
    for (let i = 0; i < fnNames.length; i++) {
        const name = fnNames[i];
        const delegate = prototype[name];
        if (delegate) {
            const prototypeDesc = ObjectGetOwnPropertyDescriptor(prototype, name);
            if (!isPropertyWritable(prototypeDesc)) {
                continue;
            }
            prototype[name] = ((delegate) => {
                const patched = function () {
                    return delegate.apply(this, bindArguments(arguments, source + '.' + name));
                };
                attachOriginToPatched(patched, delegate);
                return patched;
            })(delegate);
        }
    }
}
function isPropertyWritable(propertyDesc) {
    if (!propertyDesc) {
        return true;
    }
    if (propertyDesc.writable === false) {
        return false;
    }
    return !(typeof propertyDesc.get === 'function' && typeof propertyDesc.set === 'undefined');
}
const isWebWorker = (typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope);
// Make sure to access `process` through `_global` so that WebPack does not accidentally browserify
// this code.
const isNode = (!('nw' in _global) && typeof _global.process !== 'undefined' &&
    {}.toString.call(_global.process) === '[object process]');
const isBrowser = !isNode && !isWebWorker && !!(isWindowExists && internalWindow['HTMLElement']);
// we are in electron of nw, so we are both browser and nodejs
// Make sure to access `process` through `_global` so that WebPack does not accidentally browserify
// this code.
const isMix = typeof _global.process !== 'undefined' &&
    {}.toString.call(_global.process) === '[object process]' && !isWebWorker &&
    !!(isWindowExists && internalWindow['HTMLElement']);
const zoneSymbolEventNames = {};
const wrapFn = function (event) {
    // https://github.com/angular/zone.js/issues/911, in IE, sometimes
    // event will be undefined, so we need to use window.event
    event = event || _global.event;
    if (!event) {
        return;
    }
    let eventNameSymbol = zoneSymbolEventNames[event.type];
    if (!eventNameSymbol) {
        eventNameSymbol = zoneSymbolEventNames[event.type] = zoneSymbol('ON_PROPERTY' + event.type);
    }
    const target = this || event.target || _global;
    const listener = target[eventNameSymbol];
    let result;
    if (isBrowser && target === internalWindow && event.type === 'error') {
        // window.onerror have different signiture
        // https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onerror#window.onerror
        // and onerror callback will prevent default when callback return true
        const errorEvent = event;
        result = listener &&
            listener.call(this, errorEvent.message, errorEvent.filename, errorEvent.lineno, errorEvent.colno, errorEvent.error);
        if (result === true) {
            event.preventDefault();
        }
    }
    else {
        result = listener && listener.apply(this, arguments);
        if (result != undefined && !result) {
            event.preventDefault();
        }
    }
    return result;
};
function patchProperty(obj, prop, prototype) {
    let desc = ObjectGetOwnPropertyDescriptor(obj, prop);
    if (!desc && prototype) {
        // when patch window object, use prototype to check prop exist or not
        const prototypeDesc = ObjectGetOwnPropertyDescriptor(prototype, prop);
        if (prototypeDesc) {
            desc = { enumerable: true, configurable: true };
        }
    }
    // if the descriptor not exists or is not configurable
    // just return
    if (!desc || !desc.configurable) {
        return;
    }
    const onPropPatchedSymbol = zoneSymbol('on' + prop + 'patched');
    if (obj.hasOwnProperty(onPropPatchedSymbol) && obj[onPropPatchedSymbol]) {
        return;
    }
    // A property descriptor cannot have getter/setter and be writable
    // deleting the writable and value properties avoids this error:
    //
    // TypeError: property descriptors must not specify a value or be writable when a
    // getter or setter has been specified
    delete desc.writable;
    delete desc.value;
    const originalDescGet = desc.get;
    const originalDescSet = desc.set;
    // substr(2) cuz 'onclick' -> 'click', etc
    const eventName = prop.substr(2);
    let eventNameSymbol = zoneSymbolEventNames[eventName];
    if (!eventNameSymbol) {
        eventNameSymbol = zoneSymbolEventNames[eventName] = zoneSymbol('ON_PROPERTY' + eventName);
    }
    desc.set = function (newValue) {
        // in some of windows's onproperty callback, this is undefined
        // so we need to check it
        let target = this;
        if (!target && obj === _global) {
            target = _global;
        }
        if (!target) {
            return;
        }
        let previousValue = target[eventNameSymbol];
        if (previousValue) {
            target.removeEventListener(eventName, wrapFn);
        }
        // issue #978, when onload handler was added before loading zone.js
        // we should remove it with originalDescSet
        if (originalDescSet) {
            originalDescSet.apply(target, NULL_ON_PROP_VALUE);
        }
        if (typeof newValue === 'function') {
            target[eventNameSymbol] = newValue;
            target.addEventListener(eventName, wrapFn, false);
        }
        else {
            target[eventNameSymbol] = null;
        }
    };
    // The getter would return undefined for unassigned properties but the default value of an
    // unassigned property is null
    desc.get = function () {
        // in some of windows's onproperty callback, this is undefined
        // so we need to check it
        let target = this;
        if (!target && obj === _global) {
            target = _global;
        }
        if (!target) {
            return null;
        }
        const listener = target[eventNameSymbol];
        if (listener) {
            return listener;
        }
        else if (originalDescGet) {
            // result will be null when use inline event attribute,
            // such as <button onclick="func();">OK</button>
            // because the onclick function is internal raw uncompiled handler
            // the onclick will be evaluated when first time event was triggered or
            // the property is accessed, https://github.com/angular/zone.js/issues/525
            // so we should use original native get to retrieve the handler
            let value = originalDescGet && originalDescGet.call(this);
            if (value) {
                desc.set.call(this, value);
                if (typeof target[REMOVE_ATTRIBUTE] === 'function') {
                    target.removeAttribute(prop);
                }
                return value;
            }
        }
        return null;
    };
    ObjectDefineProperty(obj, prop, desc);
    obj[onPropPatchedSymbol] = true;
}
function patchOnProperties(obj, properties, prototype) {
    if (properties) {
        for (let i = 0; i < properties.length; i++) {
            patchProperty(obj, 'on' + properties[i], prototype);
        }
    }
    else {
        const onProperties = [];
        for (const prop in obj) {
            if (prop.substr(0, 2) == 'on') {
                onProperties.push(prop);
            }
        }
        for (let j = 0; j < onProperties.length; j++) {
            patchProperty(obj, onProperties[j], prototype);
        }
    }
}
const originalInstanceKey = zoneSymbol('originalInstance');
// wrap some native API on `window`
function patchClass(className) {
    const OriginalClass = _global[className];
    if (!OriginalClass)
        return;
    // keep original class in global
    _global[zoneSymbol(className)] = OriginalClass;
    _global[className] = function () {
        const a = bindArguments(arguments, className);
        switch (a.length) {
            case 0:
                this[originalInstanceKey] = new OriginalClass();
                break;
            case 1:
                this[originalInstanceKey] = new OriginalClass(a[0]);
                break;
            case 2:
                this[originalInstanceKey] = new OriginalClass(a[0], a[1]);
                break;
            case 3:
                this[originalInstanceKey] = new OriginalClass(a[0], a[1], a[2]);
                break;
            case 4:
                this[originalInstanceKey] = new OriginalClass(a[0], a[1], a[2], a[3]);
                break;
            default:
                throw new Error('Arg list too long.');
        }
    };
    // attach original delegate to patched function
    attachOriginToPatched(_global[className], OriginalClass);
    const instance = new OriginalClass(function () { });
    let prop;
    for (prop in instance) {
        // https://bugs.webkit.org/show_bug.cgi?id=44721
        if (className === 'XMLHttpRequest' && prop === 'responseBlob')
            continue;
        (function (prop) {
            if (typeof instance[prop] === 'function') {
                _global[className].prototype[prop] = function () {
                    return this[originalInstanceKey][prop].apply(this[originalInstanceKey], arguments);
                };
            }
            else {
                ObjectDefineProperty(_global[className].prototype, prop, {
                    set: function (fn) {
                        if (typeof fn === 'function') {
                            this[originalInstanceKey][prop] = wrapWithCurrentZone(fn, className + '.' + prop);
                            // keep callback in wrapped function so we can
                            // use it in Function.prototype.toString to return
                            // the native one.
                            attachOriginToPatched(this[originalInstanceKey][prop], fn);
                        }
                        else {
                            this[originalInstanceKey][prop] = fn;
                        }
                    },
                    get: function () {
                        return this[originalInstanceKey][prop];
                    }
                });
            }
        }(prop));
    }
    for (prop in OriginalClass) {
        if (prop !== 'prototype' && OriginalClass.hasOwnProperty(prop)) {
            _global[className][prop] = OriginalClass[prop];
        }
    }
}
function patchMethod(target, name, patchFn) {
    let proto = target;
    while (proto && !proto.hasOwnProperty(name)) {
        proto = ObjectGetPrototypeOf(proto);
    }
    if (!proto && target[name]) {
        // somehow we did not find it, but we can see it. This happens on IE for Window properties.
        proto = target;
    }
    const delegateName = zoneSymbol(name);
    let delegate = null;
    if (proto && (!(delegate = proto[delegateName]) || !proto.hasOwnProperty(delegateName))) {
        delegate = proto[delegateName] = proto[name];
        // check whether proto[name] is writable
        // some property is readonly in safari, such as HtmlCanvasElement.prototype.toBlob
        const desc = proto && ObjectGetOwnPropertyDescriptor(proto, name);
        if (isPropertyWritable(desc)) {
            const patchDelegate = patchFn(delegate, delegateName, name);
            proto[name] = function () {
                return patchDelegate(this, arguments);
            };
            attachOriginToPatched(proto[name], delegate);
        }
    }
    return delegate;
}
// TODO: @JiaLiPassion, support cancel task later if necessary
function patchMacroTask(obj, funcName, metaCreator) {
    let setNative = null;
    function scheduleTask(task) {
        const data = task.data;
        data.args[data.cbIdx] = function () {
            task.invoke.apply(this, arguments);
        };
        setNative.apply(data.target, data.args);
        return task;
    }
    setNative = patchMethod(obj, funcName, (delegate) => function (self, args) {
        const meta = metaCreator(self, args);
        if (meta.cbIdx >= 0 && typeof args[meta.cbIdx] === 'function') {
            return scheduleMacroTaskWithCurrentZone(meta.name, args[meta.cbIdx], meta, scheduleTask);
        }
        else {
            // cause an error by calling it directly.
            return delegate.apply(self, args);
        }
    });
}
function attachOriginToPatched(patched, original) {
    patched[zoneSymbol('OriginalDelegate')] = original;
}
let isDetectedIEOrEdge = false;
let ieOrEdge = false;
function isIE() {
    try {
        const ua = internalWindow.navigator.userAgent;
        if (ua.indexOf('MSIE ') !== -1 || ua.indexOf('Trident/') !== -1) {
            return true;
        }
    }
    catch (error) {
    }
    return false;
}
function isIEOrEdge() {
    if (isDetectedIEOrEdge) {
        return ieOrEdge;
    }
    isDetectedIEOrEdge = true;
    try {
        const ua = internalWindow.navigator.userAgent;
        if (ua.indexOf('MSIE ') !== -1 || ua.indexOf('Trident/') !== -1 || ua.indexOf('Edge/') !== -1) {
            ieOrEdge = true;
        }
    }
    catch (error) {
    }
    return ieOrEdge;
}

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
Zone.__load_patch('ZoneAwarePromise', (global, Zone, api) => {
    const ObjectGetOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
    const ObjectDefineProperty = Object.defineProperty;
    function readableObjectToString(obj) {
        if (obj && obj.toString === Object.prototype.toString) {
            const className = obj.constructor && obj.constructor.name;
            return (className ? className : '') + ': ' + JSON.stringify(obj);
        }
        return obj ? obj.toString() : Object.prototype.toString.call(obj);
    }
    const __symbol__ = api.symbol;
    const _uncaughtPromiseErrors = [];
    const isDisableWrappingUncaughtPromiseRejection = global[__symbol__('DISABLE_WRAPPING_UNCAUGHT_PROMISE_REJECTION')] === true;
    const symbolPromise = __symbol__('Promise');
    const symbolThen = __symbol__('then');
    const creationTrace = '__creationTrace__';
    api.onUnhandledError = (e) => {
        if (api.showUncaughtError()) {
            const rejection = e && e.rejection;
            if (rejection) {
                console.error('Unhandled Promise rejection:', rejection instanceof Error ? rejection.message : rejection, '; Zone:', e.zone.name, '; Task:', e.task && e.task.source, '; Value:', rejection, rejection instanceof Error ? rejection.stack : undefined);
            }
            else {
                console.error(e);
            }
        }
    };
    api.microtaskDrainDone = () => {
        while (_uncaughtPromiseErrors.length) {
            const uncaughtPromiseError = _uncaughtPromiseErrors.shift();
            try {
                uncaughtPromiseError.zone.runGuarded(() => {
                    if (uncaughtPromiseError.throwOriginal) {
                        throw uncaughtPromiseError.rejection;
                    }
                    throw uncaughtPromiseError;
                });
            }
            catch (error) {
                handleUnhandledRejection(error);
            }
        }
    };
    const UNHANDLED_PROMISE_REJECTION_HANDLER_SYMBOL = __symbol__('unhandledPromiseRejectionHandler');
    function handleUnhandledRejection(e) {
        api.onUnhandledError(e);
        try {
            const handler = Zone[UNHANDLED_PROMISE_REJECTION_HANDLER_SYMBOL];
            if (typeof handler === 'function') {
                handler.call(this, e);
            }
        }
        catch (err) {
        }
    }
    function isThenable(value) {
        return value && value.then;
    }
    function forwardResolution(value) {
        return value;
    }
    function forwardRejection(rejection) {
        return ZoneAwarePromise.reject(rejection);
    }
    const symbolState = __symbol__('state');
    const symbolValue = __symbol__('value');
    const symbolFinally = __symbol__('finally');
    const symbolParentPromiseValue = __symbol__('parentPromiseValue');
    const symbolParentPromiseState = __symbol__('parentPromiseState');
    const source = 'Promise.then';
    const UNRESOLVED = null;
    const RESOLVED = true;
    const REJECTED = false;
    const REJECTED_NO_CATCH = 0;
    function makeResolver(promise, state) {
        return (v) => {
            try {
                resolvePromise(promise, state, v);
            }
            catch (err) {
                resolvePromise(promise, false, err);
            }
            // Do not return value or you will break the Promise spec.
        };
    }
    const once = function () {
        let wasCalled = false;
        return function wrapper(wrappedFunction) {
            return function () {
                if (wasCalled) {
                    return;
                }
                wasCalled = true;
                wrappedFunction.apply(null, arguments);
            };
        };
    };
    const TYPE_ERROR = 'Promise resolved with itself';
    const CURRENT_TASK_TRACE_SYMBOL = __symbol__('currentTaskTrace');
    // Promise Resolution
    function resolvePromise(promise, state, value) {
        const onceWrapper = once();
        if (promise === value) {
            throw new TypeError(TYPE_ERROR);
        }
        if (promise[symbolState] === UNRESOLVED) {
            // should only get value.then once based on promise spec.
            let then = null;
            try {
                if (typeof value === 'object' || typeof value === 'function') {
                    then = value && value.then;
                }
            }
            catch (err) {
                onceWrapper(() => {
                    resolvePromise(promise, false, err);
                })();
                return promise;
            }
            // if (value instanceof ZoneAwarePromise) {
            if (state !== REJECTED && value instanceof ZoneAwarePromise &&
                value.hasOwnProperty(symbolState) && value.hasOwnProperty(symbolValue) &&
                value[symbolState] !== UNRESOLVED) {
                clearRejectedNoCatch(value);
                resolvePromise(promise, value[symbolState], value[symbolValue]);
            }
            else if (state !== REJECTED && typeof then === 'function') {
                try {
                    then.call(value, onceWrapper(makeResolver(promise, state)), onceWrapper(makeResolver(promise, false)));
                }
                catch (err) {
                    onceWrapper(() => {
                        resolvePromise(promise, false, err);
                    })();
                }
            }
            else {
                promise[symbolState] = state;
                const queue = promise[symbolValue];
                promise[symbolValue] = value;
                if (promise[symbolFinally] === symbolFinally) {
                    // the promise is generated by Promise.prototype.finally
                    if (state === RESOLVED) {
                        // the state is resolved, should ignore the value
                        // and use parent promise value
                        promise[symbolState] = promise[symbolParentPromiseState];
                        promise[symbolValue] = promise[symbolParentPromiseValue];
                    }
                }
                // record task information in value when error occurs, so we can
                // do some additional work such as render longStackTrace
                if (state === REJECTED && value instanceof Error) {
                    // check if longStackTraceZone is here
                    const trace = Zone.currentTask && Zone.currentTask.data &&
                        Zone.currentTask.data[creationTrace];
                    if (trace) {
                        // only keep the long stack trace into error when in longStackTraceZone
                        ObjectDefineProperty(value, CURRENT_TASK_TRACE_SYMBOL, { configurable: true, enumerable: false, writable: true, value: trace });
                    }
                }
                for (let i = 0; i < queue.length;) {
                    scheduleResolveOrReject(promise, queue[i++], queue[i++], queue[i++], queue[i++]);
                }
                if (queue.length == 0 && state == REJECTED) {
                    promise[symbolState] = REJECTED_NO_CATCH;
                    let uncaughtPromiseError = value;
                    try {
                        // Here we throws a new Error to print more readable error log
                        // and if the value is not an error, zone.js builds an `Error`
                        // Object here to attach the stack information.
                        throw new Error('Uncaught (in promise): ' + readableObjectToString(value) +
                            (value && value.stack ? '\n' + value.stack : ''));
                    }
                    catch (err) {
                        uncaughtPromiseError = err;
                    }
                    if (isDisableWrappingUncaughtPromiseRejection) {
                        // If disable wrapping uncaught promise reject
                        // use the value instead of wrapping it.
                        uncaughtPromiseError.throwOriginal = true;
                    }
                    uncaughtPromiseError.rejection = value;
                    uncaughtPromiseError.promise = promise;
                    uncaughtPromiseError.zone = Zone.current;
                    uncaughtPromiseError.task = Zone.currentTask;
                    _uncaughtPromiseErrors.push(uncaughtPromiseError);
                    api.scheduleMicroTask(); // to make sure that it is running
                }
            }
        }
        // Resolving an already resolved promise is a noop.
        return promise;
    }
    const REJECTION_HANDLED_HANDLER = __symbol__('rejectionHandledHandler');
    function clearRejectedNoCatch(promise) {
        if (promise[symbolState] === REJECTED_NO_CATCH) {
            // if the promise is rejected no catch status
            // and queue.length > 0, means there is a error handler
            // here to handle the rejected promise, we should trigger
            // windows.rejectionhandled eventHandler or nodejs rejectionHandled
            // eventHandler
            try {
                const handler = Zone[REJECTION_HANDLED_HANDLER];
                if (handler && typeof handler === 'function') {
                    handler.call(this, { rejection: promise[symbolValue], promise: promise });
                }
            }
            catch (err) {
            }
            promise[symbolState] = REJECTED;
            for (let i = 0; i < _uncaughtPromiseErrors.length; i++) {
                if (promise === _uncaughtPromiseErrors[i].promise) {
                    _uncaughtPromiseErrors.splice(i, 1);
                }
            }
        }
    }
    function scheduleResolveOrReject(promise, zone, chainPromise, onFulfilled, onRejected) {
        clearRejectedNoCatch(promise);
        const promiseState = promise[symbolState];
        const delegate = promiseState ?
            (typeof onFulfilled === 'function') ? onFulfilled : forwardResolution :
            (typeof onRejected === 'function') ? onRejected : forwardRejection;
        zone.scheduleMicroTask(source, () => {
            try {
                const parentPromiseValue = promise[symbolValue];
                const isFinallyPromise = !!chainPromise && symbolFinally === chainPromise[symbolFinally];
                if (isFinallyPromise) {
                    // if the promise is generated from finally call, keep parent promise's state and value
                    chainPromise[symbolParentPromiseValue] = parentPromiseValue;
                    chainPromise[symbolParentPromiseState] = promiseState;
                }
                // should not pass value to finally callback
                const value = zone.run(delegate, undefined, isFinallyPromise && delegate !== forwardRejection && delegate !== forwardResolution ?
                    [] :
                    [parentPromiseValue]);
                resolvePromise(chainPromise, true, value);
            }
            catch (error) {
                // if error occurs, should always return this error
                resolvePromise(chainPromise, false, error);
            }
        }, chainPromise);
    }
    const ZONE_AWARE_PROMISE_TO_STRING = 'function ZoneAwarePromise() { [native code] }';
    const noop = function () { };
    class ZoneAwarePromise {
        static toString() {
            return ZONE_AWARE_PROMISE_TO_STRING;
        }
        static resolve(value) {
            return resolvePromise(new this(null), RESOLVED, value);
        }
        static reject(error) {
            return resolvePromise(new this(null), REJECTED, error);
        }
        static race(values) {
            let resolve;
            let reject;
            let promise = new this((res, rej) => {
                resolve = res;
                reject = rej;
            });
            function onResolve(value) {
                resolve(value);
            }
            function onReject(error) {
                reject(error);
            }
            for (let value of values) {
                if (!isThenable(value)) {
                    value = this.resolve(value);
                }
                value.then(onResolve, onReject);
            }
            return promise;
        }
        static all(values) {
            return ZoneAwarePromise.allWithCallback(values);
        }
        static allSettled(values) {
            const P = this && this.prototype instanceof ZoneAwarePromise ? this : ZoneAwarePromise;
            return P.allWithCallback(values, {
                thenCallback: (value) => ({ status: 'fulfilled', value }),
                errorCallback: (err) => ({ status: 'rejected', reason: err })
            });
        }
        static allWithCallback(values, callback) {
            let resolve;
            let reject;
            let promise = new this((res, rej) => {
                resolve = res;
                reject = rej;
            });
            // Start at 2 to prevent prematurely resolving if .then is called immediately.
            let unresolvedCount = 2;
            let valueIndex = 0;
            const resolvedValues = [];
            for (let value of values) {
                if (!isThenable(value)) {
                    value = this.resolve(value);
                }
                const curValueIndex = valueIndex;
                try {
                    value.then((value) => {
                        resolvedValues[curValueIndex] = callback ? callback.thenCallback(value) : value;
                        unresolvedCount--;
                        if (unresolvedCount === 0) {
                            resolve(resolvedValues);
                        }
                    }, (err) => {
                        if (!callback) {
                            reject(err);
                        }
                        else {
                            resolvedValues[curValueIndex] = callback.errorCallback(err);
                            unresolvedCount--;
                            if (unresolvedCount === 0) {
                                resolve(resolvedValues);
                            }
                        }
                    });
                }
                catch (thenErr) {
                    reject(thenErr);
                }
                unresolvedCount++;
                valueIndex++;
            }
            // Make the unresolvedCount zero-based again.
            unresolvedCount -= 2;
            if (unresolvedCount === 0) {
                resolve(resolvedValues);
            }
            return promise;
        }
        constructor(executor) {
            const promise = this;
            if (!(promise instanceof ZoneAwarePromise)) {
                throw new Error('Must be an instanceof Promise.');
            }
            promise[symbolState] = UNRESOLVED;
            promise[symbolValue] = []; // queue;
            try {
                executor && executor(makeResolver(promise, RESOLVED), makeResolver(promise, REJECTED));
            }
            catch (error) {
                resolvePromise(promise, false, error);
            }
        }
        get [Symbol.toStringTag]() {
            return 'Promise';
        }
        get [Symbol.species]() {
            return ZoneAwarePromise;
        }
        then(onFulfilled, onRejected) {
            let C = this.constructor[Symbol.species];
            if (!C || typeof C !== 'function') {
                C = this.constructor || ZoneAwarePromise;
            }
            const chainPromise = new C(noop);
            const zone = Zone.current;
            if (this[symbolState] == UNRESOLVED) {
                this[symbolValue].push(zone, chainPromise, onFulfilled, onRejected);
            }
            else {
                scheduleResolveOrReject(this, zone, chainPromise, onFulfilled, onRejected);
            }
            return chainPromise;
        }
        catch(onRejected) {
            return this.then(null, onRejected);
        }
        finally(onFinally) {
            let C = this.constructor[Symbol.species];
            if (!C || typeof C !== 'function') {
                C = ZoneAwarePromise;
            }
            const chainPromise = new C(noop);
            chainPromise[symbolFinally] = symbolFinally;
            const zone = Zone.current;
            if (this[symbolState] == UNRESOLVED) {
                this[symbolValue].push(zone, chainPromise, onFinally, onFinally);
            }
            else {
                scheduleResolveOrReject(this, zone, chainPromise, onFinally, onFinally);
            }
            return chainPromise;
        }
    }
    // Protect against aggressive optimizers dropping seemingly unused properties.
    // E.g. Closure Compiler in advanced mode.
    ZoneAwarePromise['resolve'] = ZoneAwarePromise.resolve;
    ZoneAwarePromise['reject'] = ZoneAwarePromise.reject;
    ZoneAwarePromise['race'] = ZoneAwarePromise.race;
    ZoneAwarePromise['all'] = ZoneAwarePromise.all;
    const NativePromise = global[symbolPromise] = global['Promise'];
    global['Promise'] = ZoneAwarePromise;
    const symbolThenPatched = __symbol__('thenPatched');
    function patchThen(Ctor) {
        const proto = Ctor.prototype;
        const prop = ObjectGetOwnPropertyDescriptor(proto, 'then');
        if (prop && (prop.writable === false || !prop.configurable)) {
            // check Ctor.prototype.then propertyDescriptor is writable or not
            // in meteor env, writable is false, we should ignore such case
            return;
        }
        const originalThen = proto.then;
        // Keep a reference to the original method.
        proto[symbolThen] = originalThen;
        Ctor.prototype.then = function (onResolve, onReject) {
            const wrapped = new ZoneAwarePromise((resolve, reject) => {
                originalThen.call(this, resolve, reject);
            });
            return wrapped.then(onResolve, onReject);
        };
        Ctor[symbolThenPatched] = true;
    }
    api.patchThen = patchThen;
    function zoneify(fn) {
        return function (self, args) {
            let resultPromise = fn.apply(self, args);
            if (resultPromise instanceof ZoneAwarePromise) {
                return resultPromise;
            }
            let ctor = resultPromise.constructor;
            if (!ctor[symbolThenPatched]) {
                patchThen(ctor);
            }
            return resultPromise;
        };
    }
    if (NativePromise) {
        patchThen(NativePromise);
        patchMethod(global, 'fetch', delegate => zoneify(delegate));
    }
    // This is not part of public API, but it is useful for tests, so we expose it.
    Promise[Zone.__symbol__('uncaughtPromiseErrors')] = _uncaughtPromiseErrors;
    return ZoneAwarePromise;
});

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
// override Function.prototype.toString to make zone.js patched function
// look like native function
Zone.__load_patch('toString', (global) => {
    // patch Func.prototype.toString to let them look like native
    const originalFunctionToString = Function.prototype.toString;
    const ORIGINAL_DELEGATE_SYMBOL = zoneSymbol('OriginalDelegate');
    const PROMISE_SYMBOL = zoneSymbol('Promise');
    const ERROR_SYMBOL = zoneSymbol('Error');
    const newFunctionToString = function toString() {
        if (typeof this === 'function') {
            const originalDelegate = this[ORIGINAL_DELEGATE_SYMBOL];
            if (originalDelegate) {
                if (typeof originalDelegate === 'function') {
                    return originalFunctionToString.call(originalDelegate);
                }
                else {
                    return Object.prototype.toString.call(originalDelegate);
                }
            }
            if (this === Promise) {
                const nativePromise = global[PROMISE_SYMBOL];
                if (nativePromise) {
                    return originalFunctionToString.call(nativePromise);
                }
            }
            if (this === Error) {
                const nativeError = global[ERROR_SYMBOL];
                if (nativeError) {
                    return originalFunctionToString.call(nativeError);
                }
            }
        }
        return originalFunctionToString.call(this);
    };
    newFunctionToString[ORIGINAL_DELEGATE_SYMBOL] = originalFunctionToString;
    Function.prototype.toString = newFunctionToString;
    // patch Object.prototype.toString to let them look like native
    const originalObjectToString = Object.prototype.toString;
    const PROMISE_OBJECT_TO_STRING = '[object Promise]';
    Object.prototype.toString = function () {
        if (typeof Promise === 'function' && this instanceof Promise) {
            return PROMISE_OBJECT_TO_STRING;
        }
        return originalObjectToString.call(this);
    };
});

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
let passiveSupported = false;
if (typeof window !== 'undefined') {
    try {
        const options = Object.defineProperty({}, 'passive', {
            get: function () {
                passiveSupported = true;
            }
        });
        window.addEventListener('test', options, options);
        window.removeEventListener('test', options, options);
    }
    catch (err) {
        passiveSupported = false;
    }
}
// an identifier to tell ZoneTask do not create a new invoke closure
const OPTIMIZED_ZONE_EVENT_TASK_DATA = {
    useG: true
};
const zoneSymbolEventNames$1 = {};
const globalSources = {};
const EVENT_NAME_SYMBOL_REGX = new RegExp('^' + ZONE_SYMBOL_PREFIX + '(\\w+)(true|false)$');
const IMMEDIATE_PROPAGATION_SYMBOL = zoneSymbol('propagationStopped');
function prepareEventNames(eventName, eventNameToString) {
    const falseEventName = (eventNameToString ? eventNameToString(eventName) : eventName) + FALSE_STR;
    const trueEventName = (eventNameToString ? eventNameToString(eventName) : eventName) + TRUE_STR;
    const symbol = ZONE_SYMBOL_PREFIX + falseEventName;
    const symbolCapture = ZONE_SYMBOL_PREFIX + trueEventName;
    zoneSymbolEventNames$1[eventName] = {};
    zoneSymbolEventNames$1[eventName][FALSE_STR] = symbol;
    zoneSymbolEventNames$1[eventName][TRUE_STR] = symbolCapture;
}
function patchEventTarget(_global, apis, patchOptions) {
    const ADD_EVENT_LISTENER = (patchOptions && patchOptions.add) || ADD_EVENT_LISTENER_STR;
    const REMOVE_EVENT_LISTENER = (patchOptions && patchOptions.rm) || REMOVE_EVENT_LISTENER_STR;
    const LISTENERS_EVENT_LISTENER = (patchOptions && patchOptions.listeners) || 'eventListeners';
    const REMOVE_ALL_LISTENERS_EVENT_LISTENER = (patchOptions && patchOptions.rmAll) || 'removeAllListeners';
    const zoneSymbolAddEventListener = zoneSymbol(ADD_EVENT_LISTENER);
    const ADD_EVENT_LISTENER_SOURCE = '.' + ADD_EVENT_LISTENER + ':';
    const PREPEND_EVENT_LISTENER = 'prependListener';
    const PREPEND_EVENT_LISTENER_SOURCE = '.' + PREPEND_EVENT_LISTENER + ':';
    const invokeTask = function (task, target, event) {
        // for better performance, check isRemoved which is set
        // by removeEventListener
        if (task.isRemoved) {
            return;
        }
        const delegate = task.callback;
        if (typeof delegate === 'object' && delegate.handleEvent) {
            // create the bind version of handleEvent when invoke
            task.callback = (event) => delegate.handleEvent(event);
            task.originalDelegate = delegate;
        }
        // invoke static task.invoke
        task.invoke(task, target, [event]);
        const options = task.options;
        if (options && typeof options === 'object' && options.once) {
            // if options.once is true, after invoke once remove listener here
            // only browser need to do this, nodejs eventEmitter will cal removeListener
            // inside EventEmitter.once
            const delegate = task.originalDelegate ? task.originalDelegate : task.callback;
            target[REMOVE_EVENT_LISTENER].call(target, event.type, delegate, options);
        }
    };
    // global shared zoneAwareCallback to handle all event callback with capture = false
    const globalZoneAwareCallback = function (event) {
        // https://github.com/angular/zone.js/issues/911, in IE, sometimes
        // event will be undefined, so we need to use window.event
        event = event || _global.event;
        if (!event) {
            return;
        }
        // event.target is needed for Samsung TV and SourceBuffer
        // || global is needed https://github.com/angular/zone.js/issues/190
        const target = this || event.target || _global;
        const tasks = target[zoneSymbolEventNames$1[event.type][FALSE_STR]];
        if (tasks) {
            // invoke all tasks which attached to current target with given event.type and capture = false
            // for performance concern, if task.length === 1, just invoke
            if (tasks.length === 1) {
                invokeTask(tasks[0], target, event);
            }
            else {
                // https://github.com/angular/zone.js/issues/836
                // copy the tasks array before invoke, to avoid
                // the callback will remove itself or other listener
                const copyTasks = tasks.slice();
                for (let i = 0; i < copyTasks.length; i++) {
                    if (event && event[IMMEDIATE_PROPAGATION_SYMBOL] === true) {
                        break;
                    }
                    invokeTask(copyTasks[i], target, event);
                }
            }
        }
    };
    // global shared zoneAwareCallback to handle all event callback with capture = true
    const globalZoneAwareCaptureCallback = function (event) {
        // https://github.com/angular/zone.js/issues/911, in IE, sometimes
        // event will be undefined, so we need to use window.event
        event = event || _global.event;
        if (!event) {
            return;
        }
        // event.target is needed for Samsung TV and SourceBuffer
        // || global is needed https://github.com/angular/zone.js/issues/190
        const target = this || event.target || _global;
        const tasks = target[zoneSymbolEventNames$1[event.type][TRUE_STR]];
        if (tasks) {
            // invoke all tasks which attached to current target with given event.type and capture = false
            // for performance concern, if task.length === 1, just invoke
            if (tasks.length === 1) {
                invokeTask(tasks[0], target, event);
            }
            else {
                // https://github.com/angular/zone.js/issues/836
                // copy the tasks array before invoke, to avoid
                // the callback will remove itself or other listener
                const copyTasks = tasks.slice();
                for (let i = 0; i < copyTasks.length; i++) {
                    if (event && event[IMMEDIATE_PROPAGATION_SYMBOL] === true) {
                        break;
                    }
                    invokeTask(copyTasks[i], target, event);
                }
            }
        }
    };
    function patchEventTargetMethods(obj, patchOptions) {
        if (!obj) {
            return false;
        }
        let useGlobalCallback = true;
        if (patchOptions && patchOptions.useG !== undefined) {
            useGlobalCallback = patchOptions.useG;
        }
        const validateHandler = patchOptions && patchOptions.vh;
        let checkDuplicate = true;
        if (patchOptions && patchOptions.chkDup !== undefined) {
            checkDuplicate = patchOptions.chkDup;
        }
        let returnTarget = false;
        if (patchOptions && patchOptions.rt !== undefined) {
            returnTarget = patchOptions.rt;
        }
        let proto = obj;
        while (proto && !proto.hasOwnProperty(ADD_EVENT_LISTENER)) {
            proto = ObjectGetPrototypeOf(proto);
        }
        if (!proto && obj[ADD_EVENT_LISTENER]) {
            // somehow we did not find it, but we can see it. This happens on IE for Window properties.
            proto = obj;
        }
        if (!proto) {
            return false;
        }
        if (proto[zoneSymbolAddEventListener]) {
            return false;
        }
        const eventNameToString = patchOptions && patchOptions.eventNameToString;
        // a shared global taskData to pass data for scheduleEventTask
        // so we do not need to create a new object just for pass some data
        const taskData = {};
        const nativeAddEventListener = proto[zoneSymbolAddEventListener] = proto[ADD_EVENT_LISTENER];
        const nativeRemoveEventListener = proto[zoneSymbol(REMOVE_EVENT_LISTENER)] =
            proto[REMOVE_EVENT_LISTENER];
        const nativeListeners = proto[zoneSymbol(LISTENERS_EVENT_LISTENER)] =
            proto[LISTENERS_EVENT_LISTENER];
        const nativeRemoveAllListeners = proto[zoneSymbol(REMOVE_ALL_LISTENERS_EVENT_LISTENER)] =
            proto[REMOVE_ALL_LISTENERS_EVENT_LISTENER];
        let nativePrependEventListener;
        if (patchOptions && patchOptions.prepend) {
            nativePrependEventListener = proto[zoneSymbol(patchOptions.prepend)] =
                proto[patchOptions.prepend];
        }
        /**
         * This util function will build an option object with passive option
         * to handle all possible input from the user.
         */
        function buildEventListenerOptions(options, passive) {
            if (!passiveSupported && typeof options === 'object' && options) {
                // doesn't support passive but user want to pass an object as options.
                // this will not work on some old browser, so we just pass a boolean
                // as useCapture parameter
                return !!options.capture;
            }
            if (!passiveSupported || !passive) {
                return options;
            }
            if (typeof options === 'boolean') {
                return { capture: options, passive: true };
            }
            if (!options) {
                return { passive: true };
            }
            if (typeof options === 'object' && options.passive !== false) {
                return Object.assign(Object.assign({}, options), { passive: true });
            }
            return options;
        }
        const customScheduleGlobal = function (task) {
            // if there is already a task for the eventName + capture,
            // just return, because we use the shared globalZoneAwareCallback here.
            if (taskData.isExisting) {
                return;
            }
            return nativeAddEventListener.call(taskData.target, taskData.eventName, taskData.capture ? globalZoneAwareCaptureCallback : globalZoneAwareCallback, taskData.options);
        };
        const customCancelGlobal = function (task) {
            // if task is not marked as isRemoved, this call is directly
            // from Zone.prototype.cancelTask, we should remove the task
            // from tasksList of target first
            if (!task.isRemoved) {
                const symbolEventNames = zoneSymbolEventNames$1[task.eventName];
                let symbolEventName;
                if (symbolEventNames) {
                    symbolEventName = symbolEventNames[task.capture ? TRUE_STR : FALSE_STR];
                }
                const existingTasks = symbolEventName && task.target[symbolEventName];
                if (existingTasks) {
                    for (let i = 0; i < existingTasks.length; i++) {
                        const existingTask = existingTasks[i];
                        if (existingTask === task) {
                            existingTasks.splice(i, 1);
                            // set isRemoved to data for faster invokeTask check
                            task.isRemoved = true;
                            if (existingTasks.length === 0) {
                                // all tasks for the eventName + capture have gone,
                                // remove globalZoneAwareCallback and remove the task cache from target
                                task.allRemoved = true;
                                task.target[symbolEventName] = null;
                            }
                            break;
                        }
                    }
                }
            }
            // if all tasks for the eventName + capture have gone,
            // we will really remove the global event callback,
            // if not, return
            if (!task.allRemoved) {
                return;
            }
            return nativeRemoveEventListener.call(task.target, task.eventName, task.capture ? globalZoneAwareCaptureCallback : globalZoneAwareCallback, task.options);
        };
        const customScheduleNonGlobal = function (task) {
            return nativeAddEventListener.call(taskData.target, taskData.eventName, task.invoke, taskData.options);
        };
        const customSchedulePrepend = function (task) {
            return nativePrependEventListener.call(taskData.target, taskData.eventName, task.invoke, taskData.options);
        };
        const customCancelNonGlobal = function (task) {
            return nativeRemoveEventListener.call(task.target, task.eventName, task.invoke, task.options);
        };
        const customSchedule = useGlobalCallback ? customScheduleGlobal : customScheduleNonGlobal;
        const customCancel = useGlobalCallback ? customCancelGlobal : customCancelNonGlobal;
        const compareTaskCallbackVsDelegate = function (task, delegate) {
            const typeOfDelegate = typeof delegate;
            return (typeOfDelegate === 'function' && task.callback === delegate) ||
                (typeOfDelegate === 'object' && task.originalDelegate === delegate);
        };
        const compare = (patchOptions && patchOptions.diff) ? patchOptions.diff : compareTaskCallbackVsDelegate;
        const unpatchedEvents = Zone[zoneSymbol('UNPATCHED_EVENTS')];
        const passiveEvents = _global[zoneSymbol('PASSIVE_EVENTS')];
        const makeAddListener = function (nativeListener, addSource, customScheduleFn, customCancelFn, returnTarget = false, prepend = false) {
            return function () {
                const target = this || _global;
                let eventName = arguments[0];
                if (patchOptions && patchOptions.transferEventName) {
                    eventName = patchOptions.transferEventName(eventName);
                }
                let delegate = arguments[1];
                if (!delegate) {
                    return nativeListener.apply(this, arguments);
                }
                if (isNode && eventName === 'uncaughtException') {
                    // don't patch uncaughtException of nodejs to prevent endless loop
                    return nativeListener.apply(this, arguments);
                }
                // don't create the bind delegate function for handleEvent
                // case here to improve addEventListener performance
                // we will create the bind delegate when invoke
                let isHandleEvent = false;
                if (typeof delegate !== 'function') {
                    if (!delegate.handleEvent) {
                        return nativeListener.apply(this, arguments);
                    }
                    isHandleEvent = true;
                }
                if (validateHandler && !validateHandler(nativeListener, delegate, target, arguments)) {
                    return;
                }
                const passive = passiveSupported && !!passiveEvents && passiveEvents.indexOf(eventName) !== -1;
                const options = buildEventListenerOptions(arguments[2], passive);
                if (unpatchedEvents) {
                    // check upatched list
                    for (let i = 0; i < unpatchedEvents.length; i++) {
                        if (eventName === unpatchedEvents[i]) {
                            if (passive) {
                                return nativeListener.call(target, eventName, delegate, options);
                            }
                            else {
                                return nativeListener.apply(this, arguments);
                            }
                        }
                    }
                }
                const capture = !options ? false : typeof options === 'boolean' ? true : options.capture;
                const once = options && typeof options === 'object' ? options.once : false;
                const zone = Zone.current;
                let symbolEventNames = zoneSymbolEventNames$1[eventName];
                if (!symbolEventNames) {
                    prepareEventNames(eventName, eventNameToString);
                    symbolEventNames = zoneSymbolEventNames$1[eventName];
                }
                const symbolEventName = symbolEventNames[capture ? TRUE_STR : FALSE_STR];
                let existingTasks = target[symbolEventName];
                let isExisting = false;
                if (existingTasks) {
                    // already have task registered
                    isExisting = true;
                    if (checkDuplicate) {
                        for (let i = 0; i < existingTasks.length; i++) {
                            if (compare(existingTasks[i], delegate)) {
                                // same callback, same capture, same event name, just return
                                return;
                            }
                        }
                    }
                }
                else {
                    existingTasks = target[symbolEventName] = [];
                }
                let source;
                const constructorName = target.constructor['name'];
                const targetSource = globalSources[constructorName];
                if (targetSource) {
                    source = targetSource[eventName];
                }
                if (!source) {
                    source = constructorName + addSource +
                        (eventNameToString ? eventNameToString(eventName) : eventName);
                }
                // do not create a new object as task.data to pass those things
                // just use the global shared one
                taskData.options = options;
                if (once) {
                    // if addEventListener with once options, we don't pass it to
                    // native addEventListener, instead we keep the once setting
                    // and handle ourselves.
                    taskData.options.once = false;
                }
                taskData.target = target;
                taskData.capture = capture;
                taskData.eventName = eventName;
                taskData.isExisting = isExisting;
                const data = useGlobalCallback ? OPTIMIZED_ZONE_EVENT_TASK_DATA : undefined;
                // keep taskData into data to allow onScheduleEventTask to access the task information
                if (data) {
                    data.taskData = taskData;
                }
                const task = zone.scheduleEventTask(source, delegate, data, customScheduleFn, customCancelFn);
                // should clear taskData.target to avoid memory leak
                // issue, https://github.com/angular/angular/issues/20442
                taskData.target = null;
                // need to clear up taskData because it is a global object
                if (data) {
                    data.taskData = null;
                }
                // have to save those information to task in case
                // application may call task.zone.cancelTask() directly
                if (once) {
                    options.once = true;
                }
                if (!(!passiveSupported && typeof task.options === 'boolean')) {
                    // if not support passive, and we pass an option object
                    // to addEventListener, we should save the options to task
                    task.options = options;
                }
                task.target = target;
                task.capture = capture;
                task.eventName = eventName;
                if (isHandleEvent) {
                    // save original delegate for compare to check duplicate
                    task.originalDelegate = delegate;
                }
                if (!prepend) {
                    existingTasks.push(task);
                }
                else {
                    existingTasks.unshift(task);
                }
                if (returnTarget) {
                    return target;
                }
            };
        };
        proto[ADD_EVENT_LISTENER] = makeAddListener(nativeAddEventListener, ADD_EVENT_LISTENER_SOURCE, customSchedule, customCancel, returnTarget);
        if (nativePrependEventListener) {
            proto[PREPEND_EVENT_LISTENER] = makeAddListener(nativePrependEventListener, PREPEND_EVENT_LISTENER_SOURCE, customSchedulePrepend, customCancel, returnTarget, true);
        }
        proto[REMOVE_EVENT_LISTENER] = function () {
            const target = this || _global;
            let eventName = arguments[0];
            if (patchOptions && patchOptions.transferEventName) {
                eventName = patchOptions.transferEventName(eventName);
            }
            const options = arguments[2];
            const capture = !options ? false : typeof options === 'boolean' ? true : options.capture;
            const delegate = arguments[1];
            if (!delegate) {
                return nativeRemoveEventListener.apply(this, arguments);
            }
            if (validateHandler &&
                !validateHandler(nativeRemoveEventListener, delegate, target, arguments)) {
                return;
            }
            const symbolEventNames = zoneSymbolEventNames$1[eventName];
            let symbolEventName;
            if (symbolEventNames) {
                symbolEventName = symbolEventNames[capture ? TRUE_STR : FALSE_STR];
            }
            const existingTasks = symbolEventName && target[symbolEventName];
            if (existingTasks) {
                for (let i = 0; i < existingTasks.length; i++) {
                    const existingTask = existingTasks[i];
                    if (compare(existingTask, delegate)) {
                        existingTasks.splice(i, 1);
                        // set isRemoved to data for faster invokeTask check
                        existingTask.isRemoved = true;
                        if (existingTasks.length === 0) {
                            // all tasks for the eventName + capture have gone,
                            // remove globalZoneAwareCallback and remove the task cache from target
                            existingTask.allRemoved = true;
                            target[symbolEventName] = null;
                            // in the target, we have an event listener which is added by on_property
                            // such as target.onclick = function() {}, so we need to clear this internal
                            // property too if all delegates all removed
                            if (typeof eventName === 'string') {
                                const onPropertySymbol = ZONE_SYMBOL_PREFIX + 'ON_PROPERTY' + eventName;
                                target[onPropertySymbol] = null;
                            }
                        }
                        existingTask.zone.cancelTask(existingTask);
                        if (returnTarget) {
                            return target;
                        }
                        return;
                    }
                }
            }
            // issue 930, didn't find the event name or callback
            // from zone kept existingTasks, the callback maybe
            // added outside of zone, we need to call native removeEventListener
            // to try to remove it.
            return nativeRemoveEventListener.apply(this, arguments);
        };
        proto[LISTENERS_EVENT_LISTENER] = function () {
            const target = this || _global;
            let eventName = arguments[0];
            if (patchOptions && patchOptions.transferEventName) {
                eventName = patchOptions.transferEventName(eventName);
            }
            const listeners = [];
            const tasks = findEventTasks(target, eventNameToString ? eventNameToString(eventName) : eventName);
            for (let i = 0; i < tasks.length; i++) {
                const task = tasks[i];
                let delegate = task.originalDelegate ? task.originalDelegate : task.callback;
                listeners.push(delegate);
            }
            return listeners;
        };
        proto[REMOVE_ALL_LISTENERS_EVENT_LISTENER] = function () {
            const target = this || _global;
            let eventName = arguments[0];
            if (!eventName) {
                const keys = Object.keys(target);
                for (let i = 0; i < keys.length; i++) {
                    const prop = keys[i];
                    const match = EVENT_NAME_SYMBOL_REGX.exec(prop);
                    let evtName = match && match[1];
                    // in nodejs EventEmitter, removeListener event is
                    // used for monitoring the removeListener call,
                    // so just keep removeListener eventListener until
                    // all other eventListeners are removed
                    if (evtName && evtName !== 'removeListener') {
                        this[REMOVE_ALL_LISTENERS_EVENT_LISTENER].call(this, evtName);
                    }
                }
                // remove removeListener listener finally
                this[REMOVE_ALL_LISTENERS_EVENT_LISTENER].call(this, 'removeListener');
            }
            else {
                if (patchOptions && patchOptions.transferEventName) {
                    eventName = patchOptions.transferEventName(eventName);
                }
                const symbolEventNames = zoneSymbolEventNames$1[eventName];
                if (symbolEventNames) {
                    const symbolEventName = symbolEventNames[FALSE_STR];
                    const symbolCaptureEventName = symbolEventNames[TRUE_STR];
                    const tasks = target[symbolEventName];
                    const captureTasks = target[symbolCaptureEventName];
                    if (tasks) {
                        const removeTasks = tasks.slice();
                        for (let i = 0; i < removeTasks.length; i++) {
                            const task = removeTasks[i];
                            let delegate = task.originalDelegate ? task.originalDelegate : task.callback;
                            this[REMOVE_EVENT_LISTENER].call(this, eventName, delegate, task.options);
                        }
                    }
                    if (captureTasks) {
                        const removeTasks = captureTasks.slice();
                        for (let i = 0; i < removeTasks.length; i++) {
                            const task = removeTasks[i];
                            let delegate = task.originalDelegate ? task.originalDelegate : task.callback;
                            this[REMOVE_EVENT_LISTENER].call(this, eventName, delegate, task.options);
                        }
                    }
                }
            }
            if (returnTarget) {
                return this;
            }
        };
        // for native toString patch
        attachOriginToPatched(proto[ADD_EVENT_LISTENER], nativeAddEventListener);
        attachOriginToPatched(proto[REMOVE_EVENT_LISTENER], nativeRemoveEventListener);
        if (nativeRemoveAllListeners) {
            attachOriginToPatched(proto[REMOVE_ALL_LISTENERS_EVENT_LISTENER], nativeRemoveAllListeners);
        }
        if (nativeListeners) {
            attachOriginToPatched(proto[LISTENERS_EVENT_LISTENER], nativeListeners);
        }
        return true;
    }
    let results = [];
    for (let i = 0; i < apis.length; i++) {
        results[i] = patchEventTargetMethods(apis[i], patchOptions);
    }
    return results;
}
function findEventTasks(target, eventName) {
    if (!eventName) {
        const foundTasks = [];
        for (let prop in target) {
            const match = EVENT_NAME_SYMBOL_REGX.exec(prop);
            let evtName = match && match[1];
            if (evtName && (!eventName || evtName === eventName)) {
                const tasks = target[prop];
                if (tasks) {
                    for (let i = 0; i < tasks.length; i++) {
                        foundTasks.push(tasks[i]);
                    }
                }
            }
        }
        return foundTasks;
    }
    let symbolEventName = zoneSymbolEventNames$1[eventName];
    if (!symbolEventName) {
        prepareEventNames(eventName);
        symbolEventName = zoneSymbolEventNames$1[eventName];
    }
    const captureFalseTasks = target[symbolEventName[FALSE_STR]];
    const captureTrueTasks = target[symbolEventName[TRUE_STR]];
    if (!captureFalseTasks) {
        return captureTrueTasks ? captureTrueTasks.slice() : [];
    }
    else {
        return captureTrueTasks ? captureFalseTasks.concat(captureTrueTasks) :
            captureFalseTasks.slice();
    }
}
function patchEventPrototype(global, api) {
    const Event = global['Event'];
    if (Event && Event.prototype) {
        api.patchMethod(Event.prototype, 'stopImmediatePropagation', (delegate) => function (self, args) {
            self[IMMEDIATE_PROPAGATION_SYMBOL] = true;
            // we need to call the native stopImmediatePropagation
            // in case in some hybrid application, some part of
            // application will be controlled by zone, some are not
            delegate && delegate.apply(self, args);
        });
    }
}

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
function patchCallbacks(api, target, targetName, method, callbacks) {
    const symbol = Zone.__symbol__(method);
    if (target[symbol]) {
        return;
    }
    const nativeDelegate = target[symbol] = target[method];
    target[method] = function (name, opts, options) {
        if (opts && opts.prototype) {
            callbacks.forEach(function (callback) {
                const source = `${targetName}.${method}::` + callback;
                const prototype = opts.prototype;
                if (prototype.hasOwnProperty(callback)) {
                    const descriptor = api.ObjectGetOwnPropertyDescriptor(prototype, callback);
                    if (descriptor && descriptor.value) {
                        descriptor.value = api.wrapWithCurrentZone(descriptor.value, source);
                        api._redefineProperty(opts.prototype, callback, descriptor);
                    }
                    else if (prototype[callback]) {
                        prototype[callback] = api.wrapWithCurrentZone(prototype[callback], source);
                    }
                }
                else if (prototype[callback]) {
                    prototype[callback] = api.wrapWithCurrentZone(prototype[callback], source);
                }
            });
        }
        return nativeDelegate.call(target, name, opts, options);
    };
    api.attachOriginToPatched(target[method], nativeDelegate);
}

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
const globalEventHandlersEventNames = [
    'abort',
    'animationcancel',
    'animationend',
    'animationiteration',
    'auxclick',
    'beforeinput',
    'blur',
    'cancel',
    'canplay',
    'canplaythrough',
    'change',
    'compositionstart',
    'compositionupdate',
    'compositionend',
    'cuechange',
    'click',
    'close',
    'contextmenu',
    'curechange',
    'dblclick',
    'drag',
    'dragend',
    'dragenter',
    'dragexit',
    'dragleave',
    'dragover',
    'drop',
    'durationchange',
    'emptied',
    'ended',
    'error',
    'focus',
    'focusin',
    'focusout',
    'gotpointercapture',
    'input',
    'invalid',
    'keydown',
    'keypress',
    'keyup',
    'load',
    'loadstart',
    'loadeddata',
    'loadedmetadata',
    'lostpointercapture',
    'mousedown',
    'mouseenter',
    'mouseleave',
    'mousemove',
    'mouseout',
    'mouseover',
    'mouseup',
    'mousewheel',
    'orientationchange',
    'pause',
    'play',
    'playing',
    'pointercancel',
    'pointerdown',
    'pointerenter',
    'pointerleave',
    'pointerlockchange',
    'mozpointerlockchange',
    'webkitpointerlockerchange',
    'pointerlockerror',
    'mozpointerlockerror',
    'webkitpointerlockerror',
    'pointermove',
    'pointout',
    'pointerover',
    'pointerup',
    'progress',
    'ratechange',
    'reset',
    'resize',
    'scroll',
    'seeked',
    'seeking',
    'select',
    'selectionchange',
    'selectstart',
    'show',
    'sort',
    'stalled',
    'submit',
    'suspend',
    'timeupdate',
    'volumechange',
    'touchcancel',
    'touchmove',
    'touchstart',
    'touchend',
    'transitioncancel',
    'transitionend',
    'waiting',
    'wheel'
];
const documentEventNames = [
    'afterscriptexecute', 'beforescriptexecute', 'DOMContentLoaded', 'freeze', 'fullscreenchange',
    'mozfullscreenchange', 'webkitfullscreenchange', 'msfullscreenchange', 'fullscreenerror',
    'mozfullscreenerror', 'webkitfullscreenerror', 'msfullscreenerror', 'readystatechange',
    'visibilitychange', 'resume'
];
const windowEventNames = [
    'absolutedeviceorientation',
    'afterinput',
    'afterprint',
    'appinstalled',
    'beforeinstallprompt',
    'beforeprint',
    'beforeunload',
    'devicelight',
    'devicemotion',
    'deviceorientation',
    'deviceorientationabsolute',
    'deviceproximity',
    'hashchange',
    'languagechange',
    'message',
    'mozbeforepaint',
    'offline',
    'online',
    'paint',
    'pageshow',
    'pagehide',
    'popstate',
    'rejectionhandled',
    'storage',
    'unhandledrejection',
    'unload',
    'userproximity',
    'vrdisplayconnected',
    'vrdisplaydisconnected',
    'vrdisplaypresentchange'
];
const htmlElementEventNames = [
    'beforecopy', 'beforecut', 'beforepaste', 'copy', 'cut', 'paste', 'dragstart', 'loadend',
    'animationstart', 'search', 'transitionrun', 'transitionstart', 'webkitanimationend',
    'webkitanimationiteration', 'webkitanimationstart', 'webkittransitionend'
];
const mediaElementEventNames = ['encrypted', 'waitingforkey', 'msneedkey', 'mozinterruptbegin', 'mozinterruptend'];
const ieElementEventNames = [
    'activate',
    'afterupdate',
    'ariarequest',
    'beforeactivate',
    'beforedeactivate',
    'beforeeditfocus',
    'beforeupdate',
    'cellchange',
    'controlselect',
    'dataavailable',
    'datasetchanged',
    'datasetcomplete',
    'errorupdate',
    'filterchange',
    'layoutcomplete',
    'losecapture',
    'move',
    'moveend',
    'movestart',
    'propertychange',
    'resizeend',
    'resizestart',
    'rowenter',
    'rowexit',
    'rowsdelete',
    'rowsinserted',
    'command',
    'compassneedscalibration',
    'deactivate',
    'help',
    'mscontentzoom',
    'msmanipulationstatechanged',
    'msgesturechange',
    'msgesturedoubletap',
    'msgestureend',
    'msgesturehold',
    'msgesturestart',
    'msgesturetap',
    'msgotpointercapture',
    'msinertiastart',
    'mslostpointercapture',
    'mspointercancel',
    'mspointerdown',
    'mspointerenter',
    'mspointerhover',
    'mspointerleave',
    'mspointermove',
    'mspointerout',
    'mspointerover',
    'mspointerup',
    'pointerout',
    'mssitemodejumplistitemremoved',
    'msthumbnailclick',
    'stop',
    'storagecommit'
];
const webglEventNames = ['webglcontextrestored', 'webglcontextlost', 'webglcontextcreationerror'];
const formEventNames = ['autocomplete', 'autocompleteerror'];
const detailEventNames = ['toggle'];
const frameEventNames = ['load'];
const frameSetEventNames = ['blur', 'error', 'focus', 'load', 'resize', 'scroll', 'messageerror'];
const marqueeEventNames = ['bounce', 'finish', 'start'];
const XMLHttpRequestEventNames = [
    'loadstart', 'progress', 'abort', 'error', 'load', 'progress', 'timeout', 'loadend',
    'readystatechange'
];
const IDBIndexEventNames = ['upgradeneeded', 'complete', 'abort', 'success', 'error', 'blocked', 'versionchange', 'close'];
const websocketEventNames = ['close', 'error', 'open', 'message'];
const workerEventNames = ['error', 'message'];
const eventNames = globalEventHandlersEventNames.concat(webglEventNames, formEventNames, detailEventNames, documentEventNames, windowEventNames, htmlElementEventNames, ieElementEventNames);
function filterProperties(target, onProperties, ignoreProperties) {
    if (!ignoreProperties || ignoreProperties.length === 0) {
        return onProperties;
    }
    const tip = ignoreProperties.filter(ip => ip.target === target);
    if (!tip || tip.length === 0) {
        return onProperties;
    }
    const targetIgnoreProperties = tip[0].ignoreProperties;
    return onProperties.filter(op => targetIgnoreProperties.indexOf(op) === -1);
}
function patchFilteredProperties(target, onProperties, ignoreProperties, prototype) {
    // check whether target is available, sometimes target will be undefined
    // because different browser or some 3rd party plugin.
    if (!target) {
        return;
    }
    const filteredProperties = filterProperties(target, onProperties, ignoreProperties);
    patchOnProperties(target, filteredProperties, prototype);
}
function propertyDescriptorPatch(api, _global) {
    if (isNode && !isMix) {
        return;
    }
    if (Zone[api.symbol('patchEvents')]) {
        // events are already been patched by legacy patch.
        return;
    }
    const supportsWebSocket = typeof WebSocket !== 'undefined';
    const ignoreProperties = _global['__Zone_ignore_on_properties'];
    // for browsers that we can patch the descriptor:  Chrome & Firefox
    if (isBrowser) {
        const internalWindow = window;
        const ignoreErrorProperties = isIE() ? [{ target: internalWindow, ignoreProperties: ['error'] }] : [];
        // in IE/Edge, onProp not exist in window object, but in WindowPrototype
        // so we need to pass WindowPrototype to check onProp exist or not
        patchFilteredProperties(internalWindow, eventNames.concat(['messageerror']), ignoreProperties ? ignoreProperties.concat(ignoreErrorProperties) : ignoreProperties, ObjectGetPrototypeOf(internalWindow));
        patchFilteredProperties(Document.prototype, eventNames, ignoreProperties);
        if (typeof internalWindow['SVGElement'] !== 'undefined') {
            patchFilteredProperties(internalWindow['SVGElement'].prototype, eventNames, ignoreProperties);
        }
        patchFilteredProperties(Element.prototype, eventNames, ignoreProperties);
        patchFilteredProperties(HTMLElement.prototype, eventNames, ignoreProperties);
        patchFilteredProperties(HTMLMediaElement.prototype, mediaElementEventNames, ignoreProperties);
        patchFilteredProperties(HTMLFrameSetElement.prototype, windowEventNames.concat(frameSetEventNames), ignoreProperties);
        patchFilteredProperties(HTMLBodyElement.prototype, windowEventNames.concat(frameSetEventNames), ignoreProperties);
        patchFilteredProperties(HTMLFrameElement.prototype, frameEventNames, ignoreProperties);
        patchFilteredProperties(HTMLIFrameElement.prototype, frameEventNames, ignoreProperties);
        const HTMLMarqueeElement = internalWindow['HTMLMarqueeElement'];
        if (HTMLMarqueeElement) {
            patchFilteredProperties(HTMLMarqueeElement.prototype, marqueeEventNames, ignoreProperties);
        }
        const Worker = internalWindow['Worker'];
        if (Worker) {
            patchFilteredProperties(Worker.prototype, workerEventNames, ignoreProperties);
        }
    }
    const XMLHttpRequest = _global['XMLHttpRequest'];
    if (XMLHttpRequest) {
        // XMLHttpRequest is not available in ServiceWorker, so we need to check here
        patchFilteredProperties(XMLHttpRequest.prototype, XMLHttpRequestEventNames, ignoreProperties);
    }
    const XMLHttpRequestEventTarget = _global['XMLHttpRequestEventTarget'];
    if (XMLHttpRequestEventTarget) {
        patchFilteredProperties(XMLHttpRequestEventTarget && XMLHttpRequestEventTarget.prototype, XMLHttpRequestEventNames, ignoreProperties);
    }
    if (typeof IDBIndex !== 'undefined') {
        patchFilteredProperties(IDBIndex.prototype, IDBIndexEventNames, ignoreProperties);
        patchFilteredProperties(IDBRequest.prototype, IDBIndexEventNames, ignoreProperties);
        patchFilteredProperties(IDBOpenDBRequest.prototype, IDBIndexEventNames, ignoreProperties);
        patchFilteredProperties(IDBDatabase.prototype, IDBIndexEventNames, ignoreProperties);
        patchFilteredProperties(IDBTransaction.prototype, IDBIndexEventNames, ignoreProperties);
        patchFilteredProperties(IDBCursor.prototype, IDBIndexEventNames, ignoreProperties);
    }
    if (supportsWebSocket) {
        patchFilteredProperties(WebSocket.prototype, websocketEventNames, ignoreProperties);
    }
}

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
Zone.__load_patch('util', (global, Zone, api) => {
    api.patchOnProperties = patchOnProperties;
    api.patchMethod = patchMethod;
    api.bindArguments = bindArguments;
    api.patchMacroTask = patchMacroTask;
    // In earlier version of zone.js (<0.9.0), we use env name `__zone_symbol__BLACK_LISTED_EVENTS` to
    // define which events will not be patched by `Zone.js`.
    // In newer version (>=0.9.0), we change the env name to `__zone_symbol__UNPATCHED_EVENTS` to keep
    // the name consistent with angular repo.
    // The  `__zone_symbol__BLACK_LISTED_EVENTS` is deprecated, but it is still be supported for
    // backwards compatibility.
    const SYMBOL_BLACK_LISTED_EVENTS = Zone.__symbol__('BLACK_LISTED_EVENTS');
    const SYMBOL_UNPATCHED_EVENTS = Zone.__symbol__('UNPATCHED_EVENTS');
    if (global[SYMBOL_UNPATCHED_EVENTS]) {
        global[SYMBOL_BLACK_LISTED_EVENTS] = global[SYMBOL_UNPATCHED_EVENTS];
    }
    if (global[SYMBOL_BLACK_LISTED_EVENTS]) {
        Zone[SYMBOL_BLACK_LISTED_EVENTS] = Zone[SYMBOL_UNPATCHED_EVENTS] =
            global[SYMBOL_BLACK_LISTED_EVENTS];
    }
    api.patchEventPrototype = patchEventPrototype;
    api.patchEventTarget = patchEventTarget;
    api.isIEOrEdge = isIEOrEdge;
    api.ObjectDefineProperty = ObjectDefineProperty;
    api.ObjectGetOwnPropertyDescriptor = ObjectGetOwnPropertyDescriptor;
    api.ObjectCreate = ObjectCreate;
    api.ArraySlice = ArraySlice;
    api.patchClass = patchClass;
    api.wrapWithCurrentZone = wrapWithCurrentZone;
    api.filterProperties = filterProperties;
    api.attachOriginToPatched = attachOriginToPatched;
    api._redefineProperty = Object.defineProperty;
    api.patchCallbacks = patchCallbacks;
    api.getGlobalObjects = () => ({
        globalSources,
        zoneSymbolEventNames: zoneSymbolEventNames$1,
        eventNames,
        isBrowser,
        isMix,
        isNode,
        TRUE_STR,
        FALSE_STR,
        ZONE_SYMBOL_PREFIX,
        ADD_EVENT_LISTENER_STR,
        REMOVE_EVENT_LISTENER_STR
    });
});

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
const taskSymbol = zoneSymbol('zoneTask');
function patchTimer(window, setName, cancelName, nameSuffix) {
    let setNative = null;
    let clearNative = null;
    setName += nameSuffix;
    cancelName += nameSuffix;
    const tasksByHandleId = {};
    function scheduleTask(task) {
        const data = task.data;
        data.args[0] = function () {
            return task.invoke.apply(this, arguments);
        };
        data.handleId = setNative.apply(window, data.args);
        return task;
    }
    function clearTask(task) {
        return clearNative.call(window, task.data.handleId);
    }
    setNative =
        patchMethod(window, setName, (delegate) => function (self, args) {
            if (typeof args[0] === 'function') {
                const options = {
                    isPeriodic: nameSuffix === 'Interval',
                    delay: (nameSuffix === 'Timeout' || nameSuffix === 'Interval') ? args[1] || 0 :
                        undefined,
                    args: args
                };
                const callback = args[0];
                args[0] = function timer() {
                    try {
                        return callback.apply(this, arguments);
                    }
                    finally {
                        // issue-934, task will be cancelled
                        // even it is a periodic task such as
                        // setInterval
                        // https://github.com/angular/angular/issues/40387
                        // Cleanup tasksByHandleId should be handled before scheduleTask
                        // Since some zoneSpec may intercept and doesn't trigger
                        // scheduleFn(scheduleTask) provided here.
                        if (!(options.isPeriodic)) {
                            if (typeof options.handleId === 'number') {
                                // in non-nodejs env, we remove timerId
                                // from local cache
                                delete tasksByHandleId[options.handleId];
                            }
                            else if (options.handleId) {
                                // Node returns complex objects as handleIds
                                // we remove task reference from timer object
                                options.handleId[taskSymbol] = null;
                            }
                        }
                    }
                };
                const task = scheduleMacroTaskWithCurrentZone(setName, args[0], options, scheduleTask, clearTask);
                if (!task) {
                    return task;
                }
                // Node.js must additionally support the ref and unref functions.
                const handle = task.data.handleId;
                if (typeof handle === 'number') {
                    // for non nodejs env, we save handleId: task
                    // mapping in local cache for clearTimeout
                    tasksByHandleId[handle] = task;
                }
                else if (handle) {
                    // for nodejs env, we save task
                    // reference in timerId Object for clearTimeout
                    handle[taskSymbol] = task;
                }
                // check whether handle is null, because some polyfill or browser
                // may return undefined from setTimeout/setInterval/setImmediate/requestAnimationFrame
                if (handle && handle.ref && handle.unref && typeof handle.ref === 'function' &&
                    typeof handle.unref === 'function') {
                    task.ref = handle.ref.bind(handle);
                    task.unref = handle.unref.bind(handle);
                }
                if (typeof handle === 'number' || handle) {
                    return handle;
                }
                return task;
            }
            else {
                // cause an error by calling it directly.
                return delegate.apply(window, args);
            }
        });
    clearNative =
        patchMethod(window, cancelName, (delegate) => function (self, args) {
            const id = args[0];
            let task;
            if (typeof id === 'number') {
                // non nodejs env.
                task = tasksByHandleId[id];
            }
            else {
                // nodejs env.
                task = id && id[taskSymbol];
                // other environments.
                if (!task) {
                    task = id;
                }
            }
            if (task && typeof task.type === 'string') {
                if (task.state !== 'notScheduled' &&
                    (task.cancelFn && task.data.isPeriodic || task.runCount === 0)) {
                    if (typeof id === 'number') {
                        delete tasksByHandleId[id];
                    }
                    else if (id) {
                        id[taskSymbol] = null;
                    }
                    // Do not cancel already canceled functions
                    task.zone.cancelTask(task);
                }
            }
            else {
                // cause an error by calling it directly.
                delegate.apply(window, args);
            }
        });
}

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
function patchCustomElements(_global, api) {
    const { isBrowser, isMix } = api.getGlobalObjects();
    if ((!isBrowser && !isMix) || !_global['customElements'] || !('customElements' in _global)) {
        return;
    }
    const callbacks = ['connectedCallback', 'disconnectedCallback', 'adoptedCallback', 'attributeChangedCallback'];
    api.patchCallbacks(api, _global.customElements, 'customElements', 'define', callbacks);
}

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
function eventTargetPatch(_global, api) {
    if (Zone[api.symbol('patchEventTarget')]) {
        // EventTarget is already patched.
        return;
    }
    const { eventNames, zoneSymbolEventNames, TRUE_STR, FALSE_STR, ZONE_SYMBOL_PREFIX } = api.getGlobalObjects();
    //  predefine all __zone_symbol__ + eventName + true/false string
    for (let i = 0; i < eventNames.length; i++) {
        const eventName = eventNames[i];
        const falseEventName = eventName + FALSE_STR;
        const trueEventName = eventName + TRUE_STR;
        const symbol = ZONE_SYMBOL_PREFIX + falseEventName;
        const symbolCapture = ZONE_SYMBOL_PREFIX + trueEventName;
        zoneSymbolEventNames[eventName] = {};
        zoneSymbolEventNames[eventName][FALSE_STR] = symbol;
        zoneSymbolEventNames[eventName][TRUE_STR] = symbolCapture;
    }
    const EVENT_TARGET = _global['EventTarget'];
    if (!EVENT_TARGET || !EVENT_TARGET.prototype) {
        return;
    }
    api.patchEventTarget(_global, [EVENT_TARGET && EVENT_TARGET.prototype]);
    return true;
}
function patchEvent(global, api) {
    api.patchEventPrototype(global, api);
}

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
Zone.__load_patch('legacy', (global) => {
    const legacyPatch = global[Zone.__symbol__('legacyPatch')];
    if (legacyPatch) {
        legacyPatch();
    }
});
Zone.__load_patch('queueMicrotask', (global, Zone, api) => {
    api.patchMethod(global, 'queueMicrotask', delegate => {
        return function (self, args) {
            Zone.current.scheduleMicroTask('queueMicrotask', args[0]);
        };
    });
});
Zone.__load_patch('timers', (global) => {
    const set = 'set';
    const clear = 'clear';
    patchTimer(global, set, clear, 'Timeout');
    patchTimer(global, set, clear, 'Interval');
    patchTimer(global, set, clear, 'Immediate');
});
Zone.__load_patch('requestAnimationFrame', (global) => {
    patchTimer(global, 'request', 'cancel', 'AnimationFrame');
    patchTimer(global, 'mozRequest', 'mozCancel', 'AnimationFrame');
    patchTimer(global, 'webkitRequest', 'webkitCancel', 'AnimationFrame');
});
Zone.__load_patch('blocking', (global, Zone) => {
    const blockingMethods = ['alert', 'prompt', 'confirm'];
    for (let i = 0; i < blockingMethods.length; i++) {
        const name = blockingMethods[i];
        patchMethod(global, name, (delegate, symbol, name) => {
            return function (s, args) {
                return Zone.current.run(delegate, global, args, name);
            };
        });
    }
});
Zone.__load_patch('EventTarget', (global, Zone, api) => {
    patchEvent(global, api);
    eventTargetPatch(global, api);
    // patch XMLHttpRequestEventTarget's addEventListener/removeEventListener
    const XMLHttpRequestEventTarget = global['XMLHttpRequestEventTarget'];
    if (XMLHttpRequestEventTarget && XMLHttpRequestEventTarget.prototype) {
        api.patchEventTarget(global, [XMLHttpRequestEventTarget.prototype]);
    }
});
Zone.__load_patch('MutationObserver', (global, Zone, api) => {
    patchClass('MutationObserver');
    patchClass('WebKitMutationObserver');
});
Zone.__load_patch('IntersectionObserver', (global, Zone, api) => {
    patchClass('IntersectionObserver');
});
Zone.__load_patch('FileReader', (global, Zone, api) => {
    patchClass('FileReader');
});
Zone.__load_patch('on_property', (global, Zone, api) => {
    propertyDescriptorPatch(api, global);
});
Zone.__load_patch('customElements', (global, Zone, api) => {
    patchCustomElements(global, api);
});
Zone.__load_patch('XHR', (global, Zone) => {
    // Treat XMLHttpRequest as a macrotask.
    patchXHR(global);
    const XHR_TASK = zoneSymbol('xhrTask');
    const XHR_SYNC = zoneSymbol('xhrSync');
    const XHR_LISTENER = zoneSymbol('xhrListener');
    const XHR_SCHEDULED = zoneSymbol('xhrScheduled');
    const XHR_URL = zoneSymbol('xhrURL');
    const XHR_ERROR_BEFORE_SCHEDULED = zoneSymbol('xhrErrorBeforeScheduled');
    function patchXHR(window) {
        const XMLHttpRequest = window['XMLHttpRequest'];
        if (!XMLHttpRequest) {
            // XMLHttpRequest is not available in service worker
            return;
        }
        const XMLHttpRequestPrototype = XMLHttpRequest.prototype;
        function findPendingTask(target) {
            return target[XHR_TASK];
        }
        let oriAddListener = XMLHttpRequestPrototype[ZONE_SYMBOL_ADD_EVENT_LISTENER];
        let oriRemoveListener = XMLHttpRequestPrototype[ZONE_SYMBOL_REMOVE_EVENT_LISTENER];
        if (!oriAddListener) {
            const XMLHttpRequestEventTarget = window['XMLHttpRequestEventTarget'];
            if (XMLHttpRequestEventTarget) {
                const XMLHttpRequestEventTargetPrototype = XMLHttpRequestEventTarget.prototype;
                oriAddListener = XMLHttpRequestEventTargetPrototype[ZONE_SYMBOL_ADD_EVENT_LISTENER];
                oriRemoveListener = XMLHttpRequestEventTargetPrototype[ZONE_SYMBOL_REMOVE_EVENT_LISTENER];
            }
        }
        const READY_STATE_CHANGE = 'readystatechange';
        const SCHEDULED = 'scheduled';
        function scheduleTask(task) {
            const data = task.data;
            const target = data.target;
            target[XHR_SCHEDULED] = false;
            target[XHR_ERROR_BEFORE_SCHEDULED] = false;
            // remove existing event listener
            const listener = target[XHR_LISTENER];
            if (!oriAddListener) {
                oriAddListener = target[ZONE_SYMBOL_ADD_EVENT_LISTENER];
                oriRemoveListener = target[ZONE_SYMBOL_REMOVE_EVENT_LISTENER];
            }
            if (listener) {
                oriRemoveListener.call(target, READY_STATE_CHANGE, listener);
            }
            const newListener = target[XHR_LISTENER] = () => {
                if (target.readyState === target.DONE) {
                    // sometimes on some browsers XMLHttpRequest will fire onreadystatechange with
                    // readyState=4 multiple times, so we need to check task state here
                    if (!data.aborted && target[XHR_SCHEDULED] && task.state === SCHEDULED) {
                        // check whether the xhr has registered onload listener
                        // if that is the case, the task should invoke after all
                        // onload listeners finish.
                        // Also if the request failed without response (status = 0), the load event handler
                        // will not be triggered, in that case, we should also invoke the placeholder callback
                        // to close the XMLHttpRequest::send macroTask.
                        // https://github.com/angular/angular/issues/38795
                        const loadTasks = target[Zone.__symbol__('loadfalse')];
                        if (target.status !== 0 && loadTasks && loadTasks.length > 0) {
                            const oriInvoke = task.invoke;
                            task.invoke = function () {
                                // need to load the tasks again, because in other
                                // load listener, they may remove themselves
                                const loadTasks = target[Zone.__symbol__('loadfalse')];
                                for (let i = 0; i < loadTasks.length; i++) {
                                    if (loadTasks[i] === task) {
                                        loadTasks.splice(i, 1);
                                    }
                                }
                                if (!data.aborted && task.state === SCHEDULED) {
                                    oriInvoke.call(task);
                                }
                            };
                            loadTasks.push(task);
                        }
                        else {
                            task.invoke();
                        }
                    }
                    else if (!data.aborted && target[XHR_SCHEDULED] === false) {
                        // error occurs when xhr.send()
                        target[XHR_ERROR_BEFORE_SCHEDULED] = true;
                    }
                }
            };
            oriAddListener.call(target, READY_STATE_CHANGE, newListener);
            const storedTask = target[XHR_TASK];
            if (!storedTask) {
                target[XHR_TASK] = task;
            }
            sendNative.apply(target, data.args);
            target[XHR_SCHEDULED] = true;
            return task;
        }
        function placeholderCallback() { }
        function clearTask(task) {
            const data = task.data;
            // Note - ideally, we would call data.target.removeEventListener here, but it's too late
            // to prevent it from firing. So instead, we store info for the event listener.
            data.aborted = true;
            return abortNative.apply(data.target, data.args);
        }
        const openNative = patchMethod(XMLHttpRequestPrototype, 'open', () => function (self, args) {
            self[XHR_SYNC] = args[2] == false;
            self[XHR_URL] = args[1];
            return openNative.apply(self, args);
        });
        const XMLHTTPREQUEST_SOURCE = 'XMLHttpRequest.send';
        const fetchTaskAborting = zoneSymbol('fetchTaskAborting');
        const fetchTaskScheduling = zoneSymbol('fetchTaskScheduling');
        const sendNative = patchMethod(XMLHttpRequestPrototype, 'send', () => function (self, args) {
            if (Zone.current[fetchTaskScheduling] === true) {
                // a fetch is scheduling, so we are using xhr to polyfill fetch
                // and because we already schedule macroTask for fetch, we should
                // not schedule a macroTask for xhr again
                return sendNative.apply(self, args);
            }
            if (self[XHR_SYNC]) {
                // if the XHR is sync there is no task to schedule, just execute the code.
                return sendNative.apply(self, args);
            }
            else {
                const options = { target: self, url: self[XHR_URL], isPeriodic: false, args: args, aborted: false };
                const task = scheduleMacroTaskWithCurrentZone(XMLHTTPREQUEST_SOURCE, placeholderCallback, options, scheduleTask, clearTask);
                if (self && self[XHR_ERROR_BEFORE_SCHEDULED] === true && !options.aborted &&
                    task.state === SCHEDULED) {
                    // xhr request throw error when send
                    // we should invoke task instead of leaving a scheduled
                    // pending macroTask
                    task.invoke();
                }
            }
        });
        const abortNative = patchMethod(XMLHttpRequestPrototype, 'abort', () => function (self, args) {
            const task = findPendingTask(self);
            if (task && typeof task.type == 'string') {
                // If the XHR has already completed, do nothing.
                // If the XHR has already been aborted, do nothing.
                // Fix #569, call abort multiple times before done will cause
                // macroTask task count be negative number
                if (task.cancelFn == null || (task.data && task.data.aborted)) {
                    return;
                }
                task.zone.cancelTask(task);
            }
            else if (Zone.current[fetchTaskAborting] === true) {
                // the abort is called from fetch polyfill, we need to call native abort of XHR.
                return abortNative.apply(self, args);
            }
            // Otherwise, we are trying to abort an XHR which has not yet been sent, so there is no
            // task
            // to cancel. Do nothing.
        });
    }
});
Zone.__load_patch('geolocation', (global) => {
    /// GEO_LOCATION
    if (global['navigator'] && global['navigator'].geolocation) {
        patchPrototype(global['navigator'].geolocation, ['getCurrentPosition', 'watchPosition']);
    }
});
Zone.__load_patch('PromiseRejectionEvent', (global, Zone) => {
    // handle unhandled promise rejection
    function findPromiseRejectionHandler(evtName) {
        return function (e) {
            const eventTasks = findEventTasks(global, evtName);
            eventTasks.forEach(eventTask => {
                // windows has added unhandledrejection event listener
                // trigger the event listener
                const PromiseRejectionEvent = global['PromiseRejectionEvent'];
                if (PromiseRejectionEvent) {
                    const evt = new PromiseRejectionEvent(evtName, { promise: e.promise, reason: e.rejection });
                    eventTask.invoke(evt);
                }
            });
        };
    }
    if (global['PromiseRejectionEvent']) {
        Zone[zoneSymbol('unhandledPromiseRejectionHandler')] =
            findPromiseRejectionHandler('unhandledrejection');
        Zone[zoneSymbol('rejectionHandledHandler')] =
            findPromiseRejectionHandler('rejectionhandled');
    }
});

},{}],"node_modules/@opentelemetry/context-zone/build/esm/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _contextZonePeerDep = require("@opentelemetry/context-zone-peer-dep");

Object.keys(_contextZonePeerDep).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _contextZonePeerDep[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _contextZonePeerDep[key];
    }
  });
});

require("zone.js");
},{"@opentelemetry/context-zone-peer-dep":"node_modules/@opentelemetry/context-zone-peer-dep/build/esm/index.js","zone.js":"node_modules/zone.js/fesm2015/zone.js"}],"output/OpenTelemetry.ZoneContext/foreign.js":[function(require,module,exports) {
"use strict";

var _require = require('@opentelemetry/context-zone'),
    ZoneContextManager = _require.ZoneContextManager;

exports.zoneContextManager = function () {
  return new ZoneContextManager();
};
},{"@opentelemetry/context-zone":"node_modules/@opentelemetry/context-zone/build/esm/index.js"}],"output/OpenTelemetry.ZoneContext/index.js":[function(require,module,exports) {
// Generated by purs version 0.14.5
"use strict";

var $foreign = require("./foreign.js");

module.exports = {
  zoneContextManager: $foreign.zoneContextManager
};
},{"./foreign.js":"output/OpenTelemetry.ZoneContext/foreign.js"}],"output/Main/index.js":[function(require,module,exports) {
// Generated by purs version 0.14.5
"use strict";

var $foreign = require("./foreign.js");

var Data_Maybe = require("../Data.Maybe/index.js");

var Effect_Class = require("../Effect.Class/index.js");

var Effect_Console = require("../Effect.Console/index.js");

var OpenTelemetry_API_Span = require("../OpenTelemetry.API.Span/index.js");

var OpenTelemetry_API_Tracer = require("../OpenTelemetry.API.Tracer/index.js");

var OpenTelemetry_Instrumentation = require("../OpenTelemetry.Instrumentation/index.js");

var OpenTelemetry_InstrumentationFetch = require("../OpenTelemetry.InstrumentationFetch/index.js");

var OpenTelemetry_SDKTraceBase = require("../OpenTelemetry.SDKTraceBase/index.js");

var OpenTelemetry_SDKTraceWeb = require("../OpenTelemetry.SDKTraceWeb/index.js");

var OpenTelemetry_ZoneContext = require("../OpenTelemetry.ZoneContext/index.js");

var main = function __do() {
  var provider = OpenTelemetry_SDKTraceWeb.webTracerProvider();
  var consoleExporter = OpenTelemetry_SDKTraceBase.consoleExporter();
  var zoneContextManager = OpenTelemetry_ZoneContext.zoneContextManager();
  OpenTelemetry_SDKTraceWeb.addSpanProcessor(provider)(OpenTelemetry_SDKTraceBase.wrapSimpleSpanProcessor(consoleExporter))();
  OpenTelemetry_SDKTraceWeb.registerContextManager(provider)(zoneContextManager)();
  var fetchInstrumentation = OpenTelemetry_InstrumentationFetch.fetchInstrumentation();

  var _cleanupFn = OpenTelemetry_Instrumentation.registerInstrumentations({
    instrumentations: [fetchInstrumentation],
    meterProvider: Data_Maybe.Nothing.value,
    tracerProvider: Data_Maybe.Nothing.value
  })();

  var tracer = OpenTelemetry_SDKTraceWeb.getTracer(provider)("example-tracer-web")();
  OpenTelemetry_API_Tracer.startActiveSpan(Effect_Class.monadEffectEffect)(tracer)("bar")(function (span) {
    return function __do() {
      OpenTelemetry_API_Span.setAttribute(span)("key")("value")();
      OpenTelemetry_API_Span.addEvent(span)("Something happened!")();
      return OpenTelemetry_API_Tracer.startActiveSpan(Effect_Class.monadEffectEffect)(tracer)("nested!")(function (span1) {
        return function __do() {
          OpenTelemetry_API_Span.setAttribute(span1)("key")("value")();
          return OpenTelemetry_API_Span.addEvent(span1)("Something happened!")();
        };
      })();
    };
  })();
  $foreign.ffiFetch();
  return Effect_Console.log("\uD83C\uDF5D")();
};

module.exports = {
  main: main,
  ffiFetch: $foreign.ffiFetch
};
},{"./foreign.js":"output/Main/foreign.js","../Data.Maybe/index.js":"output/Data.Maybe/index.js","../Effect.Class/index.js":"output/Effect.Class/index.js","../Effect.Console/index.js":"output/Effect.Console/index.js","../OpenTelemetry.API.Span/index.js":"output/OpenTelemetry.API.Span/index.js","../OpenTelemetry.API.Tracer/index.js":"output/OpenTelemetry.API.Tracer/index.js","../OpenTelemetry.Instrumentation/index.js":"output/OpenTelemetry.Instrumentation/index.js","../OpenTelemetry.InstrumentationFetch/index.js":"output/OpenTelemetry.InstrumentationFetch/index.js","../OpenTelemetry.SDKTraceBase/index.js":"output/OpenTelemetry.SDKTraceBase/index.js","../OpenTelemetry.SDKTraceWeb/index.js":"output/OpenTelemetry.SDKTraceWeb/index.js","../OpenTelemetry.ZoneContext/index.js":"output/OpenTelemetry.ZoneContext/index.js"}],"node_modules/parcel-bundler/src/builtins/hmr-runtime.js":[function(require,module,exports) {
var global = arguments[3];
var OVERLAY_ID = '__parcel__error__overlay__';
var OldModule = module.bundle.Module;

function Module(moduleName) {
  OldModule.call(this, moduleName);
  this.hot = {
    data: module.bundle.hotData,
    _acceptCallbacks: [],
    _disposeCallbacks: [],
    accept: function (fn) {
      this._acceptCallbacks.push(fn || function () {});
    },
    dispose: function (fn) {
      this._disposeCallbacks.push(fn);
    }
  };
  module.bundle.hotData = null;
}

module.bundle.Module = Module;
var checkedAssets, assetsToAccept;
var parent = module.bundle.parent;

if ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {
  var hostname = "" || location.hostname;
  var protocol = location.protocol === 'https:' ? 'wss' : 'ws';
  var ws = new WebSocket(protocol + '://' + hostname + ':' + "57868" + '/');

  ws.onmessage = function (event) {
    checkedAssets = {};
    assetsToAccept = [];
    var data = JSON.parse(event.data);

    if (data.type === 'update') {
      var handled = false;
      data.assets.forEach(function (asset) {
        if (!asset.isNew) {
          var didAccept = hmrAcceptCheck(global.parcelRequire, asset.id);

          if (didAccept) {
            handled = true;
          }
        }
      }); // Enable HMR for CSS by default.

      handled = handled || data.assets.every(function (asset) {
        return asset.type === 'css' && asset.generated.js;
      });

      if (handled) {
        console.clear();
        data.assets.forEach(function (asset) {
          hmrApply(global.parcelRequire, asset);
        });
        assetsToAccept.forEach(function (v) {
          hmrAcceptRun(v[0], v[1]);
        });
      } else if (location.reload) {
        // `location` global exists in a web worker context but lacks `.reload()` function.
        location.reload();
      }
    }

    if (data.type === 'reload') {
      ws.close();

      ws.onclose = function () {
        location.reload();
      };
    }

    if (data.type === 'error-resolved') {
      console.log('[parcel] ✨ Error resolved');
      removeErrorOverlay();
    }

    if (data.type === 'error') {
      console.error('[parcel] 🚨  ' + data.error.message + '\n' + data.error.stack);
      removeErrorOverlay();
      var overlay = createErrorOverlay(data);
      document.body.appendChild(overlay);
    }
  };
}

function removeErrorOverlay() {
  var overlay = document.getElementById(OVERLAY_ID);

  if (overlay) {
    overlay.remove();
  }
}

function createErrorOverlay(data) {
  var overlay = document.createElement('div');
  overlay.id = OVERLAY_ID; // html encode message and stack trace

  var message = document.createElement('div');
  var stackTrace = document.createElement('pre');
  message.innerText = data.error.message;
  stackTrace.innerText = data.error.stack;
  overlay.innerHTML = '<div style="background: black; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; opacity: 0.85; font-family: Menlo, Consolas, monospace; z-index: 9999;">' + '<span style="background: red; padding: 2px 4px; border-radius: 2px;">ERROR</span>' + '<span style="top: 2px; margin-left: 5px; position: relative;">🚨</span>' + '<div style="font-size: 18px; font-weight: bold; margin-top: 20px;">' + message.innerHTML + '</div>' + '<pre>' + stackTrace.innerHTML + '</pre>' + '</div>';
  return overlay;
}

function getParents(bundle, id) {
  var modules = bundle.modules;

  if (!modules) {
    return [];
  }

  var parents = [];
  var k, d, dep;

  for (k in modules) {
    for (d in modules[k][1]) {
      dep = modules[k][1][d];

      if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) {
        parents.push(k);
      }
    }
  }

  if (bundle.parent) {
    parents = parents.concat(getParents(bundle.parent, id));
  }

  return parents;
}

function hmrApply(bundle, asset) {
  var modules = bundle.modules;

  if (!modules) {
    return;
  }

  if (modules[asset.id] || !bundle.parent) {
    var fn = new Function('require', 'module', 'exports', asset.generated.js);
    asset.isNew = !modules[asset.id];
    modules[asset.id] = [fn, asset.deps];
  } else if (bundle.parent) {
    hmrApply(bundle.parent, asset);
  }
}

function hmrAcceptCheck(bundle, id) {
  var modules = bundle.modules;

  if (!modules) {
    return;
  }

  if (!modules[id] && bundle.parent) {
    return hmrAcceptCheck(bundle.parent, id);
  }

  if (checkedAssets[id]) {
    return;
  }

  checkedAssets[id] = true;
  var cached = bundle.cache[id];
  assetsToAccept.push([bundle, id]);

  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {
    return true;
  }

  return getParents(global.parcelRequire, id).some(function (id) {
    return hmrAcceptCheck(global.parcelRequire, id);
  });
}

function hmrAcceptRun(bundle, id) {
  var cached = bundle.cache[id];
  bundle.hotData = {};

  if (cached) {
    cached.hot.data = bundle.hotData;
  }

  if (cached && cached.hot && cached.hot._disposeCallbacks.length) {
    cached.hot._disposeCallbacks.forEach(function (cb) {
      cb(bundle.hotData);
    });
  }

  delete bundle.cache[id];
  bundle(id);
  cached = bundle.cache[id];

  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {
    cached.hot._acceptCallbacks.forEach(function (cb) {
      cb();
    });

    return true;
  }
}
},{}]},{},["node_modules/parcel-bundler/src/builtins/hmr-runtime.js","output/Main/index.js"], null)
//# sourceMappingURL=/Main.808c9d97.js.map